diff -urNb ec-cube-iis/data/class/db/SC_DB_DBFactory.php ec-cube/data/class/db/SC_DB_DBFactory.php
--- ec-cube-iis/data/class/db/SC_DB_DBFactory.php	2014-08-20 17:46:25.000000000 +0900
+++ ec-cube/data/class/db/SC_DB_DBFactory.php	2014-08-20 17:49:19.000000000 +0900
@@ -45,6 +45,9 @@
             case 'pgsql':
                 return new SC_DB_DBFactory_PGSQL();
 
+            case 'sqlsrv':
+                return new SC_DB_DBFactory_SQLSRV();
+
             default:
                 return new SC_DB_DBFactory();
         }
diff -urNb ec-cube-iis/data/class/db/dbfactory/SC_DB_DBFactory_SQLSRV.php ec-cube/data/class/db/dbfactory/SC_DB_DBFactory_SQLSRV.php
--- ec-cube-iis/data/class/db/dbfactory/SC_DB_DBFactory_SQLSRV.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/class/db/dbfactory/SC_DB_DBFactory_SQLSRV.php	2014-08-20 17:49:19.000000000 +0900
@@ -0,0 +1,313 @@
+<?php
+/*
+ * This file is part of EC-CUBE
+ *
+ * Copyright(c) 2000-2011 LOCKON CO.,LTD. All Rights Reserved.
+ *
+ * http://www.lockon.co.jp/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ */
+
+// {{{ requires
+require_once CLASS_REALDIR . 'db/SC_DB_DBFactory.php';
+
+/**
+ * SQL Server 固有の処理をするクラス.
+ *
+ * このクラスを直接インスタンス化しないこと.
+ * 必ず SC_DB_DBFactory クラスを経由してインスタンス化する.
+ * また, SC_DB_DBFactory クラスの関数を必ずオーバーライドしている必要がある.
+ *
+ * @package DB
+ * @author LOCKON CO.,LTD.
+ * @version $Id:SC_DB_DBFactory_PGSQL.php 15532 2007-08-31 14:39:46Z nanasess $
+ */
+class SC_DB_DBFactory_SQLSRV extends SC_DB_DBFactory
+{
+
+    /**
+     * DBのバージョンを取得する.
+     *
+     * @param string $dsn データソース名
+     * @return string データベースのバージョン
+     */
+    function sfGetDBVersion($dsn = "")
+    {
+        $objQuery =& SC_Query_Ex::getSingletonInstance($dsn);
+        $val = $objQuery->getOne("select @@version");
+        return str_replace("\r\n", " ", $val);
+    }
+
+    /**
+     * MySQL 用の SQL 文に変更する.
+     *
+     * DB_TYPE が SQLSRV の場合は SQL Server 用の SQL 文に置換する.
+     *
+     * @access private
+     * @param string $sql SQL 文
+     * @return string MySQL 用に置換した SQL 文
+     */
+    function sfChangeMySQL($sql)
+    {
+        $sql = $this->sfChangeILIKE($sql);
+        $sql = $this->sfChangeArrayToString($sql);
+        $sql = $this->convertRecommendSql($sql);
+
+        return $sql;
+    }
+
+    /**
+     * ARRAY_TO_STRING(ARRAY(A),B) を GROUP_CONCAT() に変換する.
+     *
+     * @access private
+     * @param string $sql SQL文
+     * @return string 変換後の SQL 文
+     */
+    function sfChangeArrayToString($sql)
+    {
+        if(strpos(strtoupper($sql), 'ARRAY_TO_STRING') !== FALSE) {
+            preg_match_all('/ARRAY_TO_STRING.*?\(.*?ARRAY\(.*?SELECT (.+?) FROM (.+?) WHERE (.+?)\).*?\,.*?\'(.+?)\'.*?\)/is', $sql, $match, PREG_SET_ORDER);
+
+            foreach($match as $item) {
+                $replace = "CAST ({$item[1]} AS varchar) + '" . $item[4] . "' FROM " . $item[2] . " WHERE " . $item[3] . " FOR XML PATH('')";
+                $sql = str_replace($item[0], $replace, $sql);
+            }
+        }
+        return $sql;
+    }
+
+    /**
+     * 関連商品の SQL を変換する。
+     *
+     * @param string SQL 文
+     * @return string 変換後の SQL 文
+     */
+    function convertRecommendSql($sql)
+    {
+        if (strpos(strtoupper($sql), ') AS RECOMMEND_') !== FALSE) {
+            $pattern = '/\(SELECT (comment|recommend_product_id) FROM dtb_recommend_products WHERE (.*?) ORDER BY (.*?) limit 1 offset (\d+)\) AS ((recommend_comment|recommend_product_id)\d+)/';
+            $replacement = '(SELECT \1 FROM dtb_recommend_products WHERE \2 ORDER BY \3 OFFSET \4 ROWS FETCH NEXT 1 ROWS ONLY) AS \5';
+            $sql = preg_replace($pattern, $replacement, $sql);
+        }
+
+        return $sql;
+    }
+
+    /**
+     * 昨日の売上高・売上件数を算出する SQL を返す.
+     *
+     * @param string $method SUM または COUNT
+     * @return string 昨日の売上高・売上件数を算出する SQL
+     */
+    function getOrderYesterdaySql($method)
+    {
+        return "SELECT ".$method."(total) FROM dtb_order "
+              . "WHERE del_flg = 0 "
+                . "AND create_date >= convert(varchar(10),getdate()-1,111) AND create_date < convert(varchar(10),getdate(),111) "
+                . "AND status <> " . ORDER_CANCEL;
+    }
+
+    /**
+     * 当月の売上高・売上件数を算出する SQL を返す.
+     *
+     * @param string $method SUM または COUNT
+     * @return string 当月の売上高・売上件数を算出する SQL
+     */
+    function getOrderMonthSql($method)
+    {
+        return "SELECT ".$method."(total) FROM dtb_order "
+              . "WHERE del_flg = 0 "
+                . "AND create_date >= convert(varchar(10), YEAR(getdate())) + '/' + convert(varchar(10), MONTH(getdate())) + '/01'"
+                . "AND convert(varchar(10), create_date, 111) <> convert(varchar(10),getdate(),111) "
+                . "AND status <> " . ORDER_CANCEL;
+    }
+
+    /**
+     * 昨日のレビュー書き込み件数を算出する SQL を返す.
+     *
+     * @return string 昨日のレビュー書き込み件数を算出する SQL
+     */
+    function getReviewYesterdaySql()
+    {
+        return "SELECT COUNT(*) FROM dtb_review AS A "
+          . "LEFT JOIN dtb_products AS B "
+                 . "ON A.product_id = B.product_id "
+              . "WHERE A.del_flg=0 "
+                . "AND B.del_flg = 0 "
+                . "AND A.create_date >= convert(varchar(10),getdate()-1,111) AND A.create_date < convert(varchar(10),getdate(),111) ";
+    }
+
+    /**
+     * メール送信履歴の start_date の検索条件の SQL を返す.
+     *
+     * @deprecated
+     * @return string 検索条件の SQL
+     */
+    function getSendHistoryWhereStartdateSql()
+    {
+        // FIXME
+        return null;
+    }
+
+    /**
+     * ダウンロード販売の検索条件の SQL を返す.
+     *
+     * @param string $dtb_order_alias
+     * @return string 検索条件の SQL
+     */
+    function getDownloadableDaysWhereSql($dtb_order_alias = 'dtb_order')
+    {
+        $baseinfo = SC_Helper_DB_Ex::sfGetBasisData();
+        //downloadable_daysにNULLが入っている場合(無期限ダウンロード可能時)もあるので、NULLの場合は0日に補正
+        $downloadable_days = $baseinfo['downloadable_days'];
+        if($downloadable_days ==null || $downloadable_days == "")$downloadable_days=0;
+        return "(SELECT CASE WHEN (SELECT d1.downloadable_days_unlimited FROM dtb_baseinfo d1) = 1 AND " . $dtb_order_alias . ".payment_date IS NOT NULL THEN 1 WHEN CURRENT_TIMESTAMP <= convert(datetimeoffset, DATEADD(day, ${downloadable_days}, ${dtb_order_alias}.payment_date)) THEN 1 ELSE 0 END)";
+        return 1; // FIXME
+    }
+
+    /**
+     * 売上集計の期間別集計のSQLを返す
+     *
+     * @param mixed $type
+     * @return string 検索条件のSQL
+     */
+    function getOrderTotalDaysWhereSql($format)
+    {
+
+        return $format . " AS str_date,
+            COUNT(order_id) AS total_order,
+            SUM(CASE WHEN order_sex = 1 THEN 1 ELSE 0 END) AS men,
+            SUM(CASE WHEN order_sex = 2 THEN 1 ELSE 0 END) AS women,
+            SUM(CASE WHEN customer_id <> 0 AND order_sex = 1 THEN 1 ELSE 0 END) AS men_member,
+            SUM(CASE WHEN customer_id <> 0 AND order_sex = 2 THEN 1 ELSE 0 END) AS women_member,
+            SUM(CASE WHEN customer_id = 0 AND order_sex = 1 THEN 1 ELSE 0 END) AS men_nonmember,
+            SUM(CASE WHEN customer_id = 0 AND order_sex = 2 THEN 1 ELSE 0 END) AS women_nonmember,
+            SUM(total) AS total,
+            AVG(total) AS total_average";
+    }
+
+    /**
+     * 売上集計の年代別集計の年代抽出部分のSQLを返す
+     *
+     * @return string 年代抽出部分の SQL
+     */
+    function getOrderTotalAgeColSql()
+    {
+        return 'SELECT order_id,total,create_date ,del_flg ,status,customer_id,CASE 
+      WHEN RIGHT(CONVERT(CHAR(8) , order_birth, 112), 4) > RIGHT(CONVERT(CHAR(8) , create_date, 112), 4) THEN ROUND(YEAR(create_date) - YEAR(order_birth) - 1,-1,1) 
+      ELSE ROUND(YEAR(create_date) - YEAR(order_birth),-1,1)
+   END as age FROM dtb_order';
+    }
+
+    /**
+     * 文字列連結を行う.
+     *
+     * @param array $columns 連結を行うカラム名
+     * @return string 連結後の SQL 文
+     */
+    function concatColumn($columns)
+    {
+        $sql = "";
+        $i = 0;
+        $total = count($columns);
+        foreach ($columns as $column) {
+            $sql .= $column;
+            if ($i < $total -1) {
+                $sql .= " + ";
+            }
+            $i++;
+        }
+        return $sql;
+    }
+
+    /**
+     * テーブルを検索する.
+     *
+     * 引数に部分一致するテーブル名を配列で返す.
+     *
+     * @deprecated SC_Query::listTables() を使用してください
+     * @param string $expression 検索文字列
+     * @return array テーブル名の配列
+     */
+    function findTableNames($expression = "")
+    {
+        $objQuery =& SC_Query_Ex::getSingletonInstance();
+        $sql = 'SELECT name FROM sysobjects WHERE xtype = \'u\' AND name LIKE \'mtb_%\' order by name';
+        $arrColList = $objQuery->getAll($sql);
+        $arrColList = SC_Utils_Ex::sfSwapArray($arrColList, false);
+        $arrList = array();
+        foreach($arrColList[0] as $val){
+            $arrList[$val] = $val ;
+        }
+
+        return $arrList;
+    }
+
+    /**
+     * 文字コード情報を取得する
+     *
+     * @return array 文字コード情報
+     */
+    function getCharSet()
+    {
+        // 未実装
+        return array();
+    }
+
+    /**
+     * 擬似表を表すSQL文(FROM 句)を取得する
+     *
+     * @return string
+     */
+    function getDummyFromClauseSql()
+    {
+        return '';
+    }
+
+    /**
+     * ILIKE句 を LIKE句へ変換する.
+     *
+     * @access private
+     * @param string $sql SQL文
+     * @return string 変換後の SQL 文
+     */
+    function sfChangeILIKE($sql)
+    {
+        $changesql = preg_replace('/(^|[^\w])ILIKE([^\w]|$)/i', '$1LIKE$2', $sql);
+        return $changesql;
+    }
+
+    /**
+     * SQL 文に OFFSET, LIMIT を付加する。
+     *
+     * @param string 元の SQL 文
+     * @param integer LIMIT
+     * @param integer OFFSET
+     * @return string 付加後の SQL 文
+     */
+    function addLimitOffset($sql, $limit = 0, $offset = 0)
+    {
+        if (strlen($offset) === 0) {
+            $offset = 0;
+        }
+        $sql .= " OFFSET $offset ROWS";
+        if ($limit != 0) {
+            $sql .= " FETCH NEXT $limit ROWS ONLY";
+        }
+
+        return $sql;
+    }
+}
diff -urNb ec-cube-iis/data/class/helper/SC_Helper_Mail.php ec-cube/data/class/helper/SC_Helper_Mail.php
--- ec-cube-iis/data/class/helper/SC_Helper_Mail.php	2014-08-20 17:46:25.000000000 +0900
+++ ec-cube/data/class/helper/SC_Helper_Mail.php	2014-08-20 17:49:19.000000000 +0900
@@ -217,8 +217,8 @@
         foreach ($arrRet as $key => $value) {
             $col = 's_i.*, tax_rate, tax_rule';
             $from = 'dtb_shipment_item AS s_i JOIN dtb_order_detail AS o_d
-                USING(order_id, product_class_id)';
-            $where = 'order_id = ? AND shipping_id = ?';
+                ON s_i.order_id = o_d.order_id AND s_i.product_class_id = o_d.product_class_id';
+            $where = 'o_d.order_id = ? AND shipping_id = ?';
             $arrWhereVal = array($order_id, $arrRet[$key]['shipping_id']);
             $arrItems = $objQuery->select($col, $from, $where, $arrWhereVal);
             $arrRet[$key]['shipment_item'] = $arrItems;
diff -urNb ec-cube-iis/data/class/helper/SC_Helper_Purchase.php ec-cube/data/class/helper/SC_Helper_Purchase.php
--- ec-cube-iis/data/class/helper/SC_Helper_Purchase.php	2014-08-20 17:46:25.000000000 +0900
+++ ec-cube/data/class/helper/SC_Helper_Purchase.php	2014-08-20 17:49:19.000000000 +0900
@@ -1038,8 +1038,8 @@
         $objProduct = new SC_Product_Ex();
         $arrResults = array();
         $objQuery->setOrder('order_detail_id');
-        $arrItems = $objQuery->select('dtb_shipment_item.*', 'dtb_shipment_item join dtb_order_detail USING (product_class_id, order_id)',
-                                      'order_id = ? AND shipping_id = ?',
+        $arrItems = $objQuery->select('dtb_shipment_item.*', 'dtb_shipment_item join dtb_order_detail ON dtb_shipment_item.product_class_id = dtb_order_detail.product_class_id AND dtb_shipment_item.order_id = dtb_order_detail.order_id',
+                                      'dtb_order_detail.order_id = ? AND shipping_id = ?',
                                       array($order_id, $shipping_id));
 
         foreach ($arrItems as $key => $arrItem) {
diff -urNb ec-cube-iis/data/class/pages/admin/basis/LC_Page_Admin_Basis_ZipInstall.php ec-cube/data/class/pages/admin/basis/LC_Page_Admin_Basis_ZipInstall.php
--- ec-cube-iis/data/class/pages/admin/basis/LC_Page_Admin_Basis_ZipInstall.php	2014-08-20 17:46:25.000000000 +0900
+++ ec-cube/data/class/pages/admin/basis/LC_Page_Admin_Basis_ZipInstall.php	2014-08-20 17:49:19.000000000 +0900
@@ -161,7 +161,10 @@
         $objQuery =& SC_Query_Ex::getSingletonInstance();
 
         // DB更新
+        $objQuery->begin();
+        $this->lfDeleteZip();
         $this->insertMtbZip();
+        $objQuery->commit();
     }
 
     /**
@@ -229,43 +232,34 @@
         $cntInsert = 0;
         $img_cnt = 0;
 
-        /* 標準実装が非常に遅いので Azure/WebMatrix 向けにチューニング */
-        $begin = microtime(true);
-
-        try {
-            $dbh = new PDO('mysql:host=' . DB_SERVER . ';dbname=' . DB_NAME . ';port=' . DB_PORT . ';charset=utf8', DB_USER, DB_PASSWORD);
-            $dbh->beginTransaction();
-            $dbh->exec('DELETE FROM mtb_zip');
-
-            $sql = 'INSERT INTO mtb_zip (zip_id, zipcode, state, city, town) VALUES (?, ?, ?, ?, ?)';
-            $stmt = $dbh->prepare($sql);
-            $line = file(ZIP_CSV_UTF8_REALFILE);
-            for($i = 0; $line[$i] != ''; $i ++){
-                if (!($array = explode(",", $line[$i]))) {
-                    continue;
-                }
-                $stmt->bindParam(1, ++$cntCurrentLine, PDO::PARAM_INT);
-                $stmt->bindParam(2, trim($array[2], '"'), PDO::PARAM_STR, strlen($array[2]));
-                $stmt->bindParam(3, trim($array[6], '"'), PDO::PARAM_STR, strlen($array[6]));
-                $stmt->bindParam(4, trim($array[7], '"'), PDO::PARAM_STR, strlen($array[7]));
-                $stmt->bindParam(5, trim($array[8], '"'), PDO::PARAM_STR, strlen($array[8]));
-                $stmt->execute();
+        $fp = $this->openZipCsv();
+        while (!feof($fp)) {
+            $arrCSV = fgetcsv($fp, ZIP_CSV_LINE_MAX);
+            if (empty($arrCSV)) continue;
+            $cntCurrentLine++;
+            if ($cntCurrentLine >= $start) {
+                $sqlval = array();
+                $sqlval['zip_id'] = $cntCurrentLine;
+                $sqlval['zipcode'] = $arrCSV[2];
+                $sqlval['state'] = $arrCSV[6];
+                $sqlval['city'] = $arrCSV[7];
+                $sqlval['town'] = $arrCSV[8];
+                $objQuery->insert('mtb_zip', $sqlval);
                 $cntInsert++;
+            }
 
                 // $disp_line件ごとに進捗表示する
-                if ($i % $disp_line == 0 && $img_cnt < IMAGE_MAX) {
+            if ($cntCurrentLine % $disp_line == 0 && $img_cnt < IMAGE_MAX) {
                     echo '<img src="' . $img_path . 'graph_1_w.gif">';
                     SC_Utils_Ex::sfFlush();
                     $img_cnt++;
                 }
                 SC_Utils_Ex::extendTimeOut();
             }
-            $end = microtime(true);
+        fclose($fp);
 
             echo '<img src="' . $img_path . 'space_w.gif">';
-        } catch (PDOException $e) {
-            trigger_error($e->getMessage(), E_USER_ERROR);
-        }
+
         ?>
         </div>
         <script type='text/javascript' language='javascript'>
@@ -276,7 +270,7 @@
                     document.open('text/html','replace');
                     document.clear();
                     document.write('<p>完了しました。<br />');
-                    document.write("<?php echo $cntInsert ?> 件を追加しました。<?php echo ($end-$begin); ?> 秒かかりました</p>");
+                    document.write("<?php echo $cntInsert ?> 件を追加しました。</p>");
                     document.write("<p><a href='?' target='_top'>戻る</a></p>");
                     document.close();
                 }
@@ -287,7 +281,6 @@
         </body>
         </html>
         <?php
-        $dbh->commit();
     }
 
     public function openZipCsv()
diff -urNb ec-cube-iis/data/class_extends/SC_CustomerList_Ex.php ec-cube/data/class_extends/SC_CustomerList_Ex.php
--- ec-cube-iis/data/class_extends/SC_CustomerList_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/SC_CustomerList_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -25,4 +25,301 @@
 
 class SC_CustomerList_Ex extends SC_CustomerList
 {
+    public function __construct($array, $mode = '')
+    {
+        if (is_array($array)) {
+            $this->arrSql = $array;
+        }
+
+        $objDb = new SC_Helper_DB_Ex();
+        $dbFactory = SC_DB_DBFactory_Ex::getInstance();
+
+        if ($mode == '') {
+            // 会員本登録会員で削除していない会員
+            $this->setWhere('status = 2 AND del_flg = 0 ');
+            // 登録日を示すカラム
+            $regdate_col = 'dtb_customer.update_date';
+        }
+
+        if ($mode == 'customer') {
+            $this->setWhere(' del_flg = 0 ');
+            // 登録日を示すカラム
+            $regdate_col = 'dtb_customer.update_date';
+        }
+
+        // 会員ID
+        if (!isset($this->arrSql['search_customer_id'])) $this->arrSql['search_customer_id'] = '';
+        if (strlen($this->arrSql['search_customer_id']) > 0) {
+            $this->setWhere('customer_id =  ?');
+            $this->arrVal[] = $this->arrSql['search_customer_id'];
+        }
+
+        // 名前
+        if (!isset($this->arrSql['search_name'])) $this->arrSql['search_name'] = '';
+        if (strlen($this->arrSql['search_name']) > 0) {
+            $this->setWhere('(' . $dbFactory->concatColumn(array('name01', 'name02')) . ' LIKE ?)');
+            $searchName = $this->addSearchStr($this->arrSql['search_name']);
+            $this->arrVal[] = preg_replace('/[ 　]+/u','',$searchName);
+        }
+
+        // 名前(フリガナ)
+        if (!isset($this->arrSql['search_kana'])) $this->arrSql['search_kana'] = '';
+        if (strlen($this->arrSql['search_kana']) > 0) {
+            $this->setWhere('(' . $dbFactory->concatColumn(array('kana01', 'kana02')) . ' LIKE ?)');
+            $searchKana = $this->addSearchStr($this->arrSql['search_kana']);
+            $this->arrVal[] = preg_replace('/[ 　]+/u','',$searchKana);
+        }
+
+        // 都道府県
+        if (!isset($this->arrSql['search_pref'])) $this->arrSql['search_pref'] = '';
+        if (strlen($this->arrSql['search_pref']) > 0) {
+            $this->setWhere('pref = ?');
+            $this->arrVal[] = $this->arrSql['search_pref'];
+        }
+
+        // 電話番号
+        if (!isset($this->arrSql['search_tel'])) $this->arrSql['search_tel'] = '';
+        if (is_numeric($this->arrSql['search_tel'])) {
+            $this->setWhere('(' . $dbFactory->concatColumn(array('tel01', 'tel02', 'tel03')) . ' LIKE ?)');
+            $searchTel = $this->addSearchStr($this->arrSql['search_tel']);
+            $this->arrVal[] = str_replace('-', '', $searchTel);
+        }
+
+        // 性別
+        if (!isset($this->arrSql['search_sex'])) $this->arrSql['search_sex'] = '';
+        if (is_array($this->arrSql['search_sex'])) {
+            $arrSexVal = $this->setItemTerm($this->arrSql['search_sex'] ,'sex');
+            foreach ($arrSexVal as $data) {
+                $this->arrVal[] = $data;
+            }
+        }
+
+        // 職業
+        if (!isset($this->arrSql['search_job'])) $this->arrSql['search_job'] = '';
+        if (is_array($this->arrSql['search_job'])) {
+            if (in_array('不明', $this->arrSql['search_job'])) {
+                $arrJobVal = $this->setItemTermWithNull($this->arrSql['search_job'] ,'job');
+            } else {
+                $arrJobVal = $this->setItemTerm($this->arrSql['search_job'] ,'job');
+            }
+            if (is_array($arrJobVal)) {
+                foreach ($arrJobVal as $data) {
+                    $this->arrVal[] = $data;
+                }
+            }
+        }
+
+        // E-MAIL
+        if (!isset($this->arrSql['search_email'])) $this->arrSql['search_email'] = '';
+        if (strlen($this->arrSql['search_email']) > 0) {
+            //カンマ区切りで複数の条件指定可能に
+            $this->arrSql['search_email'] = explode(',', $this->arrSql['search_email']);
+            $sql_where = '';
+            foreach ($this->arrSql['search_email'] as $val) {
+                $val = trim($val);
+                //検索条件を含まない
+                if ($this->arrSql['not_emailinc'] == '1') {
+                    if ($sql_where == '') {
+                        $sql_where .= 'dtb_customer.email NOT ILIKE ? ';
+                    } else {
+                        $sql_where .= 'AND dtb_customer.email NOT ILIKE ? ';
+                    }
+                } else {
+                    if ($sql_where == '') {
+                        $sql_where .= 'dtb_customer.email ILIKE ? ';
+                    } else {
+                        $sql_where .= 'OR dtb_customer.email ILIKE ? ';
+                    }
+                }
+                $searchEmail = $this->addSearchStr($val);
+                $this->arrVal[] = $searchEmail;
+            }
+            $this->setWhere($sql_where);
+        }
+
+        // E-MAIL(mobile)
+        if (!isset($this->arrSql['search_email_mobile'])) $this->arrSql['search_email_mobile'] = '';
+
+        if (strlen($this->arrSql['search_email_mobile']) > 0) {
+            //カンマ区切りで複数の条件指定可能に
+            $this->arrSql['search_email_mobile'] = explode(',', $this->arrSql['search_email_mobile']);
+            $sql_where = '';
+            foreach ($this->arrSql['search_email_mobile'] as $val) {
+                $val = trim($val);
+                //検索条件を含まない
+                if ($this->arrSql['not_email_mobileinc'] == '1') {
+                    if ($sql_where == '') {
+                        $sql_where .= 'dtb_customer.email_mobile NOT ILIKE ? ';
+                    } else {
+                        $sql_where .= 'AND dtb_customer.email_mobile NOT ILIKE ? ';
+                    }
+                } else {
+                    if ($sql_where == '') {
+                        $sql_where .= 'dtb_customer.email_mobile ILIKE ? ';
+                    } else {
+                        $sql_where .= 'OR dtb_customer.email_mobile ILIKE ? ';
+                    }
+                }
+                $searchemail_mobile = $this->addSearchStr($val);
+                $this->arrVal[] = $searchemail_mobile;
+            }
+            $this->setWhere($sql_where);
+        }
+
+        // メールマガジンの場合
+        if ($mode == 'customer') {
+            // メルマガ受け取りの選択項目がフォームに存在する場合
+            if (isset($this->arrSql['search_htmlmail'])) {
+                $this->setWhere('status = 2');
+                if (SC_Utils_Ex::sfIsInt($this->arrSql['search_htmlmail'])) {
+                    $this->setWhere('mailmaga_flg = ?');
+                    $this->arrVal[] = $this->arrSql['search_htmlmail'];
+                } else {
+                    //　メルマガ購読拒否は省く
+                    $this->setWhere('mailmaga_flg <> 3');
+                }
+            }
+        }
+
+        // 配信メールアドレス種別
+        if ($mode == 'customer') {
+            if (isset($this->arrSql['search_mail_type'])) {
+                $sqlEmailMobileIsEmpty = "(dtb_customer.email_mobile IS NULL OR dtb_customer.email_mobile = '')";
+                switch ($this->arrSql['search_mail_type']) {
+                    // PCメールアドレス
+                    case 1:
+                        $this->setWhere("(dtb_customer.email <> dtb_customer.email_mobile OR $sqlEmailMobileIsEmpty)");
+                        break;
+                    // 携帯メールアドレス
+                    case 2:
+                        $this->setWhere("NOT $sqlEmailMobileIsEmpty");
+                        break;
+                    // PCメールアドレス (携帯メールアドレスを登録している会員は除外)
+                    case 3:
+                        $this->setWhere($sqlEmailMobileIsEmpty);
+                        break;
+                    // 携帯メールアドレス (PCメールアドレスを登録している会員は除外)
+                    case 4:
+                        $this->setWhere('dtb_customer.email = dtb_customer.email_mobile');
+                        break;
+                }
+            }
+        }
+
+        // 購入金額指定
+        if (!isset($this->arrSql['search_buy_total_from'])) $this->arrSql['search_buy_total_from'] = '';
+        if (!isset($this->arrSql['search_buy_total_to'])) $this->arrSql['search_buy_total_to'] = '';
+        if (is_numeric($this->arrSql['search_buy_total_from']) || is_numeric($this->arrSql['search_buy_total_to'])) {
+            $arrBuyTotal = $this->selectRange($this->arrSql['search_buy_total_from'], $this->arrSql['search_buy_total_to'], 'buy_total');
+            foreach ($arrBuyTotal as $data) {
+                $this->arrVal[] = $data;
+            }
+        }
+
+        // 購入回数指定
+        if (!isset($this->arrSql['search_buy_times_from'])) $this->arrSql['search_buy_times_from'] = '';
+        if (!isset($this->arrSql['search_buy_times_to'])) $this->arrSql['search_buy_times_to'] = '';
+        if (is_numeric($this->arrSql['search_buy_times_from']) || is_numeric($this->arrSql['search_buy_times_to'])) {
+            $arrBuyTimes = $this->selectRange($this->arrSql['search_buy_times_from'], $this->arrSql['search_buy_times_to'], 'buy_times');
+            foreach ($arrBuyTimes as $data) {
+                $this->arrVal[] = $data;
+            }
+        }
+
+        // 誕生日期間指定
+        if (!isset($this->arrSql['search_b_start_year'])) $this->arrSql['search_b_start_year'] = '';
+        if (!isset($this->arrSql['search_b_start_month'])) $this->arrSql['search_b_start_month'] = '';
+        if (!isset($this->arrSql['search_b_start_day'])) $this->arrSql['search_b_start_day'] = '';
+        if (!isset($this->arrSql['search_b_end_year'])) $this->arrSql['search_b_end_year'] = '';
+        if (!isset($this->arrSql['search_b_end_month'])) $this->arrSql['search_b_end_month'] = '';
+        if (!isset($this->arrSql['search_b_end_day'])) $this->arrSql['search_b_end_day'] = '';
+        if ((strlen($this->arrSql['search_b_start_year']) > 0 && strlen($this->arrSql['search_b_start_month']) > 0 && strlen($this->arrSql['search_b_start_day']) > 0)
+            || strlen($this->arrSql['search_b_end_year']) > 0 && strlen($this->arrSql['search_b_end_month']) > 0 && strlen($this->arrSql['search_b_end_day']) > 0) {
+            $arrBirth = $this->selectTermRange($this->arrSql['search_b_start_year'], $this->arrSql['search_b_start_month'], $this->arrSql['search_b_start_day'],
+                                               $this->arrSql['search_b_end_year'], $this->arrSql['search_b_end_month'], $this->arrSql['search_b_end_day'], 'birth');
+            foreach ($arrBirth as $data) {
+                $this->arrVal[] = $data;
+            }
+        }
+
+        // 誕生月の検索
+        if (!isset($this->arrSql['search_birth_month'])) $this->arrSql['search_birth_month'] = '';
+        if (is_numeric($this->arrSql['search_birth_month'])) {
+            $this->setWhere(' datepart(mm, birth) = ?');
+            $this->arrVal[] = $this->arrSql['search_birth_month'];
+        }
+
+        // 登録期間指定
+        if (!isset($this->arrSql['search_start_year'])) $this->arrSql['search_start_year'] = '';
+        if (!isset($this->arrSql['search_start_month'])) $this->arrSql['search_start_month'] = '';
+        if (!isset($this->arrSql['search_start_day'])) $this->arrSql['search_start_day'] = '';
+        if (!isset($this->arrSql['search_end_year'])) $this->arrSql['search_end_year'] = '';
+        if (!isset($this->arrSql['search_end_month'])) $this->arrSql['search_end_month'] = '';
+        if (!isset($this->arrSql['search_end_day'])) $this->arrSql['search_end_day'] = '';
+        if ( (strlen($this->arrSql['search_start_year']) > 0 && strlen($this->arrSql['search_start_month']) > 0 && strlen($this->arrSql['search_start_day']) > 0) ||
+                (strlen($this->arrSql['search_end_year']) > 0 && strlen($this->arrSql['search_end_month']) >0 && strlen($this->arrSql['search_end_day']) > 0)) {
+            $arrRegistTime = $this->selectTermRange($this->arrSql['search_start_year'], $this->arrSql['search_start_month'], $this->arrSql['search_start_day']
+                            , $this->arrSql['search_end_year'], $this->arrSql['search_end_month'], $this->arrSql['search_end_day'], $regdate_col);
+            foreach ($arrRegistTime as $data) {
+                $this->arrVal[] = $data;
+            }
+        }
+
+        // 最終購入日指定
+        if (!isset($this->arrSql['search_buy_start_year'])) $this->arrSql['search_buy_start_year'] = '';
+        if (!isset($this->arrSql['search_buy_start_month'])) $this->arrSql['search_buy_start_month'] = '';
+        if (!isset($this->arrSql['search_buy_start_day'])) $this->arrSql['search_buy_start_day'] = '';
+        if (!isset($this->arrSql['search_buy_end_year'])) $this->arrSql['search_buy_end_year'] = '';
+        if (!isset($this->arrSql['search_buy_end_month'])) $this->arrSql['search_buy_end_month'] = '';
+        if (!isset($this->arrSql['search_buy_end_day'])) $this->arrSql['search_buy_end_day'] = '';
+
+        if ( (strlen($this->arrSql['search_buy_start_year']) > 0 && strlen($this->arrSql['search_buy_start_month']) > 0 && strlen($this->arrSql['search_buy_start_day']) > 0) ||
+                (strlen($this->arrSql['search_buy_end_year']) > 0 && strlen($this->arrSql['search_buy_end_month']) >0 && strlen($this->arrSql['search_buy_end_day']) > 0)) {
+            $arrRegistTime = $this->selectTermRange($this->arrSql['search_buy_start_year'], $this->arrSql['search_buy_start_month'], $this->arrSql['search_buy_start_day']
+                            , $this->arrSql['search_buy_end_year'], $this->arrSql['search_buy_end_month'], $this->arrSql['search_buy_end_day'], 'last_buy_date');
+            foreach ($arrRegistTime as $data) {
+                $this->arrVal[] = $data;
+            }
+        }
+
+        // 購入商品コード
+        if (!isset($this->arrSql['search_buy_product_code'])) $this->arrSql['search_buy_product_code'] = '';
+        if (strlen($this->arrSql['search_buy_product_code']) > 0) {
+            $this->setWhere('customer_id IN (SELECT customer_id FROM dtb_order WHERE order_id IN (SELECT order_id FROM dtb_order_detail WHERE product_code LIKE ?) AND del_flg = 0)');
+            $search_buyproduct_code = $this->addSearchStr($this->arrSql['search_buy_product_code']);
+            $this->arrVal[] = $search_buyproduct_code;
+        }
+
+        // 購入商品名称
+        if (!isset($this->arrSql['search_buy_product_name'])) $this->arrSql['search_buy_product_name'] = '';
+        if (strlen($this->arrSql['search_buy_product_name']) > 0) {
+            $this->setWhere('customer_id IN (SELECT customer_id FROM dtb_order WHERE order_id IN (SELECT order_id FROM dtb_order_detail WHERE product_name LIKE ?) AND del_flg = 0)');
+            $search_buyproduct_name = $this->addSearchStr($this->arrSql['search_buy_product_name']);
+            $this->arrVal[] = $search_buyproduct_name;
+        }
+
+        // カテゴリを選択している場合のみ絞込検索を行う
+        if (!isset($this->arrSql['search_category_id'])) $this->arrSql['search_category_id'] = '';
+        if (strlen($this->arrSql['search_category_id']) > 0) {
+            // カテゴリで絞込検索を行うSQL文生成
+            list($tmp_where, $tmp_arrval) = $objDb->sfGetCatWhere($this->arrSql['search_category_id']);
+
+            // カテゴリで絞込みが可能の場合
+            if ($tmp_where != '') {
+                $this->setWhere(' customer_id IN (SELECT distinct customer_id FROM dtb_order WHERE order_id IN (SELECT distinct order_id FROM dtb_order_detail WHERE product_id IN (SELECT product_id FROM dtb_product_categories WHERE '.$tmp_where.') AND del_flg = 0)) ');
+                $this->arrVal = array_merge((array) $this->arrVal, (array) $tmp_arrval);
+            }
+        }
+
+        // 会員状態
+        if (!isset($this->arrSql['search_status'])) $this->arrSql['search_status'] = '';
+        if (is_array($this->arrSql['search_status'])) {
+            $arrStatusVal = $this->setItemTerm($this->arrSql['search_status'] ,'status');
+            foreach ($arrStatusVal as $data) {
+                $this->arrVal[] = $data;
+            }
+        }
+
+        $this->setOrder('customer_id DESC');
+	}
 }
diff -urNb ec-cube-iis/data/class_extends/SC_Customer_Ex.php ec-cube/data/class_extends/SC_Customer_Ex.php
--- ec-cube-iis/data/class_extends/SC_Customer_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/SC_Customer_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -25,4 +25,54 @@
 
 class SC_Customer_Ex extends SC_Customer
 {
+
+    /**
+     * 会員の登録住所を取得する.
+     *
+     * 配列の1番目に会員登録住所, 追加登録住所が存在する場合は2番目以降に
+     * 設定される.
+     *
+     * @param integer $customer_id 会員ID
+     * @return array 会員登録住所, 追加登録住所の配列
+     */
+    function getCustomerAddress($customer_id)
+    {
+        if (DB_TYPE != 'sqlsrv') {
+            return parent::getCustomerAddress($customer_id);
+        } else {
+            $objQuery =& SC_Query_Ex::getSingletonInstance();
+
+            $from = <<< __EOS__
+            (
+                SELECT NULL AS other_deliv_id,
+                    customer_id,
+                    name01, name02,
+                    kana01, kana02,
+                    zip01, zip02,
+                    pref,
+                    addr01, addr02,
+                    email, email_mobile,
+                    tel01, tel02, tel03,
+                    fax01, fax02, fax03
+                FROM dtb_customer
+                WHERE customer_id = ?
+                UNION ALL
+                SELECT other_deliv_id,
+                    customer_id,
+                    name01, name02,
+                    kana01, kana02,
+                    zip01, zip02,
+                    pref,
+                    addr01, addr02,
+                    NULL AS email, NULL AS email_mobile,
+                    tel01, tel02, tel03,
+                    NULL AS fax01, NULL AS fax02, NULL AS fax03
+                FROM dtb_other_deliv
+                WHERE customer_id = ?
+            ) AS addrs
+__EOS__;
+            $objQuery->setOrder("CASE WHEN other_deliv_id is null THEN -1 ELSE 0 END, other_deliv_id DESC");
+            return $objQuery->select('*', $from, '', array($customer_id, $customer_id));
+        }
+    }
 }
diff -urNb ec-cube-iis/data/class_extends/SC_Product_Ex.php ec-cube/data/class_extends/SC_Product_Ex.php
--- ec-cube-iis/data/class_extends/SC_Product_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/SC_Product_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -25,4 +25,32 @@
 
 class SC_Product_Ex extends SC_Product
 {
+    // 2.13.2 向けにコミットの予定
+    /**
+     * SC_Queryインスタンスに設定された検索条件を元に並び替え済みの検索結果商品IDの配列を取得する。
+     *
+     * 検索条件は, SC_Query::setWhere() 関数で設定しておく必要があります.
+     *
+     * @param  SC_Query $objQuery SC_Query インスタンス
+     * @param  array    $arrVal   検索パラメーターの配列
+     * @return array    商品IDの配列
+     */
+    public function findProductIdsOrder(&$objQuery, $arrVal = array())
+    {
+        $table = 'dtb_products AS alldtl';
+
+        if (is_array($this->arrOrderData) and $objQuery->order == '') {
+            $o_col = $this->arrOrderData['col'];
+            $o_table = $this->arrOrderData['table'];
+            $o_order = $this->arrOrderData['order'];
+            $objQuery->setOrder("T2.$o_col $o_order");
+            $objQuery->setLimit(1);
+            $sub_sql = $objQuery->getSqlWithLimit($o_col, "$o_table AS T2", 'T2.product_id = alldtl.product_id');
+
+            $objQuery->setOrder("($sub_sql) $o_order, product_id");
+        }
+        $arrReturn = $objQuery->getCol('alldtl.product_id', $table, '', $arrVal);
+
+        return $arrReturn;
+    }
 }
diff -urNb ec-cube-iis/data/class_extends/SC_Query_Ex.php ec-cube/data/class_extends/SC_Query_Ex.php
--- ec-cube-iis/data/class_extends/SC_Query_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/SC_Query_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -25,4 +25,44 @@
 
 class SC_Query_Ex extends SC_Query
 {
+
+    /**
+     * 次のシーケンス値を取得する.
+     *
+     * @param string $seq_name 取得するシーケンス名
+     * @param integer 次のシーケンス値
+     */
+    function nextVal($seq_name)
+    {
+        $dsn = array('phptype'  => DB_TYPE,
+                     'username' => DB_USER,
+                     'password' => DB_PASSWORD,
+                     'protocol' => 'tcp',
+                     'hostspec' => DB_SERVER,
+                     'port'     => DB_PORT,
+                     'database' => DB_NAME
+                     );
+        // SQL Azure では必ず新しいセッションを使用する
+        $_conn = MDB2::connect($dsn, $options);
+        return $_conn->nextID($seq_name, false);
+    }
+
+    // 2.13.2 向けにコミットの予定
+    /**
+     * 構築した SELECT 文を LIMIT OFFSET も含め取得する.
+     *
+     * @param  string SELECT 文に含めるカラム名
+     * @param  string SELECT 文に含めるテーブル名
+     * @param  string SELECT 文に含める WHERE 句
+     * @return string 構築済みの SELECT 文
+     */
+    function getSqlWithLimit($cols, $from = '', $where = '')
+    {
+        $sql = $this->getSql($cols, $from, $where);
+        $offset = $this->conn->offset;
+        $limit = $this->conn->limit;
+        $this->setLimitOffset(0, 0);
+
+        return $this->dbFactory->addLimitOffset($sql, $limit, $offset);
+    }
 }
diff -urNb ec-cube-iis/data/class_extends/SC_SelectSql_Ex.php ec-cube/data/class_extends/SC_SelectSql_Ex.php
--- ec-cube-iis/data/class_extends/SC_SelectSql_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/SC_SelectSql_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -25,4 +25,43 @@
 
 class SC_SelectSql_Ex extends SC_SelectSql
 {
+	//--　期間検索（○年○月○日か~○年○月○日まで）
+    public function selectTermRange($from_year, $from_month, $from_day, $to_year, $to_month, $to_day, $column)
+    {
+        $return = array();
+
+        // 開始期間の構築
+        $date1 = $from_year . '/' . $from_month . '/' . $from_day;
+
+        // 終了期間の構築
+        // @see http://svn.ec-cube.net/open_trac/ticket/328
+        // FIXME とりあえずintvalで対策...
+        $date2 = mktime (0, 0, 0, intval($to_month), intval($to_day), intval($to_year));
+        $date2 = $date2 + 86400;
+        // SQL文のdate関数に与えるフォーマットは、yyyy/mm/ddで指定する。
+        $date2 = date('Y/m/d', $date2);
+
+        // 開始期間だけ指定の場合
+        if (($from_year != '') && ($from_month != '') && ($from_day != '') && ($to_year == '') && ($to_month == '') && ($to_day == '')) {
+            $this->setWhere($column .' >= ?');
+            $return[] = $date1;
+        }
+
+        //　開始～終了
+        if (($from_year != '') && ($from_month != '') && ($from_day != '')
+            && ($to_year != '') && ($to_month != '') && ($to_day != '')
+        ) {
+            $this->setWhere($column . ' >= ? AND ' . $column . ' < ?');
+            $return[] = $date1;
+            $return[] = $date2;
+        }
+
+        // 終了期間だけ指定の場合
+        if (($from_year == '') && ($from_month == '') && ($from_day == '') && ($to_year != '') && ($to_month != '') && ($to_day != '')) {
+            $this->setWhere($column . ' < ?');
+            $return[] = $date2;
+        }
+
+        return $return;
+    }
 }
diff -urNb ec-cube-iis/data/class_extends/db_extends/SC_DB_DBFactory_Ex.php ec-cube/data/class_extends/db_extends/SC_DB_DBFactory_Ex.php
--- ec-cube-iis/data/class_extends/db_extends/SC_DB_DBFactory_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/db_extends/SC_DB_DBFactory_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -49,6 +49,9 @@
             case 'pgsql':
                 return new SC_DB_DBFactory_PGSQL_Ex();
 
+            case 'sqlsrv':
+                return new SC_DB_DBFactory_SQLSRV_Ex();
+
             default:
                 return new SC_DB_DBFactory_Ex();
         }
diff -urNb ec-cube-iis/data/class_extends/db_extends/dbfactory/SC_DB_DBFactory_SQLSRV_Ex.php ec-cube/data/class_extends/db_extends/dbfactory/SC_DB_DBFactory_SQLSRV_Ex.php
--- ec-cube-iis/data/class_extends/db_extends/dbfactory/SC_DB_DBFactory_SQLSRV_Ex.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/class_extends/db_extends/dbfactory/SC_DB_DBFactory_SQLSRV_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -0,0 +1,38 @@
+<?php
+/*
+ * This file is part of EC-CUBE
+ *
+ * Copyright(c) 2000-2011 LOCKON CO.,LTD. All Rights Reserved.
+ *
+ * http://www.lockon.co.jp/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ */
+
+// {{{ requires
+require_once CLASS_REALDIR . 'db/dbfactory/SC_DB_DBFactory_SQLSRV.php';
+
+/**
+ * PostgreSQL 固有の処理をするクラス(拡張).
+ *
+ * SC_DB_DBFactory_PGSQL をカスタマイズする場合は, このクラスを使用する.
+ *
+ * @package DB
+ * @author LOCKON CO.,LTD.
+ * @version $Id$
+ */
+class SC_DB_DBFactory_SQLSRV_Ex extends SC_DB_DBFactory_SQLSRV {
+}
+?>
diff -urNb ec-cube-iis/data/class_extends/helper_extends/SC_Helper_News_Ex.php ec-cube/data/class_extends/helper_extends/SC_Helper_News_Ex.php
--- ec-cube-iis/data/class_extends/helper_extends/SC_Helper_News_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/helper_extends/SC_Helper_News_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -34,5 +34,53 @@
  */
 class SC_Helper_News_Ex extends SC_Helper_News
 {
-    //put your code here
+     /**
+     * ニュースの情報を取得.
+     *
+     * @param  integer $news_id     ニュースID
+     * @param  boolean $has_deleted 削除されたニュースも含む場合 true; 初期値 false
+     * @return array
+     */
+    public static function getNews($news_id, $has_deleted = false)
+    {
+        $objQuery =& SC_Query_Ex::getSingletonInstance();
+        $col = '*, format(news_date, \'yyyy-MM-dd\') as cast_news_date';
+        $where = 'news_id = ?';
+        if (!$has_deleted) {
+            $where .= ' AND del_flg = 0';
+        }
+        $arrRet = $objQuery->select($col, 'dtb_news', $where, array($news_id));
+
+        return $arrRet[0];
+    }
+
+    /**
+     * ニュース一覧の取得.
+     *
+     * @param  integer $dispNumber  表示件数
+     * @param  integer $pageNumber  ページ番号
+     * @param  boolean $has_deleted 削除されたニュースも含む場合 true; 初期値 false
+     * @return array
+     */
+    public function getList($dispNumber = 0, $pageNumber = 0, $has_deleted = false)
+    {
+        $objQuery =& SC_Query_Ex::getSingletonInstance();
+        $col = '*, format(news_date, \'yyyy-MM-dd\') as cast_news_date';
+        $where = '';
+        if (!$has_deleted) {
+            $where .= 'del_flg = 0';
+        }
+        $table = 'dtb_news';
+        $objQuery->setOrder('rank DESC');
+        if ($dispNumber > 0) {
+            if ($pageNumber > 0) {
+                $objQuery->setLimitOffset($dispNumber, (($pageNumber - 1) * $dispNumber));
+            } else {
+                $objQuery->setLimit($dispNumber);
+            }
+        }
+        $arrRet = $objQuery->select($col, $table, $where);
+
+        return $arrRet;
+    }
 }
diff -urNb ec-cube-iis/data/class_extends/page_extends/admin/total/LC_Page_Admin_Total_Ex.php ec-cube/data/class_extends/page_extends/admin/total/LC_Page_Admin_Total_Ex.php
--- ec-cube-iis/data/class_extends/page_extends/admin/total/LC_Page_Admin_Total_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/page_extends/admin/total/LC_Page_Admin_Total_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -53,4 +53,276 @@
     {
         parent::process();
     }
+
+    /**
+     * デストラクタ.
+     *
+     * @return void
+     */
+    function destroy()
+    {
+        parent::destroy();
+    }
+
+    // 会員、非会員集計のWHERE分の作成
+    public function lfGetWhereMember($col_date, $sdate, $edate, $type, $col_member = 'customer_id')
+    {
+        if (DB_TYPE != 'sqlsrv') {
+            return parent::lfGetWhereMember($col_date, $sdate, $edate, $type, $col_member);
+        } else {
+            $where = "";
+            // 取得日付の指定
+            if($sdate != "") {
+                if ($where != "") {
+                    $where.= " AND ";
+                }
+                $where.= " $col_date >= '". $sdate ."'";
+            }
+
+            if($edate != "") {
+                if ($where != "") {
+                    $where.= " AND ";
+                }
+                $edate = date("Y/m/d",strtotime("1 day" ,strtotime($edate)));
+                $where.= " $col_date < '" . $edate ."'";
+            }
+
+            // 会員、非会員の判定
+            switch($type) {
+                // 全体
+            case 'all':
+                break;
+            case 'member':
+                if ($where != "") {
+                    $where.= " AND ";
+                }
+                $where.= " $col_member <> 0";
+                break;
+            case 'nonmember':
+                if ($where != "") {
+                    $where.= " AND ";
+                }
+                $where.= " $col_member = 0";
+                break;
+            default:
+                break;
+            }
+            return array($where, array());
+        }
+    }
+
+    /** 期間別集計 **/
+    // todo あいだの日付埋める
+    public function lfGetOrderTerm($type, $sdate, $edate)
+    {
+        if (DB_TYPE != 'sqlsrv') {
+            return parent::lfGetOrderTerm($type, $sdate, $edate);
+        } else {
+            $objQuery   = SC_Query_Ex::getSingletonInstance();
+
+            list($where, $arrval) = $this->lfGetWhereMember('create_date', $sdate, $edate);
+            $where .= " AND del_flg = 0 AND status <> " . ORDER_CANCEL;
+
+            switch($type){
+            case 'month':
+                $xtitle = "(月別)";
+                $ytitle = "(売上合計)";
+                $format = '%m';
+                break;
+            case 'year':
+                $xtitle = "(年別)";
+                $ytitle = "(売上合計)";
+                $format = '%Y';
+                break;
+            case 'wday':
+                $xtitle = "(曜日別)";
+                $ytitle = "(売上合計)";
+                $format = '%a';
+                break;
+            case 'hour':
+                $xtitle = "(時間別)";
+                $ytitle = "(売上合計)";
+                $format = '%H';
+                break;
+            default:
+                $xtitle = "(日別)";
+                $ytitle = "(売上合計)";
+                $format = '%Y-%m-%d';
+
+                break;
+            }
+
+            // TODO リファクタリング
+            switch($type){
+            case 'month':
+                $format = 'datepart(mm, create_date)';
+                break;
+            case 'year':
+                $format = 'datepart(yyyy, create_date)';
+                break;
+            case 'wday':
+                $format = 'datename(weekday, create_date)';
+                break;
+            case 'hour':
+                $format = 'datepart(hh, create_date)';
+                break;
+            default:
+                $format = 'convert(varchar(10), create_date, 111)';
+                break;
+            }
+            $dbFactory = SC_DB_DBFactory_Ex::getInstance();
+            // todo postgres
+            $col = $dbFactory->getOrderTotalDaysWhereSql($format);
+
+            $objQuery->setGroupBy($format);
+            $objQuery->setOrder($format);
+            // 検索結果の取得
+            $arrTotalResults = $objQuery->select($col, 'dtb_order', $where);
+
+            $arrTotalResults = $this->lfAddBlankLine($arrTotalResults, $type, $sdate, $edate);
+            // todo GDない場合の処理
+            $tpl_image       = $this->lfGetGraphLine($arrTotalResults, 'str_date', "term_" . $type, $xtitle, $ytitle, $sdate, $edate);
+            $arrTotalResults = $this->lfAddTotalLine($arrTotalResults);
+
+            return array($arrTotalResults, $tpl_image);
+        }
+    }
+
+    /** 年代別集計 **/
+    public function lfGetOrderAge($type, $sdate, $edate)
+    {
+        if (DB_TYPE != 'sqlsrv') {
+            return parent::lfGetOrderAge($type, $sdate, $edate);
+        }
+
+        $objQuery = SC_Query_Ex::getSingletonInstance();
+
+        list($where, $arrWhereVal) = $this->lfGetWhereMember('create_date', $sdate, $edate, $type);
+
+        $dbFactory = SC_DB_DBFactory_Ex::getInstance();
+        $col = "age" ;
+        $col .= ',COUNT(order_id) AS order_count';
+        $col .= ',SUM(total) AS total';
+        $col .= ',AVG(total) AS total_average';
+
+        $from   = "(" . $dbFactory->getOrderTotalAgeColSql() . ") as t1";
+
+        $where .= ' AND del_flg = 0 AND status <> ?';
+        $arrWhereVal[] = ORDER_CANCEL;
+
+        $objQuery->setGroupBy('age');
+        $objQuery->setOrder('age DESC');
+        $arrTotalResults = $objQuery->select($col, $from, $where, $arrWhereVal);
+
+        foreach ($arrTotalResults as $key => $value) {
+            $arrResult =& $arrTotalResults[$key];
+            $age_key = $arrResult['age'];
+            if ($age_key != '') {
+                $arrResult['age_name'] = $arrResult['age'] . '代';
+            } else {
+                $arrResult['age_name'] = '未回答';
+            }
+
+        }
+        $tpl_image = $this->lfGetGraphBar($arrTotalResults, 'age_name', 'age_' . $type, '(年齢)', '(売上合計)', $sdate, $edate);
+
+        return array($arrTotalResults, $tpl_image);
+    }
+
+    /** 会員別集計 **/
+    public function lfGetOrderMember($type, $sdate, $edate)
+    {
+        if (DB_TYPE != 'sqlsrv') {
+            return parent::lfGetOrderMember($type, $sdate, $edate);
+        }
+
+        $objQuery = SC_Query_Ex::getSingletonInstance();
+
+        list($where, $arrWhereVal) = $this->lfGetWhereMember('create_date', $sdate, $edate, $type);
+        $where .= ' AND del_flg = 0 AND status <> ?';
+        $arrWhereVal[] = ORDER_CANCEL;
+
+        // 会員集計の取得
+        $col = <<< __EOS__
+            COUNT(order_id) AS order_count,
+            SUM(total) AS total,
+            AVG(total) AS total_average,
+            member,
+            order_sex
+__EOS__;
+
+        $from       = '(
+    SELECT order_id,total,order_sex,create_date,del_flg,status,customer_id,
+    CASE
+        WHEN customer_id <> 0 THEN 1
+    ELSE 0
+    END AS member
+        FROM dtb_order
+    ) as t1';
+
+        $objQuery->setGroupBy('member, order_sex');
+
+        $arrTotalResults = $objQuery->select($col, $from, $where, $arrWhereVal);
+
+        foreach ($arrTotalResults as $key => $value) {
+            $arrResult =& $arrTotalResults[$key];
+            $member_key = $arrResult['order_sex'];
+            if ($member_key != '') {
+                $arrResult['member_name'] = (($arrResult['member']) ? '会員' : '非会員') . $this->arrSex[$member_key];
+            } else {
+                $arrResult['member_name'] = '未回答';
+            }
+        }
+
+        $tpl_image = $this->lfGetGraphPie($arrTotalResults, 'member_name', 'member', '(売上比率)', $sdate, $edate);
+
+        return array($arrTotalResults, $tpl_image);
+    }
+
+    /*
+     * 日付の配列を作成する
+     *
+     */
+    public function lfDateTimeArray($type, $st, $ed)
+    {
+        if (DB_TYPE != 'sqlsrv') {
+            return parent::lfDateTimeArray($type, $st, $ed);
+        } else {
+            switch($type){
+            case 'month':
+                $format        = 'm';
+                break;
+            case 'year':
+                $format        = 'Y';
+                break;
+            case 'wday':
+                $format        = 'l';
+                break;
+            case 'hour':
+                $format        = 'G';
+                break;
+            default:
+                $format        = 'Y/m/d';
+                break;
+            }
+
+            if ($type == 'hour') {
+                $arrDateList = array('0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23');
+
+            } else {
+                $arrDateList = array();
+                $tmp    = strtotime($st);
+                $nAday  = 60*60*24;
+                $edx    = strtotime($ed);
+                while( $tmp <= $edx ){
+                    $sDate = date($format, $tmp);
+                    if( !in_array($sDate, $arrDateList) ){
+                        $arrDateList[] = $sDate;
+                    }
+                    $tmp += $nAday;
+                }
+            }
+            return $arrDateList;
+        }
+    }
 }
diff -urNb ec-cube-iis/data/class_extends/page_extends/frontparts/bloc/LC_Page_FrontParts_Bloc_News_Ex.php ec-cube/data/class_extends/page_extends/frontparts/bloc/LC_Page_FrontParts_Bloc_News_Ex.php
--- ec-cube-iis/data/class_extends/page_extends/frontparts/bloc/LC_Page_FrontParts_Bloc_News_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/page_extends/frontparts/bloc/LC_Page_FrontParts_Bloc_News_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -53,4 +53,42 @@
     {
         parent::process();
     }
+
+    /**
+     * デストラクタ.
+     *
+     * @return void
+     */
+    function destroy()
+    {
+        parent::destroy();
+    }
+
+    /**
+     * 新着情報を取得する.
+     *
+     * @return array $arrNewsList 新着情報の配列を返す
+     */
+    function lfGetNews(&$objQuery)
+    {
+        if (DB_TYPE != 'sqlsrv') {
+            return parent::lfGetNews($objQuery);
+        } else {
+            $objQuery->setOrder('rank DESC ');
+            $arrNewsList = $objQuery->select("* ,convert(varchar(4), YEAR(news_date)) + '-' + convert(varchar(2), MONTH(news_date)) + '-' + convert(varchar(10), DAY(news_date)) as news_date_disp", 'dtb_news' ,'del_flg = 0');
+
+            // モバイルサイトのセッション保持 (#797)
+            if (SC_Display_Ex::detectDevice() == DEVICE_TYPE_MOBILE) {
+                foreach (array_keys($arrNewsList) as $key) {
+                    $arrRow =& $arrNewsList[$key];
+                    if (SC_Utils_Ex::isAppInnerUrl($arrRow['news_url'])) {
+                        $netUrl = new Net_URL($arrRow['news_url']);
+                        $netUrl->addQueryString(session_name(), session_id());
+                        $arrRow['news_url'] = $netUrl->getURL();
+                    }
+                }
+            }
+            return $arrNewsList;
+        }
+    }
 }
diff -urNb ec-cube-iis/data/class_extends/page_extends/mypage/LC_Page_Mypage_Favorite_Ex.php ec-cube/data/class_extends/page_extends/mypage/LC_Page_Mypage_Favorite_Ex.php
--- ec-cube-iis/data/class_extends/page_extends/mypage/LC_Page_Mypage_Favorite_Ex.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/class_extends/page_extends/mypage/LC_Page_Mypage_Favorite_Ex.php	2014-08-20 17:49:20.000000000 +0900
@@ -53,4 +53,65 @@
     {
         parent::process();
     }
+
+    /**
+     * お気に入りを取得する
+     *
+     * @param mixed $customer_id
+     * @param mixed $objPage
+     * @access private
+     * @return array お気に入り商品一覧
+     */
+    public function lfGetFavoriteProduct($customer_id, &$objPage)
+    {
+        if (DB_TYPE != 'sqlsrv') {
+            return parent::lfGetFavoriteProduct($customer_id, $objPage);
+        }
+
+        $objQuery       = SC_Query_Ex::getSingletonInstance();
+        $objProduct     = new SC_Product_Ex();
+
+        $objQuery->setOrder('f.create_date DESC');
+        $where = 'f.customer_id = ? and p.status = 1';
+        if (NOSTOCK_HIDDEN) {
+            $where .= ' AND EXISTS(SELECT * FROM dtb_products_class WHERE product_id = f.product_id AND del_flg = 0 AND (stock >= 1 OR stock_unlimited = 1))';
+        }
+        $arrProductId  = $objQuery->getCol('f.product_id', 'dtb_customer_favorite_products f inner join dtb_products p on f.product_id = p.product_id ', $where, array($customer_id));
+
+        $objQuery       =& SC_Query_Ex::getSingletonInstance();
+        $objQuery->setWhere($this->lfMakeWhere('alldtl.', $arrProductId));
+        $linemax        = $objProduct->findProductCount($objQuery);
+
+        $objPage->tpl_linemax = $linemax;   // 何件が該当しました。表示用
+
+        // ページ送りの取得
+        $objNavi        = new SC_PageNavi_Ex($objPage->tpl_pageno, $linemax, SEARCH_PMAX, 'eccube.movePage', NAVI_PMAX);
+        $this->tpl_strnavi = $objNavi->strnavi; // 表示文字列
+        $startno        = $objNavi->start_row;
+
+        $objQuery       =& SC_Query_Ex::getSingletonInstance();
+        //$objQuery->setLimitOffset(SEARCH_PMAX, $startno);
+        // 取得範囲の指定(開始行番号、行数のセット)
+        $arrProductId  = array_slice($arrProductId, $startno, SEARCH_PMAX);
+
+        $where = $this->lfMakeWhere('', $arrProductId);
+        $where .= ' AND del_flg = 0';
+        $objQuery->setWhere($where, $arrProductId);
+        $arrProducts = $objProduct->lists($objQuery);
+
+        //取得している並び順で並び替え
+        $arrProducts2 = array();
+        foreach ($arrProducts as $item) {
+            $arrProducts2[$item['product_id']] = $item;
+        }
+        $arrProductsList = array();
+        foreach ($arrProductId as $product_id) {
+            $arrProductsList[] = $arrProducts2[$product_id];
+        }
+
+        // 税込金額を設定する
+        SC_Product_Ex::setIncTaxToProducts($arrProductsList);
+
+        return $arrProductsList;
+    }
 }
diff -urNb ec-cube-iis/data/config/config.php ec-cube/data/config/config.php
--- ec-cube-iis/data/config/config.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/config/config.php	2014-08-20 17:49:20.000000000 +0900
@@ -1,6 +1,6 @@
 <?php
 $realpath = dirname(__FILE__);
-define('ROOT_URLPATH', '/');
+define('ROOT_URLPATH', '/ec-cube/html/');
 
 // for Azure
 if (strpos($_SERVER['SERVER_NAME'], 'localhost') === false) {
@@ -25,14 +25,14 @@
 
     if (file_exists($webmatrix_php)) {
         $subject = file_get_contents($webmatrix_php);
-        preg_match("|/\\*\\s*mysql://([^:]*):([^@]*)@([^/]*)/([^;]*);\\*/|", $subject, $matches);
+        preg_match("|/\\*\\s*sqlsrv://([^:]*):([^@]*)@([^/]*)/([^;]*);\\*/|", $subject, $matches);
         list($all, $db_user, $db_password, $db_server, $db_name) = $matches;
 
-        define('DB_TYPE', 'mysql');
+        define('DB_TYPE', 'sqlsrv');
         define('DB_USER', $db_user);
         define('DB_PASSWORD', $db_password);
         define('DB_SERVER', $db_server);
         define('DB_NAME', $db_name);
-        define('DB_PORT', '');
+        define('DB_PORT', '1433');
     }
 }
diff -urNb ec-cube-iis/data/config/webmatrix.php ec-cube/data/config/webmatrix.php
--- ec-cube-iis/data/config/webmatrix.php	2014-08-20 17:46:26.000000000 +0900
+++ ec-cube/data/config/webmatrix.php	2014-08-20 17:49:20.000000000 +0900
@@ -1,4 +1,4 @@
 <?php
 /* WebMatrix Connection String */
-/* mysql://PlaceHolderForUser:PlaceHolderForPassword@PlaceHolderForServer/PlaceHolderForDb;*/
+/* sqlsrv://PlaceHolderForUser:PlaceHolderForPassword@PlaceHolderForServer/PlaceHolderForDb;*/
 ?>
diff -urNb ec-cube-iis/data/downloads/plugain/COPYING ec-cube/data/downloads/plugain/COPYING
--- ec-cube-iis/data/downloads/plugain/COPYING	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/downloads/plugain/COPYING	2014-04-25 13:05:35.000000000 +0900
@@ -0,0 +1,339 @@
+		    GNU GENERAL PUBLIC LICENSE
+		       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+		    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+			    NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+
+	    How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -urNb ec-cube-iis/data/downloads/plugain/SQLAzureSupport.php ec-cube/data/downloads/plugain/SQLAzureSupport.php
--- ec-cube-iis/data/downloads/plugain/SQLAzureSupport.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/downloads/plugain/SQLAzureSupport.php	2014-08-20 17:49:20.000000000 +0900
@@ -0,0 +1,71 @@
+<?php
+define('AZURE_PLUGIN_NAME', 'SQLAzureSupport');
+/**
+ * SQL Azure 対応プラグイン
+ *
+ * @author Kentaro Ohkouchi
+ */
+class SQLAzureSupport extends SC_Plugin_Base {
+
+    /**
+     * コンストラクタ.
+     */
+    public function __construct(array $arrSelfInfo) {
+        parent::__construct($arrSelfInfo);
+    }
+
+
+    function install($arrPlugin) {
+        if(copy(PLUGIN_UPLOAD_REALDIR . AZURE_PLUGIN_NAME . '/logo.png', PLUGIN_HTML_REALDIR . AZURE_PLUGIN_NAME . '/logo.png') === false);
+    }
+
+    function uninstall($arrPlugin) {
+        // unsupported.
+    }
+
+
+    function enable($arrPlugin) {
+        $arrDataFiles = array('data/class_extends/page_extends/products/LC_Page_Products_List_Ex.php',
+                              'data/class_extends/page_extends/admin/total/LC_Page_Admin_Total_Ex.php',
+                              'data/class_extends/page_extends/frontparts/bloc/LC_Page_FrontParts_Bloc_News_Ex.php',
+                              'data/class_extends/SC_Query_Ex.php',
+                              'data/class_extends/helper_extends/SC_Helper_DB_Ex.php',
+                              'data/class_extends/db_extends/SC_DB_DBFactory_Ex.php',
+                              'data/class_extends/db_extends/dbfactory/SC_DB_DBFactory_SQLSRV_Ex.php',
+                              'data/class_extends/SC_Customer_Ex.php',
+                              'data/class_extends/SC_Product_Ex.php',
+                              'data/module/MDB2.php',
+                              'data/module/MDB2/Extended.php',
+                              'data/module/MDB2/Driver/Manager/Common.php',
+                              'data/module/MDB2/Driver/Manager/sqlsrv.php',
+                              'data/module/MDB2/Driver/Reverse/Common.php',
+                              'data/module/MDB2/Driver/Reverse/sqlsrv.php',
+                              'data/module/MDB2/Driver/Datatype/Common.php',
+                              'data/module/MDB2/Driver/Datatype/sqlsrv.php',
+                              'data/module/MDB2/Driver/sqlsrv.php',
+                              'data/module/MDB2/Driver/Function/Common.php',
+                              'data/module/MDB2/Driver/Function/sqlsrv.php',
+                              'data/module/MDB2/Driver/Native/Common.php',
+                              'data/module/MDB2/Driver/Native/sqlsrv.php',
+                              'data/module/MDB2/Iterator.php',
+                              'data/module/MDB2/LOB.php',
+                              'data/module/MDB2/Date.php',
+                              'data/class/db/SC_DB_DBFactory.php',
+                              'data/class/db/dbfactory/SC_DB_DBFactory_SQLSRV.php'
+                              );
+        $arrHtmlFiles = array('html/install/sql/create_table_sqlsrv.sql',
+                              'html/install/sql/insert_data_sqlsrv.sql',
+                              'html/install/index.php');
+
+        foreach ($arrDataFiles as $file) {
+            if (copy(PLUGIN_UPLOAD_REALDIR . AZURE_PLUGIN_NAME . '/files/' . $file, DATA_REALDIR . substr($file, 5)) === false);
+        }
+        foreach ($arrHtmlFiles as $file) {
+            if (copy(PLUGIN_UPLOAD_REALDIR . AZURE_PLUGIN_NAME . '/files/' . $file, HTML_REALDIR . substr($file, 5)) === false);
+        }
+    }
+
+    function disable($arrPlugin) {
+        // nop
+    }
+}
Binary files ec-cube-iis/data/downloads/plugain/logo.png and ec-cube/data/downloads/plugain/logo.png differ
diff -urNb ec-cube-iis/data/downloads/plugain/plugin_info.php ec-cube/data/downloads/plugain/plugin_info.php
--- ec-cube-iis/data/downloads/plugain/plugin_info.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/downloads/plugain/plugin_info.php	2014-08-20 17:49:20.000000000 +0900
@@ -0,0 +1,33 @@
+<?php
+/**
+ * プラグイン の情報クラス.
+ *
+ * @package SQLAzureSupport
+ * @author Kentaro Ohkouchi
+ * @version $Id: $
+ */
+class plugin_info{
+    /** プラグインコード(必須)：プラグインを識別する為キーで、他のプラグインと重複しない一意な値である必要があります. */
+    static $PLUGIN_CODE       = "SQLAzureSupport";
+    /** プラグイン名(必須)：EC-CUBE上で表示されるプラグイン名. */
+    static $PLUGIN_NAME       = "Microsoft Windows Azure プラグイン";
+    /** プラグインバージョン(必須)：プラグインのバージョン. */
+    static $PLUGIN_VERSION    = "1.0";
+    /** 対応バージョン(必須)：対応するEC-CUBEバージョン. */
+    static $COMPLIANT_VERSION = "2.12.0";
+    /** 作者(必須)：プラグイン作者. */
+    static $AUTHOR            = "Kentaro Ohkouchi (Loop AZ)";
+    /** 説明(必須)：プラグインの説明. */
+    static $DESCRIPTION       = "Microsoft Windows Azure 対応プラグインです。インストーラのデータベースに SQL Azure が追加されます。PHP 5.3.0 以降対応。sqlsrv ドライバが必要です。";
+    /** プラグインURL：プラグイン毎に設定出来るURL（説明ページなど） */
+    static $PLUGIN_SITE_URL   = "";
+    /** プラグイン作者URL：プラグイン毎に設定出来るURL（説明ページなど） */
+    static $AUTHOR_SITE_URL   = "http://www.loop-az.co.jp/";
+    /** クラス名(必須)：プラグインのクラス（拡張子は含まない） */
+    static $CLASS_NAME        = "SQLAzureSupport";
+    /** フックポイント：フックポイントとコールバック関数を定義します */
+    static $HOOK_POINTS       = array();
+    /** プラグインのライセンス. */
+    static $LICENSE           = "GPL";
+}
+?>
Binary files ec-cube-iis/data/downloads/plugin/.DS_Store and ec-cube/data/downloads/plugin/.DS_Store differ
diff -urNb ec-cube-iis/data/downloads/plugin/SQLAzureSupport/COPYING ec-cube/data/downloads/plugin/SQLAzureSupport/COPYING
--- ec-cube-iis/data/downloads/plugin/SQLAzureSupport/COPYING	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/downloads/plugin/SQLAzureSupport/COPYING	2012-05-22 10:10:02.000000000 +0900
@@ -0,0 +1,339 @@
+		    GNU GENERAL PUBLIC LICENSE
+		       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+		    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+			    NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+
+	    How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -urNb ec-cube-iis/data/downloads/plugin/SQLAzureSupport/SQLAzureSupport.php ec-cube/data/downloads/plugin/SQLAzureSupport/SQLAzureSupport.php
--- ec-cube-iis/data/downloads/plugin/SQLAzureSupport/SQLAzureSupport.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/downloads/plugin/SQLAzureSupport/SQLAzureSupport.php	2014-08-20 17:49:20.000000000 +0900
@@ -0,0 +1,71 @@
+<?php
+define('AZURE_PLUGIN_NAME', 'SQLAzureSupport');
+/**
+ * SQL Azure 対応プラグイン
+ *
+ * @author Kentaro Ohkouchi
+ */
+class SQLAzureSupport extends SC_Plugin_Base {
+
+    /**
+     * コンストラクタ.
+     */
+    public function __construct(array $arrSelfInfo) {
+        parent::__construct($arrSelfInfo);
+    }
+
+
+    function install($arrPlugin) {
+        if(copy(PLUGIN_UPLOAD_REALDIR . AZURE_PLUGIN_NAME . '/logo.png', PLUGIN_HTML_REALDIR . AZURE_PLUGIN_NAME . '/logo.png') === false);
+    }
+
+    function uninstall($arrPlugin) {
+        // unsupported.
+    }
+
+
+    function enable($arrPlugin) {
+        $arrDataFiles = array('data/class_extends/page_extends/products/LC_Page_Products_List_Ex.php',
+                              'data/class_extends/page_extends/admin/total/LC_Page_Admin_Total_Ex.php',
+                              'data/class_extends/page_extends/frontparts/bloc/LC_Page_FrontParts_Bloc_News_Ex.php',
+                              'data/class_extends/SC_Query_Ex.php',
+                              'data/class_extends/helper_extends/SC_Helper_DB_Ex.php',
+                              'data/class_extends/db_extends/SC_DB_DBFactory_Ex.php',
+                              'data/class_extends/db_extends/dbfactory/SC_DB_DBFactory_SQLSRV_Ex.php',
+                              'data/class_extends/SC_Customer_Ex.php',
+                              'data/class_extends/SC_Product_Ex.php',
+                              'data/module/MDB2.php',
+                              'data/module/MDB2/Extended.php',
+                              'data/module/MDB2/Driver/Manager/Common.php',
+                              'data/module/MDB2/Driver/Manager/sqlsrv.php',
+                              'data/module/MDB2/Driver/Reverse/Common.php',
+                              'data/module/MDB2/Driver/Reverse/sqlsrv.php',
+                              'data/module/MDB2/Driver/Datatype/Common.php',
+                              'data/module/MDB2/Driver/Datatype/sqlsrv.php',
+                              'data/module/MDB2/Driver/sqlsrv.php',
+                              'data/module/MDB2/Driver/Function/Common.php',
+                              'data/module/MDB2/Driver/Function/sqlsrv.php',
+                              'data/module/MDB2/Driver/Native/Common.php',
+                              'data/module/MDB2/Driver/Native/sqlsrv.php',
+                              'data/module/MDB2/Iterator.php',
+                              'data/module/MDB2/LOB.php',
+                              'data/module/MDB2/Date.php',
+                              'data/class/db/SC_DB_DBFactory.php',
+                              'data/class/db/dbfactory/SC_DB_DBFactory_SQLSRV.php'
+                              );
+        $arrHtmlFiles = array('html/install/sql/create_table_sqlsrv.sql',
+                              'html/install/sql/insert_data_sqlsrv.sql',
+                              'html/install/index.php');
+
+        foreach ($arrDataFiles as $file) {
+            if (copy(PLUGIN_UPLOAD_REALDIR . AZURE_PLUGIN_NAME . '/files/' . $file, DATA_REALDIR . substr($file, 5)) === false);
+        }
+        foreach ($arrHtmlFiles as $file) {
+            if (copy(PLUGIN_UPLOAD_REALDIR . AZURE_PLUGIN_NAME . '/files/' . $file, HTML_REALDIR . substr($file, 5)) === false);
+        }
+    }
+
+    function disable($arrPlugin) {
+        // nop
+    }
+}
Binary files ec-cube-iis/data/downloads/plugin/SQLAzureSupport/logo.png and ec-cube/data/downloads/plugin/SQLAzureSupport/logo.png differ
diff -urNb ec-cube-iis/data/downloads/plugin/SQLAzureSupport/plugin_info.php ec-cube/data/downloads/plugin/SQLAzureSupport/plugin_info.php
--- ec-cube-iis/data/downloads/plugin/SQLAzureSupport/plugin_info.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/downloads/plugin/SQLAzureSupport/plugin_info.php	2014-08-20 17:49:20.000000000 +0900
@@ -0,0 +1,33 @@
+<?php
+/**
+ * プラグイン の情報クラス.
+ *
+ * @package SQLAzureSupport
+ * @author Kentaro Ohkouchi
+ * @version $Id: $
+ */
+class plugin_info{
+    /** プラグインコード(必須)：プラグインを識別する為キーで、他のプラグインと重複しない一意な値である必要があります. */
+    static $PLUGIN_CODE       = "SQLAzureSupport";
+    /** プラグイン名(必須)：EC-CUBE上で表示されるプラグイン名. */
+    static $PLUGIN_NAME       = "Microsoft Windows Azure プラグイン";
+    /** プラグインバージョン(必須)：プラグインのバージョン. */
+    static $PLUGIN_VERSION    = "1.0";
+    /** 対応バージョン(必須)：対応するEC-CUBEバージョン. */
+    static $COMPLIANT_VERSION = "2.12.0";
+    /** 作者(必須)：プラグイン作者. */
+    static $AUTHOR            = "Kentaro Ohkouchi (Loop AZ)";
+    /** 説明(必須)：プラグインの説明. */
+    static $DESCRIPTION       = "Microsoft Windows Azure 対応プラグインです。インストーラのデータベースに SQL Azure が追加されます。PHP 5.3.0 以降対応。sqlsrv ドライバが必要です。";
+    /** プラグインURL：プラグイン毎に設定出来るURL（説明ページなど） */
+    static $PLUGIN_SITE_URL   = "";
+    /** プラグイン作者URL：プラグイン毎に設定出来るURL（説明ページなど） */
+    static $AUTHOR_SITE_URL   = "http://www.loop-az.co.jp/";
+    /** クラス名(必須)：プラグインのクラス（拡張子は含まない） */
+    static $CLASS_NAME        = "SQLAzureSupport";
+    /** フックポイント：フックポイントとコールバック関数を定義します */
+    static $HOOK_POINTS       = array();
+    /** プラグインのライセンス. */
+    static $LICENSE           = "GPL";
+}
+?>
diff -urNb ec-cube-iis/data/module/MDB2/Driver/Datatype/sqlsrv.php ec-cube/data/module/MDB2/Driver/Datatype/sqlsrv.php
--- ec-cube-iis/data/module/MDB2/Driver/Datatype/sqlsrv.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/module/MDB2/Driver/Datatype/sqlsrv.php	2012-05-22 10:10:02.000000000 +0900
@@ -0,0 +1,477 @@
+<?php
+// vim: set et ts=4 sw=4 fdm=marker:
+// +----------------------------------------------------------------------+
+// | PHP versions 4 and 5                                                 |
+// +----------------------------------------------------------------------+
+// | Copyright (c) 1998-2007 Manuel Lemos, Tomas V.V.Cox,                 |
+// | Stig. S. Bakken, Lukas Smith                                         |
+// | All rights reserved.                                                 |
+// +----------------------------------------------------------------------+
+// | MDB2 is a merge of PEAR DB and Metabases that provides a unified DB  |
+// | API as well as database abstraction for PHP applications.            |
+// | This LICENSE is in the BSD license style.                            |
+// |                                                                      |
+// | Redistribution and use in source and binary forms, with or without   |
+// | modification, are permitted provided that the following conditions   |
+// | are met:                                                             |
+// |                                                                      |
+// | Redistributions of source code must retain the above copyright       |
+// | notice, this list of conditions and the following disclaimer.        |
+// |                                                                      |
+// | Redistributions in binary form must reproduce the above copyright    |
+// | notice, this list of conditions and the following disclaimer in the  |
+// | documentation and/or other materials provided with the distribution. |
+// |                                                                      |
+// | Neither the name of Manuel Lemos, Tomas V.V.Cox, Stig. S. Bakken,    |
+// | Lukas Smith nor the names of his contributors may be used to endorse |
+// | or promote products derived from this software without specific prior|
+// | written permission.                                                  |
+// |                                                                      |
+// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  |
+// | "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    |
+// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    |
+// | FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE      |
+// | REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,          |
+// | INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, |
+// | BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS|
+// |  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  |
+// | AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          |
+// | LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY|
+// | WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE          |
+// | POSSIBILITY OF SUCH DAMAGE.                                          |
+// +----------------------------------------------------------------------+
+// | Authors: Lukas Smith <smith@pooteeweet.org>                          |
+// |          Daniel Convissor <danielc@php.net>                          |
+// +----------------------------------------------------------------------+
+
+require_once 'MDB2/Driver/Datatype/Common.php';
+
+/**
+ * MDB2 MS SQL driver
+ *
+ * @package MDB2
+ * @category Database
+ */
+class MDB2_Driver_Datatype_sqlsrv extends MDB2_Driver_Datatype_Common
+{
+    // {{{ _baseConvertResult()
+
+    /**
+     * general type conversion method
+     *
+     * @param mixed   $value refernce to a value to be converted
+     * @param string  $type  specifies which type to convert to
+     * @param boolean $rtrim [optional] when TRUE [default], apply rtrim() to text
+     * @return object a MDB2 error on failure
+     * @access protected
+     */
+    function _baseConvertResult($value, $type, $rtrim = true)
+    {
+        if (null === $value) {
+            return null;
+        }
+        switch ($type) {
+        case 'boolean':
+            return $value == '1';
+        case 'date':
+            if (strlen($value) > 10) {
+                $value = substr($value,0,10);
+            }
+            return $value;
+        case 'time':
+            if (strlen($value) > 8) {
+                $value = substr($value,11,8);
+            }
+            return $value;
+        }
+        return parent::_baseConvertResult($value, $type, $rtrim);
+    }
+
+    // }}}
+    // {{{ _getCollationFieldDeclaration()
+
+    /**
+     * Obtain DBMS specific SQL code portion needed to set the COLLATION
+     * of a field declaration to be used in statements like CREATE TABLE.
+     *
+     * @param string $collation name of the collation
+     *
+     * @return string DBMS specific SQL code portion needed to set the COLLATION
+     *                of a field declaration.
+     */
+    function _getCollationFieldDeclaration($collation)
+    {
+        return 'COLLATE '.$collation;
+    }
+
+    // }}}
+    // {{{ getTypeDeclaration()
+
+    /**
+     * Obtain DBMS specific SQL code portion needed to declare an text type
+     * field to be used in statements like CREATE TABLE.
+     *
+     * @param array $field  associative array with the name of the properties
+     *      of the field being declared as array indexes. Currently, the types
+     *      of supported field properties are as follows:
+     *
+     *      length
+     *          Integer value that determines the maximum length of the text
+     *          field. If this argument is missing the field should be
+     *          declared to have the longest length allowed by the DBMS.
+     *
+     *      default
+     *          Text value to be used as default for this field.
+     *
+     *      notnull
+     *          Boolean flag that indicates whether this field is constrained
+     *          to not be set to null.
+     * @return string  DBMS specific SQL code portion that should be used to
+     *      declare the specified field.
+     * @access public
+     */
+    function getTypeDeclaration($field)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        switch ($field['type']) {
+        case 'text':
+            $length = !empty($field['length'])
+                ? $field['length'] : false;
+            $fixed = !empty($field['fixed']) ? $field['fixed'] : false;
+            return $fixed ? ($length ? 'CHAR('.$length.')' : 'CHAR('.$db->options['default_text_field_length'].')')
+                : ($length ? 'VARCHAR('.$length.')' : 'VARCHAR(MAX)');
+        case 'clob':
+            if (!empty($field['length'])) {
+                $length = $field['length'];
+                if ($length <= 8000) {
+                    return 'VARCHAR('.$length.')';
+                }
+             }
+             return 'VARCHAR(MAX)';
+        case 'blob':
+            if (!empty($field['length'])) {
+                $length = $field['length'];
+                if ($length <= 8000) {
+                    return "VARBINARY($length)";
+                }
+            }
+            return 'IMAGE';
+        case 'integer':
+            return 'INT';
+        case 'boolean':
+            return 'BIT';
+        case 'date':
+            return 'CHAR ('.strlen('YYYY-MM-DD').')';
+        case 'time':
+            return 'CHAR ('.strlen('HH:MM:SS').')';
+        case 'timestamp':
+            return 'CHAR ('.strlen('YYYY-MM-DD HH:MM:SS').')';
+        case 'float':
+            return 'FLOAT';
+        case 'decimal':
+            $length = !empty($field['length']) ? $field['length'] : 18;
+            $scale = !empty($field['scale']) ? $field['scale'] : $db->options['decimal_places'];
+            return 'DECIMAL('.$length.','.$scale.')';
+        }
+        return '';
+    }
+
+    // }}}
+    // {{{ _getIntegerDeclaration()
+
+    /**
+     * Obtain DBMS specific SQL code portion needed to declare an integer type
+     * field to be used in statements like CREATE TABLE.
+     *
+     * @param string  $name   name the field to be declared.
+     * @param string  $field  associative array with the name of the properties
+     *                        of the field being declared as array indexes.
+     *                        Currently, the types of supported field
+     *                        properties are as follows:
+     *
+     *                       unsigned
+     *                        Boolean flag that indicates whether the field
+     *                        should be declared as unsigned integer if
+     *                        possible.
+     *
+     *                       default
+     *                        Integer value to be used as default for this
+     *                        field.
+     *
+     *                       notnull
+     *                        Boolean flag that indicates whether this field is
+     *                        constrained to not be set to null.
+     * @return string  DBMS specific SQL code portion that should be used to
+     *                 declare the specified field.
+     * @access protected
+     */
+    function _getIntegerDeclaration($name, $field)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $notnull = empty($field['notnull']) ? ' NULL' : ' NOT NULL';
+        $default = $autoinc = '';
+        if (!empty($field['autoincrement'])) {
+            $autoinc = ' IDENTITY PRIMARY KEY';
+        } elseif (array_key_exists('default', $field)) {
+            if ($field['default'] === '') {
+                $field['default'] = 0;
+            }
+            if (null === $field['default']) {
+                $default = ' DEFAULT (NULL)';
+            } else {
+                $default = ' DEFAULT (' . $this->quote($field['default'], 'integer') . ')';
+            }
+        }
+
+        if (!empty($field['unsigned'])) {
+            $db->warnings[] = "unsigned integer field \"$name\" is being declared as signed integer";
+        }
+
+        $name = $db->quoteIdentifier($name, true);
+        return $name.' '.$this->getTypeDeclaration($field).$notnull.$default.$autoinc;
+    }
+
+    // }}}
+    // {{{ _getCLOBDeclaration()
+
+    /**
+     * Obtain DBMS specific SQL code portion needed to declare an character
+     * large object type field to be used in statements like CREATE TABLE.
+     *
+     * @param string $name name the field to be declared.
+     * @param array $field associative array with the name of the properties
+     *        of the field being declared as array indexes. Currently, the types
+     *        of supported field properties are as follows:
+     *
+     *        length
+     *            Integer value that determines the maximum length of the large
+     *            object field. If this argument is missing the field should be
+     *            declared to have the longest length allowed by the DBMS.
+     *
+     *        notnull
+     *            Boolean flag that indicates whether this field is constrained
+     *            to not be set to null.
+     * @return string DBMS specific SQL code portion that should be used to
+     *        declare the specified field.
+     * @access public
+     */
+    function _getCLOBDeclaration($name, $field)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $notnull = empty($field['notnull']) ? ' NULL' : ' NOT NULL';
+        $name = $db->quoteIdentifier($name, true);
+        return $name.' '.$this->getTypeDeclaration($field).$notnull;
+    }
+
+    // }}}
+    // {{{ _getBLOBDeclaration()
+
+    /**
+     * Obtain DBMS specific SQL code portion needed to declare an binary large
+     * object type field to be used in statements like CREATE TABLE.
+     *
+     * @param string $name name the field to be declared.
+     * @param array $field associative array with the name of the properties
+     *        of the field being declared as array indexes. Currently, the types
+     *        of supported field properties are as follows:
+     *
+     *        length
+     *            Integer value that determines the maximum length of the large
+     *            object field. If this argument is missing the field should be
+     *            declared to have the longest length allowed by the DBMS.
+     *
+     *        notnull
+     *            Boolean flag that indicates whether this field is constrained
+     *            to not be set to null.
+     * @return string DBMS specific SQL code portion that should be used to
+     *        declare the specified field.
+     * @access protected
+     */
+    function _getBLOBDeclaration($name, $field)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $notnull = empty($field['notnull']) ? ' NULL' : ' NOT NULL';
+        $name = $db->quoteIdentifier($name, true);
+        return $name.' '.$this->getTypeDeclaration($field).$notnull;
+    }
+
+    function _quoteText($value, $quote, $escape_wildcards)
+    {
+        if (!$quote) {
+            return $value;
+        }
+
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $value = $db->escape($value, $escape_wildcards);
+        if (PEAR::isError($value)) {
+            return $value;
+        }
+        return "N'".$value."'";
+    }
+
+    // }}}
+    // {{{ _quoteBLOB()
+
+    /**
+     * Convert a text value into a DBMS specific format that is suitable to
+     * compose query statements.
+     *
+     * @param string $value text string value that is intended to be converted.
+     * @param bool $quote determines if the value should be quoted and escaped
+     * @param bool $escape_wildcards if to escape escape wildcards
+     * @return string  text string that represents the given argument value in
+     *                 a DBMS specific format.
+     * @access protected
+     */
+    function _quoteBLOB($value, $quote, $escape_wildcards)
+    {
+        if (!$quote) {
+            return $value;
+        }
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+        if ($db->options['lob_allow_url_include']) {
+            $value = '0x'.bin2hex($this->_readFile($value));
+        }
+        return "'".$value."'";
+    }
+
+    // }}}
+    // {{{ _mapNativeDatatype()
+
+    /**
+     * Maps a native array description of a field to a MDB2 datatype and length
+     *
+     * @param array  $field native field description
+     * @return array containing the various possible types, length, sign, fixed
+     * @access public
+     */
+    function _mapNativeDatatype($field)
+    {
+        // todo: handle length of various int variations
+        $db_type = $field['type'];
+        $length = $field['length'];
+        $type = array();
+        // todo: unsigned handling seems to be missing
+        $unsigned = $fixed = null;
+        switch ($db_type) {
+        case 'bit':
+        case SQLSRV_SQLTYPE_BIT:
+            $type[0] = 'boolean';
+            break;
+        case 'tinyint':
+        case SQLSRV_SQLTYPE_TINYINT:
+            $type[0] = 'integer';
+            $length = 1;
+            break;
+        case 'smallint':
+        case SQLSRV_SQLTYPE_SMALLINT:
+            $type[0] = 'integer';
+            $length = 2;
+            break;
+        case 'int':
+        case SQLSRV_SQLTYPE_INT:
+            $type[0] = 'integer';
+            $length = 4;
+            break;
+        case 'bigint':
+        case SQLSRV_SQLTYPE_BIGINT:
+            $type[0] = 'integer';
+            $length = 8;
+            break;
+        case 'datetime':
+        case SQLSRV_SQLTYPE_DATETIME:
+            $type[0] = 'timestamp';
+            break;
+        case 'float':
+        case SQLSRV_SQLTYPE_FLOAT:
+        case 'real':
+        case SQLSRV_SQLTYPE_REAL:
+            $type[0] = 'float';
+            break;
+        case 'numeric':
+        case SQLSRV_SQLTYPE_NUMERIC:
+        case 'decimal':
+        case SQLSRV_SQLTYPE_DECIMAL:
+        case 'money':
+        case SQLSRV_SQLTYPE_MONEY:
+            $type[0] = 'decimal';
+            $length = $field['numeric_precision'].','.$field['numeric_scale'];
+            break;
+        case 'text':
+        case SQLSRV_SQLTYPE_TEXT:
+        case 'ntext':
+        case SQLSRV_SQLTYPE_NTEXT:
+        case 'varchar':
+        case SQLSRV_SQLTYPE_VARCHAR:
+        case 'nvarchar':
+        case SQLSRV_SQLTYPE_NVARCHAR:
+            $fixed = false;
+        case 'char':
+        case SQLSRV_SQLTYPE_CHAR:
+        case 'nchar':
+        case SQLSRV_SQLTYPE_NCHAR:
+            $type[0] = 'text';
+            if ($length == '1') {
+                $type[] = 'boolean';
+                if (preg_match('/^(is|has)/', $field['name'])) {
+                    $type = array_reverse($type);
+                }
+            } elseif (strstr($db_type, 'text') || strstr($db_type, SQLSRV_SQLTYPE_TEXT)) {
+                $type[] = 'clob';
+                $type = array_reverse($type);
+            }
+            if ($fixed !== false) {
+                $fixed = true;
+            }
+            break;
+        case 'image':
+        case SQLSRV_SQLTYPE_IMAGE:
+        case 'varbinary':
+        case SQLSRV_SQLTYPE_VARBINARY:
+        case 'timestamp':
+        case SQLSRV_SQLTYPE_TIMESTAMP:
+            $type[] = 'blob';
+            $length = null;
+            break;
+        default:
+            $db = $this->getDBInstance();
+            if (PEAR::isError($db)) {
+                return $db;
+            }
+            return $db->raiseError(MDB2_ERROR_UNSUPPORTED, null, null,
+                'unknown database attribute type: '.$db_type, __FUNCTION__);
+        }
+
+        if ((int)$length <= 0) {
+            $length = null;
+        }
+
+        return array($type, $length, $unsigned, $fixed);
+    }
+    // }}}
+}
+
+?>
\ No newline at end of file
diff -urNb ec-cube-iis/data/module/MDB2/Driver/Function/sqlsrv.php ec-cube/data/module/MDB2/Driver/Function/sqlsrv.php
--- ec-cube-iis/data/module/MDB2/Driver/Function/sqlsrv.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/module/MDB2/Driver/Function/sqlsrv.php	2012-05-22 10:10:02.000000000 +0900
@@ -0,0 +1,189 @@
+<?php
+// +----------------------------------------------------------------------+
+// | PHP versions 4 and 5                                                 |
+// +----------------------------------------------------------------------+
+// | Copyright (c) 1998-2008 Manuel Lemos, Tomas V.V.Cox,                 |
+// | Stig. S. Bakken, Lukas Smith                                         |
+// | All rights reserved.                                                 |
+// +----------------------------------------------------------------------+
+// | MDB2 is a merge of PEAR DB and Metabases that provides a unified DB  |
+// | API as well as database abstraction for PHP applications.            |
+// | This LICENSE is in the BSD license style.                            |
+// |                                                                      |
+// | Redistribution and use in source and binary forms, with or without   |
+// | modification, are permitted provided that the following conditions   |
+// | are met:                                                             |
+// |                                                                      |
+// | Redistributions of source code must retain the above copyright       |
+// | notice, this list of conditions and the following disclaimer.        |
+// |                                                                      |
+// | Redistributions in binary form must reproduce the above copyright    |
+// | notice, this list of conditions and the following disclaimer in the  |
+// | documentation and/or other materials provided with the distribution. |
+// |                                                                      |
+// | Neither the name of Manuel Lemos, Tomas V.V.Cox, Stig. S. Bakken,    |
+// | Lukas Smith nor the names of his contributors may be used to endorse |
+// | or promote products derived from this software without specific prior|
+// | written permission.                                                  |
+// |                                                                      |
+// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  |
+// | "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    |
+// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    |
+// | FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE      |
+// | REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,          |
+// | INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, |
+// | BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS|
+// |  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  |
+// | AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          |
+// | LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY|
+// | WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE          |
+// | POSSIBILITY OF SUCH DAMAGE.                                          |
+// +----------------------------------------------------------------------+
+// | Author: Frank M. Kromann <frank@kromann.info>                        |
+// +----------------------------------------------------------------------+
+
+require_once 'MDB2/Driver/Function/Common.php';
+
+// {{{ class MDB2_Driver_Function_sqlsrv
+/**
+ * MDB2 MSSQL driver for the function modules
+ *
+ * @package MDB2
+ * @category Database
+ */
+class MDB2_Driver_Function_sqlsrv extends MDB2_Driver_Function_Common
+{
+    // {{{ executeStoredProc()
+
+    /**
+     * Execute a stored procedure and return any results
+     *
+     * @param string $name string that identifies the function to execute
+     * @param mixed  $params  array that contains the paramaters to pass the stored proc
+     * @param mixed   $types  array that contains the types of the columns in
+     *                        the result set
+     * @param mixed $result_class string which specifies which result class to use
+     * @param mixed $result_wrap_class string which specifies which class to wrap results in
+     * @return mixed a result handle or MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function executeStoredProc($name, $params = null, $types = null, $result_class = true, $result_wrap_class = false)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $query = 'EXECUTE '.$name;
+        $query .= $params ? ' '.implode(', ', $params) : '';
+        return $db->query($query, $types, $result_class, $result_wrap_class);
+    }
+
+    // }}}
+    // {{{ now()
+
+    /**
+     * Return string to call a variable with the current timestamp inside an SQL statement
+     * There are three special variables for current date and time:
+     * - CURRENT_TIMESTAMP (date and time, TIMESTAMP type)
+     * - CURRENT_DATE (date, DATE type)
+     * - CURRENT_TIME (time, TIME type)
+     *
+     * @return string to call a variable with the current timestamp
+     * @access public
+     */
+    function now($type = 'timestamp')
+    {
+        switch ($type) {
+        case 'time':
+        case 'date':
+        case 'timestamp':
+        default:
+            return 'GETDATE()';
+        }
+    }
+
+    // }}}
+    // {{{ unixtimestamp()
+
+    /**
+     * return string to call a function to get the unix timestamp from a iso timestamp
+     *
+     * @param string $expression
+     *
+     * @return string to call a variable with the timestamp
+     * @access public
+     */
+    function unixtimestamp($expression)
+    {
+        return 'DATEDIFF(second, \'19700101\', '. $expression.') + DATEDIFF(second, GETDATE(), GETUTCDATE())';
+    }
+
+    // }}}
+    // {{{ substring()
+
+    /**
+     * return string to call a function to get a substring inside an SQL statement
+     *
+     * @return string to call a function to get a substring
+     * @access public
+     */
+    function substring($value, $position = 1, $length = null)
+    {
+        if (null !== $length) {
+            return "SUBSTRING($value, $position, $length)";
+        }
+        return "SUBSTRING($value, $position, LEN($value) - $position + 1)";
+    }
+
+    // }}}
+    // {{{ concat()
+
+    /**
+     * Returns string to concatenate two or more string parameters
+     *
+     * @param string $value1
+     * @param string $value2
+     * @param string $values...
+     * @return string to concatenate two strings
+     * @access public
+     **/
+    function concat($value1, $value2)
+    {
+        $args = func_get_args();
+        return "(".implode(' + ', $args).")";
+    }
+
+    // }}}
+    // {{{ length()
+
+    /**
+     * return string to call a function to get the length of a string expression
+     *
+     * @param string $expression
+     * @return return string to get the string expression length
+     * @access public
+     */
+    function length($expression)
+    {
+        return "LEN($expression)";
+    }
+
+    // }}}
+    // {{{ guid()
+
+    /**
+     * Returns global unique identifier
+     *
+     * @return string to get global unique identifier
+     * @access public
+     */
+    function guid()
+    {
+        return 'NEWID()';
+    }
+
+    // }}}
+}
+// }}}
+?>
\ No newline at end of file
diff -urNb ec-cube-iis/data/module/MDB2/Driver/Manager/sqlsrv.php ec-cube/data/module/MDB2/Driver/Manager/sqlsrv.php
--- ec-cube-iis/data/module/MDB2/Driver/Manager/sqlsrv.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/module/MDB2/Driver/Manager/sqlsrv.php	2012-05-22 10:10:02.000000000 +0900
@@ -0,0 +1,1392 @@
+<?php
+// +----------------------------------------------------------------------+
+// | PHP versions 4 and 5                                                 |
+// +----------------------------------------------------------------------+
+// | Copyright (c) 1998-2008 Manuel Lemos, Tomas V.V.Cox,                 |
+// | Stig. S. Bakken, Lukas Smith                                         |
+// | All rights reserved.                                                 |
+// +----------------------------------------------------------------------+
+// | MDB2 is a merge of PEAR DB and Metabases that provides a unified DB  |
+// | API as well as database abstraction for PHP applications.            |
+// | This LICENSE is in the BSD license style.                            |
+// |                                                                      |
+// | Redistribution and use in source and binary forms, with or without   |
+// | modification, are permitted provided that the following conditions   |
+// | are met:                                                             |
+// |                                                                      |
+// | Redistributions of source code must retain the above copyright       |
+// | notice, this list of conditions and the following disclaimer.        |
+// |                                                                      |
+// | Redistributions in binary form must reproduce the above copyright    |
+// | notice, this list of conditions and the following disclaimer in the  |
+// | documentation and/or other materials provided with the distribution. |
+// |                                                                      |
+// | Neither the name of Manuel Lemos, Tomas V.V.Cox, Stig. S. Bakken,    |
+// | Lukas Smith nor the names of his contributors may be used to endorse |
+// | or promote products derived from this software without specific prior|
+// | written permission.                                                  |
+// |                                                                      |
+// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  |
+// | "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    |
+// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    |
+// | FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE      |
+// | REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,          |
+// | INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, |
+// | BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS|
+// |  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  |
+// | AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          |
+// | LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY|
+// | WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE          |
+// | POSSIBILITY OF SUCH DAMAGE.                                          |
+// +----------------------------------------------------------------------+
+// | Authors: Frank M. Kromann <frank@kromann.info>                       |
+// |          David Coallier <davidc@php.net>                             |
+// |          Lorenzo Alberton <l.alberton@quipo.it>                      |
+// +----------------------------------------------------------------------+
+
+require_once 'MDB2/Driver/Manager/Common.php';
+
+// {{{ class MDB2_Driver_Manager_sqlsrv
+
+/**
+ * MDB2 MSSQL driver for the management modules
+ *
+ * @package MDB2
+ * @category Database
+ * @author  Frank M. Kromann <frank@kromann.info>
+ * @author  David Coallier <davidc@php.net>
+ * @author  Lorenzo Alberton <l.alberton@quipo.it>
+ */
+class MDB2_Driver_Manager_sqlsrv extends MDB2_Driver_Manager_Common
+{
+    // {{{ createDatabase()
+    /**
+     * create a new database
+     *
+     * @param string $name    name of the database that should be created
+     * @param array  $options array with collation info
+     *
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function createDatabase($name, $options = array())
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $name = $db->quoteIdentifier($name, true);
+        $query = "CREATE DATABASE $name";
+        if ($db->options['database_device']) {
+            $query.= ' ON '.$db->options['database_device'];
+            $query.= $db->options['database_size'] ? '=' .
+                     $db->options['database_size'] : '';
+        }
+        if (!empty($options['collation'])) {
+            $query .= ' COLLATE ' . $options['collation'];
+        }
+        return $db->standaloneQuery($query, null, true);
+    }
+
+    // }}}
+    // {{{ alterDatabase()
+
+    /**
+     * alter an existing database
+     *
+     * @param string $name    name of the database that is intended to be changed
+     * @param array  $options array with name, collation info
+     *
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function alterDatabase($name, $options = array())
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $query = '';
+        if (!empty($options['name'])) {
+            $query .= ' MODIFY NAME = ' .$db->quoteIdentifier($options['name'], true);
+        }
+        if (!empty($options['collation'])) {
+            $query .= ' COLLATE ' . $options['collation'];
+        }
+        if (!empty($query)) {
+            $query = 'ALTER DATABASE '. $db->quoteIdentifier($name, true) . $query;
+            return $db->standaloneQuery($query, null, true);
+        }
+        return MDB2_OK;
+    }
+
+    // }}}
+    // {{{ dropDatabase()
+
+    /**
+     * drop an existing database
+     *
+     * @param string $name name of the database that should be dropped
+     *
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function dropDatabase($name)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $name = $db->quoteIdentifier($name, true);
+        return $db->standaloneQuery("DROP DATABASE $name", null, true);
+    }
+
+    // }}}
+    // {{{ dropTable()
+
+    /**
+     * drop an existing table
+     *
+     * @param string $name name of the table that should be dropped
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function dropTable($name)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+        $name = $db->quoteIdentifier($name, true);
+        return $db->exec("IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='$name') DROP TABLE $name");
+    }
+
+    // }}}	
+    // {{{ _getTemporaryTableQuery()
+
+    /**
+     * Override the parent method.
+     *
+     * @return string The string required to be placed between "CREATE" and "TABLE"
+     *                to generate a temporary table, if possible.
+     */
+    function _getTemporaryTableQuery()
+    {
+        return '';
+    }
+
+    // }}}
+    // {{{ _getAdvancedFKOptions()
+
+    /**
+     * Return the FOREIGN KEY query section dealing with non-standard options
+     * as MATCH, INITIALLY DEFERRED, ON UPDATE, ...
+     *
+     * @param array $definition
+     *
+     * @return string
+     * @access protected
+     */
+    function _getAdvancedFKOptions($definition)
+    {
+        $query = '';
+        if (!empty($definition['onupdate'])) {
+            $query .= ' ON UPDATE '.$definition['onupdate'];
+        }
+        if (!empty($definition['ondelete'])) {
+            $query .= ' ON DELETE '.$definition['ondelete'];
+        }
+        return $query;
+    }
+
+    // }}}
+    // {{{ createTable()
+
+    /**
+     * create a new table
+     *
+     * @param string $name   Name of the database that should be created
+     * @param array  $fields Associative array that contains the definition of each field of the new table
+     *                       The indexes of the array entries are the names of the fields of the table an
+     *                       the array entry values are associative arrays like those that are meant to be
+     *                       passed with the field definitions to get[Type]Declaration() functions.
+     *
+     *                      Example
+     *                        array(
+     *
+     *                            'id' => array(
+     *                                'type' => 'integer',
+     *                                'unsigned' => 1,
+     *                                'notnull' => 1,
+     *                                'default' => 0,
+     *                            ),
+     *                            'name' => array(
+     *                                'type' => 'text',
+     *                                'length' => 12,
+     *                            ),
+     *                            'description' => array(
+     *                                'type' => 'text',
+     *                                'length' => 12,
+     *                            )
+     *                        );
+     * @param array $options An associative array of table options:
+     *                          array(
+     *                              'comment' => 'Foo',
+     *                              'temporary' => true|false,
+     *                          );
+     *
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function createTable($name, $fields, $options = array())
+    {
+        /*if (!empty($options['temporary'])) {
+            $name = '#'.$name;//would make subsequent calls fail because it would go out ot scope and be destroyed already
+        }*/
+        return parent::createTable($name, $fields, $options);
+    }
+
+    // }}}
+    // {{{ truncateTable()
+
+    /**
+     * Truncate an existing table (if the TRUNCATE TABLE syntax is not supported,
+     * it falls back to a DELETE FROM TABLE query)
+     *
+     * @param string $name name of the table that should be truncated
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function truncateTable($name)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $name = $db->quoteIdentifier($name, true);
+        return $db->exec("TRUNCATE TABLE $name");
+    }
+
+    // }}}
+    // {{{ vacuum()
+
+    /**
+     * Optimize (vacuum) all the tables in the db (or only the specified table)
+     * and optionally run ANALYZE.
+     *
+     * @param string $table table name (all the tables if empty)
+     * @param array  $options an array with driver-specific options:
+     *               - timeout [int] (in seconds) [mssql-only]
+     *               - analyze [boolean] [pgsql and mysql]
+     *               - full [boolean] [pgsql-only]
+     *               - freeze [boolean] [pgsql-only]
+     *
+     * NB: you have to run the NSControl Create utility to enable VACUUM
+     *
+     * @return mixed MDB2_OK success, a MDB2 error on failure
+     * @access public
+     */
+    function vacuum($table = null, $options = array())
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+        $timeout = isset($options['timeout']) ? (int)$options['timeout'] : 300;
+
+        $query = 'NSControl Create';
+        $result = $db->exec($query);
+        if (PEAR::isError($result)) {
+            return $result;
+        }
+
+        return $db->exec('EXEC NSVacuum '.$timeout);
+    }
+
+    // }}}
+    // {{{ alterTable()
+
+    /**
+     * alter an existing table
+     *
+     * @param string  $name    name of the table that is intended to be changed.
+     * @param array   $changes associative array that contains the details of each type
+     *                         of change that is intended to be performed. The types of
+     *                         changes that are currently supported are defined as follows:
+     *
+     *                             name
+     *
+     *                                New name for the table.
+     *
+     *                            add
+     *
+     *                                Associative array with the names of fields to be added as
+     *                                 indexes of the array. The value of each entry of the array
+     *                                 should be set to another associative array with the properties
+     *                                 of the fields to be added. The properties of the fields should
+     *                                 be the same as defined by the MDB2 parser.
+     *
+     *
+     *                            remove
+     *
+     *                                Associative array with the names of fields to be removed as indexes
+     *                                 of the array. Currently the values assigned to each entry are ignored.
+     *                                 An empty array should be used for future compatibility.
+     *
+     *                            rename
+     *
+     *                                Associative array with the names of fields to be renamed as indexes
+     *                                 of the array. The value of each entry of the array should be set to
+     *                                 another associative array with the entry named name with the new
+     *                                 field name and the entry named Declaration that is expected to contain
+     *                                 the portion of the field declaration already in DBMS specific SQL code
+     *                                 as it is used in the CREATE TABLE statement.
+     *
+     *                            change
+     *
+     *                                Associative array with the names of the fields to be changed as indexes
+     *                                 of the array. Keep in mind that if it is intended to change either the
+     *                                 name of a field and any other properties, the change array entries
+     *                                 should have the new names of the fields as array indexes.
+     *
+     *                                The value of each entry of the array should be set to another associative
+     *                                 array with the properties of the fields to that are meant to be changed as
+     *                                 array entries. These entries should be assigned to the new values of the
+     *                                 respective properties. The properties of the fields should be the same
+     *                                 as defined by the MDB2 parser.
+     *
+     *                            Example
+     *                                array(
+     *                                    'name' => 'userlist',
+     *                                    'add' => array(
+     *                                        'quota' => array(
+     *                                            'type' => 'integer',
+     *                                            'unsigned' => 1
+     *                                        )
+     *                                    ),
+     *                                    'remove' => array(
+     *                                        'file_limit' => array(),
+     *                                        'time_limit' => array()
+     *                                    ),
+     *                                    'change' => array(
+     *                                        'name' => array(
+     *                                            'length' => '20',
+     *                                            'definition' => array(
+     *                                                'type' => 'text',
+     *                                                'length' => 20,
+     *                                            ),
+     *                                        )
+     *                                    ),
+     *                                    'rename' => array(
+     *                                        'sex' => array(
+     *                                            'name' => 'gender',
+     *                                            'definition' => array(
+     *                                                'type' => 'text',
+     *                                                'length' => 1,
+     *                                                'default' => 'M',
+     *                                            ),
+     *                                        )
+     *                                    )
+     *                                )
+     *
+     * @param boolean $check   indicates whether the function should just check if the DBMS driver
+     *                         can perform the requested table alterations if the value is true or
+     *                         actually perform them otherwise.
+     *
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function alterTable($name, $changes, $check)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+        $name_quoted = $db->quoteIdentifier($name, true);
+
+        foreach ($changes as $change_name => $change) {
+            switch ($change_name) {
+            case 'remove':
+            case 'rename':
+            case 'add':
+            case 'change':
+            case 'name':
+                break;
+            default:
+                return $db->raiseError(MDB2_ERROR_CANNOT_ALTER, null, null,
+                    'change type "'.$change_name.'" not yet supported', __FUNCTION__);
+            }
+        }
+
+        if ($check) {
+            return MDB2_OK;
+        }
+
+        $idxname_format = $db->getOption('idxname_format');
+        $db->setOption('idxname_format', '%s');
+
+        if (!empty($changes['remove']) && is_array($changes['remove'])) {
+            $result = $this->_dropConflictingIndices($name, array_keys($changes['remove']));
+            if (PEAR::isError($result)) {
+                $db->setOption('idxname_format', $idxname_format);
+                return $result;
+            }
+            $result = $this->_dropConflictingConstraints($name, array_keys($changes['remove']));
+            if (PEAR::isError($result)) {
+                $db->setOption('idxname_format', $idxname_format);
+                return $result;
+            }
+
+            $query = '';
+            foreach ($changes['remove'] as $field_name => $field) {
+                if ($query) {
+                    $query.= ', ';
+                }
+                $field_name = $db->quoteIdentifier($field_name, true);
+                $query.= 'COLUMN ' . $field_name;
+            }
+
+            $result = $db->exec("ALTER TABLE $name_quoted DROP $query");
+            if (PEAR::isError($result)) {
+                $db->setOption('idxname_format', $idxname_format);
+                return $result;
+            }
+        }
+
+        if (!empty($changes['rename']) && is_array($changes['rename'])) {
+            foreach ($changes['rename'] as $field_name => $field) {
+                $field_name = $db->quoteIdentifier($field_name, true);
+                $result = $db->exec("sp_rename '$name_quoted.$field_name', '".$field['name']."', 'COLUMN'");
+                if (PEAR::isError($result)) {
+                    $db->setOption('idxname_format', $idxname_format);
+                    return $result;
+                }
+            }
+        }
+
+        if (!empty($changes['add']) && is_array($changes['add'])) {
+            $query = '';
+            foreach ($changes['add'] as $field_name => $field) {
+                if ($query) {
+                    $query.= ', ';
+                } else {
+                    $query.= 'ADD ';
+                }
+                $query.= $db->getDeclaration($field['type'], $field_name, $field);
+            }
+
+            $result = $db->exec("ALTER TABLE $name_quoted $query");
+            if (PEAR::isError($result)) {
+                $db->setOption('idxname_format', $idxname_format);
+                return $result;
+            }
+        }
+
+        $dropped_indices     = array();
+        $dropped_constraints = array();
+
+        if (!empty($changes['change']) && is_array($changes['change'])) {
+            $dropped = $this->_dropConflictingIndices($name, array_keys($changes['change']));
+            if (PEAR::isError($dropped)) {
+                $db->setOption('idxname_format', $idxname_format);
+                return $dropped;
+            }
+            $dropped_indices = array_merge($dropped_indices, $dropped);
+            $dropped = $this->_dropConflictingConstraints($name, array_keys($changes['change']));
+            if (PEAR::isError($dropped)) {
+                $db->setOption('idxname_format', $idxname_format);
+                return $dropped;
+            }
+            $dropped_constraints = array_merge($dropped_constraints, $dropped);
+
+            foreach ($changes['change'] as $field_name => $field) {
+                //MSSQL doesn't allow multiple ALTER COLUMNs in one query
+                $query = 'ALTER COLUMN ';
+
+                //MSSQL doesn't allow changing the DEFAULT value of a field in altering mode
+                if (array_key_exists('default', $field['definition'])) {
+                    unset($field['definition']['default']);
+                }
+
+                $query .= $db->getDeclaration($field['definition']['type'], $field_name, $field['definition']);
+                $result = $db->exec("ALTER TABLE $name_quoted $query");
+                if (PEAR::isError($result)) {
+                    $db->setOption('idxname_format', $idxname_format);
+                    return $result;
+                }
+            }
+        }
+
+        // restore the dropped conflicting indices and constraints
+        foreach ($dropped_indices as $index_name => $index) {
+            $result = $this->createIndex($name, $index_name, $index);
+            if (PEAR::isError($result)) {
+                $db->setOption('idxname_format', $idxname_format);
+                return $result;
+            }
+        }
+        foreach ($dropped_constraints as $constraint_name => $constraint) {
+            $result = $this->createConstraint($name, $constraint_name, $constraint);
+            if (PEAR::isError($result)) {
+                $db->setOption('idxname_format', $idxname_format);
+                return $result;
+            }
+        }
+
+        $db->setOption('idxname_format', $idxname_format);
+
+        if (!empty($changes['name'])) {
+            $new_name = $db->quoteIdentifier($changes['name'], true);
+            $result = $db->exec("sp_rename '$name_quoted', '$new_name'");
+            if (PEAR::isError($result)) {
+                return $result;
+            }
+        }
+
+        return MDB2_OK;
+    }
+
+    // }}}
+    // {{{ _dropConflictingIndices()
+
+    /**
+     * Drop the indices that prevent a successful ALTER TABLE action
+     *
+     * @param string $table  table name
+     * @param array  $fields array of names of the fields affected by the change
+     *
+     * @return array dropped indices definitions
+     */
+    function _dropConflictingIndices($table, $fields)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $dropped = array();
+        $index_names = $this->listTableIndexes($table);
+        if (PEAR::isError($index_names)) {
+            return $index_names;
+        }
+        $db->loadModule('Reverse');
+        $indexes = array();
+        foreach ($index_names as $index_name) {
+        	$idx_def = $db->reverse->getTableIndexDefinition($table, $index_name);
+            if (!PEAR::isError($idx_def)) {
+                $indexes[$index_name] = $idx_def;
+            }
+        }
+        foreach ($fields as $field_name) {
+            foreach ($indexes as $index_name => $index) {
+                if (!isset($dropped[$index_name]) && array_key_exists($field_name, $index['fields'])) {
+                    $dropped[$index_name] = $index;
+                    $result = $this->dropIndex($table, $index_name);
+                    if (PEAR::isError($result)) {
+                        return $result;
+                    }
+                }
+            }
+        }
+
+        return $dropped;
+    }
+
+    // }}}
+    // {{{ _dropConflictingConstraints()
+
+    /**
+     * Drop the constraints that prevent a successful ALTER TABLE action
+     *
+     * @param string $table  table name
+     * @param array  $fields array of names of the fields affected by the change
+     *
+     * @return array dropped constraints definitions
+     */
+    function _dropConflictingConstraints($table, $fields)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $dropped = array();
+        $constraint_names = $this->listTableConstraints($table);
+        if (PEAR::isError($constraint_names)) {
+            return $constraint_names;
+        }
+        $db->loadModule('Reverse');
+        $constraints = array();
+        foreach ($constraint_names as $constraint_name) {
+        	$cons_def = $db->reverse->getTableConstraintDefinition($table, $constraint_name);
+            if (!PEAR::isError($cons_def)) {
+                $constraints[$constraint_name] = $cons_def;
+            }
+        }
+        foreach ($fields as $field_name) {
+            foreach ($constraints as $constraint_name => $constraint) {
+                if (!isset($dropped[$constraint_name]) && array_key_exists($field_name, $constraint['fields'])) {
+                    $dropped[$constraint_name] = $constraint;
+                    $result = $this->dropConstraint($table, $constraint_name);
+                    if (PEAR::isError($result)) {
+                        return $result;
+                    }
+                }
+            }
+            // also drop implicit DEFAULT constraints
+            $default = $this->_getTableFieldDefaultConstraint($table, $field_name);
+            if (!PEAR::isError($default) && !empty($default)) {
+                $result = $this->dropConstraint($table, $default);
+                if (PEAR::isError($result)) {
+                    return $result;
+                }
+            }
+        }
+
+        return $dropped;
+    }
+
+    // }}}
+    // {{{ _getTableFieldDefaultConstraint()
+
+    /**
+     * Get the default constraint for a table field
+     *
+     * @param string $table name of table that should be used in method
+     * @param string $field name of field that should be used in method
+     *
+     * @return mixed name of default constraint on success, a MDB2 error on failure
+     * @access private
+     */
+    function _getTableFieldDefaultConstraint($table, $field)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $table = $db->quoteIdentifier($table, true);
+        $field = $db->quote($field, 'text');
+        $query = "SELECT OBJECT_NAME(syscolumns.cdefault)
+                    FROM syscolumns
+                   WHERE syscolumns.id = object_id('$table')
+                     AND syscolumns.name = $field
+                     AND syscolumns.cdefault <> 0";
+        return $db->queryOne($query);
+    }
+
+    // }}}
+    // {{{ listTables()
+
+    /**
+     * list all tables in the current database
+     *
+     * @return mixed array of table names on success, a MDB2 error on failure
+     * @access public
+     */
+    function listTables()
+    {
+        $db = $this->getDBInstance();
+
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $query = 'EXEC sp_tables @table_type = "\'TABLE\'"';
+        $table_names = $db->queryCol($query, null, 2);
+        if (PEAR::isError($table_names)) {
+            return $table_names;
+        }
+        $result = array();
+        foreach ($table_names as $table_name) {
+            if (!$this->_fixSequenceName($table_name, true)) {
+                $result[] = $table_name;
+            }
+        }
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            $result = array_map(($db->options['field_case'] == CASE_LOWER ?
+                        'strtolower' : 'strtoupper'), $result);
+        }
+        return $result;
+    }
+
+    // }}}
+    // {{{ listTableFields()
+
+    /**
+     * list all fields in a table in the current database
+     *
+     * @param string $table name of table that should be used in method
+     *
+     * @return mixed array of field names on success, a MDB2 error on failure
+     * @access public
+     */
+    function listTableFields($table)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $table = $db->quoteIdentifier($table, true);
+        $columns = $db->queryCol("SELECT c.name
+                                    FROM syscolumns c
+                               LEFT JOIN sysobjects o ON c.id = o.id
+                                   WHERE o.name = '$table'");
+        if (PEAR::isError($columns)) {
+            return $columns;
+        }
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            $columns = array_map(($db->options['field_case'] == CASE_LOWER ? 'strtolower' : 'strtoupper'), $columns);
+        }
+        return $columns;
+    }
+
+    // }}}
+    // {{{ listTableIndexes()
+
+    /**
+     * list all indexes in a table
+     *
+     * @param string $table name of table that should be used in method
+     *
+     * @return mixed array of index names on success, a MDB2 error on failure
+     * @access public
+     */
+    function listTableIndexes($table)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $key_name = 'INDEX_NAME';
+        $pk_name = 'PK_NAME';
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            if ($db->options['field_case'] == CASE_LOWER) {
+                $key_name = strtolower($key_name);
+                $pk_name  = strtolower($pk_name);
+            } else {
+                $key_name = strtoupper($key_name);
+                $pk_name  = strtoupper($pk_name);
+            }
+        }
+        $table = $db->quote($table, 'text');
+        $query = "EXEC sp_statistics @table_name=$table";
+        $indexes = $db->queryCol($query, 'text', $key_name);
+        if (PEAR::isError($indexes)) {
+            return $indexes;
+        }
+        $query = "EXEC sp_pkeys @table_name=$table";
+        $pk_all = $db->queryCol($query, 'text', $pk_name);
+        $result = array();
+        foreach ($indexes as $index) {
+            if (!in_array($index, $pk_all) && ($index = $this->_fixIndexName($index))) {
+                $result[$index] = true;
+            }
+        }
+
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            $result = array_change_key_case($result, $db->options['field_case']);
+        }
+        return array_keys($result);
+    }
+
+    // }}}
+    // {{{ listDatabases()
+
+    /**
+     * list all databases
+     *
+     * @return mixed array of database names on success, a MDB2 error on failure
+     * @access public
+     */
+    function listDatabases()
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $result = $db->queryCol('SELECT name FROM sys.databases');
+        if (PEAR::isError($result)) {
+            return $result;
+        }
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            $result = array_map(($db->options['field_case'] == CASE_LOWER ? 'strtolower' : 'strtoupper'), $result);
+        }
+        return $result;
+    }
+
+    // }}}
+    // {{{ listUsers()
+
+    /**
+     * list all users
+     *
+     * @return mixed array of user names on success, a MDB2 error on failure
+     * @access public
+     */
+    function listUsers()
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $result = $db->queryCol('SELECT DISTINCT loginame FROM master..sysprocesses');
+        if (PEAR::isError($result) || empty($result)) {
+            return $result;
+        }
+        foreach (array_keys($result) as $k) {
+            $result[$k] = trim($result[$k]);
+        }
+        return $result;
+    }
+
+    // }}}
+    // {{{ listFunctions()
+
+    /**
+     * list all functions in the current database
+     *
+     * @return mixed array of function names on success, a MDB2 error on failure
+     * @access public
+     */
+    function listFunctions()
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $query = "SELECT name
+                    FROM sysobjects
+                   WHERE objectproperty(id, N'IsMSShipped') = 0
+                    AND (objectproperty(id, N'IsTableFunction') = 1
+                     OR objectproperty(id, N'IsScalarFunction') = 1)";
+        /*
+        SELECT ROUTINE_NAME
+          FROM INFORMATION_SCHEMA.ROUTINES
+         WHERE ROUTINE_TYPE = 'FUNCTION'
+        */
+        $result = $db->queryCol($query);
+        if (PEAR::isError($result)) {
+            return $result;
+        }
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            $result = array_map(($db->options['field_case'] == CASE_LOWER ? 'strtolower' : 'strtoupper'), $result);
+        }
+        return $result;
+    }
+
+    // }}}
+    // {{{ listTableTriggers()
+
+    /**
+     * list all triggers in the database that reference a given table
+     *
+     * @param string table for which all referenced triggers should be found
+     *
+     * @return mixed array of trigger names on success,  otherwise, false which
+     *               could be a db error if the db is not instantiated or could
+     *               be the results of the error that occured during the
+     *               querying of the sysobject module.
+     * @access public
+     */
+    function listTableTriggers($table = null)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $table = $db->quote($table, 'text');
+        $query = "SELECT o.name
+                    FROM sysobjects o
+                   WHERE xtype = 'TR'
+                     AND OBJECTPROPERTY(o.id, 'IsMSShipped') = 0";
+        if (null !== $table) {
+            $query .= " AND object_name(parent_obj) = $table";
+        }
+
+        $result = $db->queryCol($query);
+        if (PEAR::isError($result)) {
+            return $result;
+        }
+
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE &&
+            $db->options['field_case'] == CASE_LOWER)
+        {
+            $result = array_map(($db->options['field_case'] == CASE_LOWER ?
+                'strtolower' : 'strtoupper'), $result);
+        }
+        return $result;
+    }
+
+    // }}}
+    // {{{ listViews()
+
+    /**
+     * list all views in the current database
+     *
+     * @param string database, the current is default
+     *
+     * @return mixed array of view names on success, a MDB2 error on failure
+     * @access public
+     */
+    function listViews()
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $query = "SELECT name
+                    FROM sysobjects
+                   WHERE xtype = 'V'";
+        /*
+        SELECT *
+          FROM sysobjects
+         WHERE objectproperty(id, N'IsMSShipped') = 0
+           AND objectproperty(id, N'IsView') = 1
+        */
+
+        $result = $db->queryCol($query);
+        if (PEAR::isError($result)) {
+            return $result;
+        }
+
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE &&
+            $db->options['field_case'] == CASE_LOWER)
+        {
+            $result = array_map(($db->options['field_case'] == CASE_LOWER ?
+                          'strtolower' : 'strtoupper'), $result);
+        }
+        return $result;
+    }
+
+    // }}}
+    // {{{ dropIndex()
+
+    /**
+     * drop existing index
+     *
+     * @param string $table name of table that should be used in method
+     * @param string $name  name of the index to be dropped
+     *
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function dropIndex($table, $name)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $table = $db->quoteIdentifier($table, true);
+        $name = $db->quoteIdentifier($db->getIndexName($name), true);
+        return $db->exec("DROP INDEX $table.$name");
+    }
+
+    // }}}
+    // {{{ listTableConstraints()
+
+    /**
+     * list all constraints in a table
+     *
+     * @param string $table name of table that should be used in method
+     *
+     * @return mixed array of constraint names on success, a MDB2 error on failure
+     * @access public
+     */
+    function listTableConstraints($table)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+        $query = "SELECT c.constraint_name
+                    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c
+                   WHERE c.constraint_catalog = DB_NAME()
+                     AND c.table_name = '$table'";
+        $constraints = $db->queryCol($query);
+        if (PEAR::isError($constraints)) {
+            return $constraints;
+        }
+
+        $result = array();
+        foreach ($constraints as $constraint) {
+            $constraint = $this->_fixIndexName($constraint);
+            if (!empty($constraint)) {
+                $result[$constraint] = true;
+            }
+        }
+
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            $result = array_change_key_case($result, $db->options['field_case']);
+        }
+        return array_keys($result);
+    }
+
+    // }}}
+    // {{{
+
+    /**
+     * Create a basic SQL query for a new table creation
+     *
+     * @param string $name   Name of the database that should be created
+     * @param array $fields  Associative array that contains the definition of each field of the new table
+     * @param array $options An associative array of table options
+     *                          Supported options are:
+     *                          'primary'   An array of column names in the array keys
+     *                                      that form the primary key of the table
+     *                          'temporary' If true, creates the table as a temporary table
+     * @return mixed string  The SQL query on success, or MDB2 error on failure
+     * @see createTable()
+     */
+    function _getCreateTableQuery($name, $fields, $options = array())
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        if (!$name) {
+            return $db->raiseError(MDB2_ERROR_CANNOT_CREATE, null, null,
+                'no valid table name specified', __FUNCTION__);
+        }
+        if (empty($fields)) {
+            return $db->raiseError(MDB2_ERROR_CANNOT_CREATE, null, null,
+                'no fields specified for table "'.$name.'"', __FUNCTION__);
+        }
+        $query_fields = $this->getFieldDeclarationList($fields);
+        if (PEAR::isError($query_fields)) {
+            return $query_fields;
+        }
+        /*Removed since you can't get the PK name from Schema here, will result in a redefinition of PK index error
+		if (!empty($options['primary'])) {
+            $query_fields.= ', PRIMARY KEY ('.implode(', ', array_keys($options['primary'])).')';
+        }*/
+
+        $name = $db->quoteIdentifier($name, true);
+        $result = 'CREATE ';
+        if (!empty($options['temporary']) && $options['temporary']) {
+            $result .= $this->_getTemporaryTableQuery() . ' ';
+        }
+        $result .= "TABLE $name ($query_fields)";
+        return $result;
+    }
+
+    // }}}
+    // {{{ createSequence()
+
+    /**
+     * create sequence
+     *
+     * @param string $seq_name name of the sequence to be created
+     * @param string $start    start value of the sequence; default is 1
+     *
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function createSequence($seq_name, $start = 1)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $sequence_name = $db->quoteIdentifier($db->getSequenceName($seq_name), true);
+        $seqcol_name = $db->quoteIdentifier($db->options['seqcol_name'], true);
+        $query = "CREATE TABLE $sequence_name ($seqcol_name " .
+                 "INT PRIMARY KEY CLUSTERED IDENTITY($start,1) NOT NULL)";
+
+        $res = $db->exec($query);
+        if (PEAR::isError($res)) {
+            return $res;
+        }
+
+        $query = "SET IDENTITY_INSERT $sequence_name ON ".
+                 "INSERT INTO $sequence_name ($seqcol_name) VALUES ($start)";
+        $res = $db->exec($query);
+
+        if (!PEAR::isError($res)) {
+            return MDB2_OK;
+        }
+
+        $result = $db->exec("DROP TABLE $sequence_name");
+        if (PEAR::isError($result)) {
+            return $db->raiseError($result, null, null,
+                'could not drop inconsistent sequence table', __FUNCTION__);
+        }
+
+        return $db->raiseError($res, null, null,
+            'could not create sequence table', __FUNCTION__);
+    }
+
+    // }}}
+    // {{{ dropSequence()
+
+    /**
+     * This function drops an existing sequence
+     *
+     * @param string $seq_name name of the sequence to be dropped
+     *
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function dropSequence($seq_name)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $sequence_name = $db->quoteIdentifier($db->getSequenceName($seq_name), true);
+        return $db->exec("DROP TABLE $sequence_name");
+    }
+
+    // }}}
+    // {{{ listSequences()
+
+    /**
+     * list all sequences in the current database
+     *
+     * @return mixed array of sequence names on success, a MDB2 error on failure
+     * @access public
+     */
+    function listSequences()
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $query = "SELECT name FROM sysobjects WHERE xtype = 'U'";
+        $table_names = $db->queryCol($query);
+        if (PEAR::isError($table_names)) {
+            return $table_names;
+        }
+        $result = array();
+        foreach ($table_names as $table_name) {
+            if ($sqn = $this->_fixSequenceName($table_name, true)) {
+                $result[] = $sqn;
+            }
+        }
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            $result = array_map(($db->options['field_case'] == CASE_LOWER ?
+                          'strtolower' : 'strtoupper'), $result);
+        }
+        return $result;
+    }
+
+    // }}}
+    /**
+     * New OPENX method to check table name according to specifications:
+     *  http://msdn.microsoft.com/en-us/library/aa258255(SQL.80).aspx
+     *
+     *  Table names must conform to the rules for identifiers. The combination of owner.table_name 
+     *  must be unique within the database. table_name can contain a maximum of 128 characters, 
+     *  except for local temporary table names (names prefixed with a single number sign (#)) that 
+     *  cannot exceed 116 characters.
+     *
+     * @param string $name table name to check
+     * @return true if name is correct and PEAR error on failure
+     */
+    function validateTableName($name)
+    {
+        // Table name maximum length is 128
+        if (strlen($name) > 128) {
+            return PEAR::raiseError(
+               'SQL Server table names are limited to 128 characters in length');
+        }
+        return true;
+    }
+
+    /**
+     * New OpenX method
+     *
+     * @param string $table
+     * @return array
+     */
+    function getTableStatus($table)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $query      = "exec sp_spaceused '{$table}'";
+        $result     = $db->queryAll($query, null, MDB2_FETCHMODE_ASSOC);
+        if (PEAR::isError($result))
+        {
+            return array();
+        }
+		$result[0]['data_length'] = (isset($result[0]['data'])) ? $result[0]['data'] : 0;
+		$result[0]['data_free'] = (isset($result[0]['unused'])) ? $result[0]['unused'] : 0;
+		//data_length,rows,auto_increment,data_free
+        $query      = "SELECT IDENT_CURRENT ('{$table}') + IDENT_INCR ('{$table}') AS auto_increment";
+        $resultIdentity     = $db->queryAll($query, null, MDB2_FETCHMODE_ASSOC);
+		$result[0]['auto_increment'] = (isset($resultIdentity[0]['auto_increment'])) ? $resultIdentity[0]['auto_increment'] : 0;
+        return $result;
+    }
+
+    function checkTable($tableName)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+        $query  = 'CHECK TABLE '.$tableName;
+        $result = $db->queryRow($query, null, MDB2_FETCHMODE_ASSOC);
+        if (PEAR::isError($result))
+        {
+            return array('msg_text' => $result->getUserInfo());
+        }
+        return $result;
+    }
+
+    /**
+     * New OPENX method to check database name according to specifications:
+     *  Mysql specification: http://dev.mysql.com/doc/refman/4.1/en/identifiers.html
+     *  Mysql specification: http://dev.mysql.com/doc/refman/5.0/en/identifiers.html
+     *  For 4.0, 4.1, 5.0 seem to be the same
+     *
+     * @param string $name database name to check
+     * @return true in name is correct and PEAR error on failure
+     */
+    function validateDatabaseName($name)
+    {
+        return $this->_validateEntityName($name, 'Database');
+    }
+
+    /**
+     * New OPENX method to check entity name according to specifications:
+     *  Mysql specification: http://dev.mysql.com/doc/refman/4.1/en/identifiers.html
+     *  Mysql specification: http://dev.mysql.com/doc/refman/5.0/en/identifiers.html
+     *  For 4.0, 4.1, 5.0 seem to be the same
+     *
+     *  There are some restrictions on the characters that may appear in identifiers:
+     *  - No identifier can contain ASCII 0 (0x00) or a byte with a value of 255.
+     *  - Before MySQL 4.1, identifier quote characters should not be used in identifiers.
+     *  - Database, table, and column names should not end with space characters.
+     *  - Database and table names cannot contain "/", "\", ".", or characters that are not allowed in filenames.
+     *
+     *  Table/Database name maximum length:
+     *  - 64
+     *
+     * @param string $name table name to check
+     * @param string $entityType
+     *
+     * @return true if name is correct and PEAR error on failure
+     */
+    function _validateEntityName($name, $entityType)
+    {
+        // Table name maximum length is 64
+        if (strlen($name) > 64) {
+            return PEAR::raiseError(
+               $entityType.' names are limited to 64 characters in length');
+        }
+
+        // Database, table, and column names should not end with space characters.
+        // Extended for leading and ending spaces
+        if ($name != trim($name)) {
+            return PEAR::raiseError(
+                $entityType.' names should not start or end with space characters');
+        }
+
+        // No identifier can contain ASCII 0 (0x00) or a byte with a value of 255.
+        if (preg_match( '/([\x00\xff])/', $name)) {
+            return PEAR::raiseError(
+               $entityType.' names cannot contain ASCII 0 (0x00) or a byte with a value of 255');
+        }
+
+        //Before MySQL 4.1, identifier quote characters should not be used in identifiers.
+        //we actually extend that and disallow quoting at all
+        if (preg_match( '/(\\\\|\/|\.|\"|\\\'| |\\(|\\)|\\:|\\;)/', $name)) {
+            return PEAR::raiseError(
+                $entityType.' names cannot contain "/", "\\", ".", or characters that are not allowed in filenames');
+        }
+
+        return true;
+    }
+
+    // {{{ createConstraint()
+
+    /**
+     * create a constraint on a table
+     *
+     * @param string    $table         name of the table on which the constraint is to be created
+     * @param string    $name         name of the constraint to be created
+     * @param array     $definition        associative array that defines properties of the constraint to be created.
+     *                                 Currently, only one property named FIELDS is supported. This property
+     *                                 is also an associative with the names of the constraint fields as array
+     *                                 constraints. Each entry of this array is set to another type of associative
+     *                                 array that specifies properties of the constraint that are specific to
+     *                                 each field.
+     *
+     *                                 Example
+     *                                    array(
+     *                                        'fields' => array(
+     *                                            'user_name' => array(),
+     *                                            'last_login' => array()
+     *                                        )
+     *                                    )
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function createConstraint($table, $name, $definition)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+        $table = $db->quoteIdentifier($table, true);
+        $name = $db->quoteIdentifier($db->getIndexName($name), true);
+        if (!empty($definition['primary']) && empty($definition['unique'])) {
+	        $query = "ALTER TABLE $table ADD CONSTRAINT $name";
+	        if (!empty($definition['primary'])) {
+	            $query.= ' PRIMARY KEY';
+	        } elseif (!empty($definition['unique'])) {
+	            $query.= ' UNIQUE';
+	        }
+        } elseif (!empty($definition['unique'])) {
+	        $query = "CREATE UNIQUE NONCLUSTERED INDEX $name ON $table";
+        } elseif (!empty($definition['foreign'])) {
+            $query = "ALTER TABLE $table ADD CONSTRAINT $name FOREIGN KEY";
+        }
+        $fields = array();
+        foreach (array_keys($definition['fields']) as $field) {
+            $fields[] = $db->quoteIdentifier($field, true);
+        }
+        $query .= ' ('. implode(', ', $fields) . ')';
+		//deals with NULL values and UNIQUE indexes, this solution is only available in SQL Server 2008
+		//https://connect.microsoft.com/SQLServer/feedback/ViewFeedback.aspx?FeedbackID=299229
+		if (!empty($definition['unique']) && empty($definition['primary'])) {
+			for($i=0;$i<count($fields);$i++) $fields[$i] .= ' is NOT NULL';
+			$query .= ' WHERE '. implode(' AND ', $fields);
+		}
+        if (!empty($definition['foreign'])) {
+            $query.= ' REFERENCES ' . $db->quoteIdentifier($definition['references']['table'], true);
+            $referenced_fields = array();
+            foreach (array_keys($definition['references']['fields']) as $field) {
+                $referenced_fields[] = $db->quoteIdentifier($field, true);
+            }
+            $query .= ' ('. implode(', ', $referenced_fields) . ')';
+            $query .= $this->_getAdvancedFKOptions($definition);
+        }
+        return $db->exec($query);
+    }
+
+    // }}}
+	
+}
+
+// }}}
+?>
diff -urNb ec-cube-iis/data/module/MDB2/Driver/Native/sqlsrv.php ec-cube/data/module/MDB2/Driver/Native/sqlsrv.php
--- ec-cube-iis/data/module/MDB2/Driver/Native/sqlsrv.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/module/MDB2/Driver/Native/sqlsrv.php	2012-05-22 10:10:02.000000000 +0900
@@ -0,0 +1,57 @@
+<?php
+// +----------------------------------------------------------------------+
+// | PHP versions 4 and 5                                                 |
+// +----------------------------------------------------------------------+
+// | Copyright (c) 1998-2006 Manuel Lemos, Tomas V.V.Cox,                 |
+// | Stig. S. Bakken, Lukas Smith, Frank M. Kromann                       |
+// | All rights reserved.                                                 |
+// +----------------------------------------------------------------------+
+// | MDB2 is a merge of PEAR DB and Metabases that provides a unified DB  |
+// | API as well as database abstraction for PHP applications.            |
+// | This LICENSE is in the BSD license style.                            |
+// |                                                                      |
+// | Redistribution and use in source and binary forms, with or without   |
+// | modification, are permitted provided that the following conditions   |
+// | are met:                                                             |
+// |                                                                      |
+// | Redistributions of source code must retain the above copyright       |
+// | notice, this list of conditions and the following disclaimer.        |
+// |                                                                      |
+// | Redistributions in binary form must reproduce the above copyright    |
+// | notice, this list of conditions and the following disclaimer in the  |
+// | documentation and/or other materials provided with the distribution. |
+// |                                                                      |
+// | Neither the name of Manuel Lemos, Tomas V.V.Cox, Stig. S. Bakken,    |
+// | Lukas Smith nor the names of his contributors may be used to endorse |
+// | or promote products derived from this software without specific prior|
+// | written permission.                                                  |
+// |                                                                      |
+// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  |
+// | "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    |
+// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    |
+// | FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE      |
+// | REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,          |
+// | INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, |
+// | BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS|
+// |  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  |
+// | AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          |
+// | LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY|
+// | WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE          |
+// | POSSIBILITY OF SUCH DAMAGE.                                          |
+// +----------------------------------------------------------------------+
+// | Author: Lukas Smith <smith@pooteeweet.org>                           |
+// +----------------------------------------------------------------------+
+
+require_once 'MDB2/Driver/Native/Common.php';
+
+/**
+ * MDB2 MSSQL driver for the native module
+ *
+ * @package MDB2
+ * @category Database
+ * @author  Lukas Smith <smith@dybnet.de>
+ */
+class MDB2_Driver_Native_sqlsrv extends MDB2_Driver_Native_Common
+{
+}
+?>
\ No newline at end of file
diff -urNb ec-cube-iis/data/module/MDB2/Driver/Reverse/sqlsrv.php ec-cube/data/module/MDB2/Driver/Reverse/sqlsrv.php
--- ec-cube-iis/data/module/MDB2/Driver/Reverse/sqlsrv.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/module/MDB2/Driver/Reverse/sqlsrv.php	2012-05-22 10:10:02.000000000 +0900
@@ -0,0 +1,653 @@
+<?php
+// +----------------------------------------------------------------------+
+// | PHP versions 4 and 5                                                 |
+// +----------------------------------------------------------------------+
+// | Copyright (c) 1998-2007 Manuel Lemos, Tomas V.V.Cox,                 |
+// | Stig. S. Bakken, Lukas Smith, Frank M. Kromann, Lorenzo Alberton     |
+// | All rights reserved.                                                 |
+// +----------------------------------------------------------------------+
+// | MDB2 is a merge of PEAR DB and Metabases that provides a unified DB  |
+// | API as well as database abstraction for PHP applications.            |
+// | This LICENSE is in the BSD license style.                            |
+// |                                                                      |
+// | Redistribution and use in source and binary forms, with or without   |
+// | modification, are permitted provided that the following conditions   |
+// | are met:                                                             |
+// |                                                                      |
+// | Redistributions of source code must retain the above copyright       |
+// | notice, this list of conditions and the following disclaimer.        |
+// |                                                                      |
+// | Redistributions in binary form must reproduce the above copyright    |
+// | notice, this list of conditions and the following disclaimer in the  |
+// | documentation and/or other materials provided with the distribution. |
+// |                                                                      |
+// | Neither the name of Manuel Lemos, Tomas V.V.Cox, Stig. S. Bakken,    |
+// | Lukas Smith nor the names of his contributors may be used to endorse |
+// | or promote products derived from this software without specific prior|
+// | written permission.                                                  |
+// |                                                                      |
+// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  |
+// | "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    |
+// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    |
+// | FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE      |
+// | REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,          |
+// | INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, |
+// | BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS|
+// |  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  |
+// | AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          |
+// | LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY|
+// | WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE          |
+// | POSSIBILITY OF SUCH DAMAGE.                                          |
+// +----------------------------------------------------------------------+
+// | Authors: Lukas Smith <smith@pooteeweet.org>                          |
+// |          Lorenzo Alberton <l.alberton@quipo.it>                      |
+// +----------------------------------------------------------------------+
+
+require_once 'MDB2/Driver/Reverse/Common.php';
+
+/**
+ * MDB2 MSSQL driver for the schema reverse engineering module
+ *
+ * @package MDB2
+ * @category Database
+ * @author  Lukas Smith <smith@dybnet.de>
+ * @author  Lorenzo Alberton <l.alberton@quipo.it>
+ */
+class MDB2_Driver_Reverse_sqlsrv extends MDB2_Driver_Reverse_Common
+{
+    // {{{ getTableFieldDefinition()
+
+    /**
+     * Get the structure of a field into an array
+     *
+     * @param string $table_name name of table that should be used in method
+     * @param string $field_name name of field that should be used in method
+     * @return mixed data array on success, a MDB2 error on failure
+     * @access public
+     */
+    function getTableFieldDefinition($table_name, $field_name)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $result = $db->loadModule('Datatype', null, true);
+        if (PEAR::isError($result)) {
+            return $result;
+        }
+
+        list($schema, $table) = $this->splitTableSchema($table_name);
+
+        $table = $db->quoteIdentifier($table, true);
+        $fldname = $db->quoteIdentifier($field_name, true);
+
+        $query = "SELECT t.table_name,
+                         c.column_name 'name',
+                         c.data_type 'type',
+                         CASE c.is_nullable WHEN 'YES' THEN 1 ELSE 0 END AS 'is_nullable',
+                         c.column_default,
+                         c.character_maximum_length 'length',
+                         c.numeric_precision,
+                         c.numeric_scale,
+                         c.character_set_name,
+                         c.collation_name
+                    FROM INFORMATION_SCHEMA.TABLES t,
+                         INFORMATION_SCHEMA.COLUMNS c
+                   WHERE t.table_name = c.table_name
+                     AND t.table_name = '$table'
+                     AND c.column_name = '$fldname'";
+        if (!empty($schema)) {
+            $query .= " AND t.table_schema = '" .$db->quoteIdentifier($schema, true) ."'";
+        }
+        $query .= ' ORDER BY t.table_name';
+        $column = $db->queryRow($query, null, MDB2_FETCHMODE_ASSOC);
+        if (PEAR::isError($column)) {
+            return $column;
+        }
+        if (empty($column)) {
+            return $db->raiseError(MDB2_ERROR_NOT_FOUND, null, null,
+                'it was not specified an existing table column', __FUNCTION__);
+        }
+
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            if ($db->options['field_case'] == CASE_LOWER) {
+                $column['name'] = strtolower($column['name']);
+            } else {
+                $column['name'] = strtoupper($column['name']);
+            }
+        } else {
+            $column = array_change_key_case($column, $db->options['field_case']);
+        }
+        $mapped_datatype = $db->datatype->mapNativeDatatype($column);
+        if (PEAR::isError($mapped_datatype)) {
+            return $mapped_datatype;
+        }
+        list($types, $length, $unsigned, $fixed) = $mapped_datatype;
+        $notnull = true;
+        if ($column['is_nullable']) {
+            $notnull = false;
+        }
+        $default = false;
+        if (array_key_exists('column_default', $column)) {
+            $default = $column['column_default'];
+            if ((null === $default) && $notnull) {
+                $default = '';
+            } elseif (strlen($default) > 4
+                   && substr($default, 0, 1) == '('
+                   &&  substr($default, -1, 1) == ')'
+            ) {
+                //mssql wraps the default value in parentheses: "((1234))", "(NULL)"
+                $default = trim($default, '()');
+                if ($default == 'NULL') {
+                    $default = null;
+                }
+            }
+        }
+        $definition[0] = array(
+            'notnull' => $notnull,
+            'nativetype' => preg_replace('/^([a-z]+)[^a-z].*/i', '\\1', $column['type'])
+        );
+        if (null !== $length) {
+            $definition[0]['length'] = $length;
+        }
+        if (null !== $unsigned) {
+            $definition[0]['unsigned'] = $unsigned;
+        }
+        if (null !== $fixed) {
+            $definition[0]['fixed'] = $fixed;
+        }
+        if ($default !== false) {
+            $definition[0]['default'] = $default;
+        }
+        foreach ($types as $key => $type) {
+            $definition[$key] = $definition[0];
+            if ($type == 'clob' || $type == 'blob') {
+                unset($definition[$key]['default']);
+            }
+            $definition[$key]['type'] = $type;
+            $definition[$key]['mdb2type'] = $type;
+        }
+        return $definition;
+    }
+
+    // }}}
+    // {{{ getTableIndexDefinition()
+
+    /**
+     * Get the structure of an index into an array
+     *
+     * @param string $table_name name of table that should be used in method
+     * @param string $index_name name of index that should be used in method
+     * @return mixed data array on success, a MDB2 error on failure
+     * @access public
+     */
+    function getTableIndexDefinition($table_name, $index_name)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        list($schema, $table) = $this->splitTableSchema($table_name);
+
+        $table = $db->quoteIdentifier($table, true);
+        //$idxname = $db->quoteIdentifier($index_name, true);
+
+        $query = "SELECT OBJECT_NAME(i.id) tablename,
+                         i.name indexname,
+                         c.name field_name,
+                         CASE INDEXKEY_PROPERTY(i.id, i.indid, ik.keyno, 'IsDescending')
+                           WHEN 1 THEN 'DESC' ELSE 'ASC'
+                         END 'collation',
+                         ik.keyno 'position'
+                    FROM sysindexes i
+                    JOIN sysindexkeys ik ON ik.id = i.id AND ik.indid = i.indid
+                    JOIN syscolumns c ON c.id = ik.id AND c.colid = ik.colid
+                   WHERE OBJECT_NAME(i.id) = '$table'
+                     AND i.name = '%s'
+                     AND NOT EXISTS (
+                            SELECT *
+                              FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE k
+                             WHERE k.table_name = OBJECT_NAME(i.id)
+                               AND k.constraint_name = i.name";
+        if (!empty($schema)) {
+            $query .= " AND k.table_schema = '" .$db->quoteIdentifier($schema, true) ."'";
+        }
+        $query .= ')
+                ORDER BY tablename, indexname, ik.keyno';
+
+        $index_name_mdb2 = $db->getIndexName($index_name);
+        $result = $db->queryRow(sprintf($query, $index_name_mdb2));
+        if (!PEAR::isError($result) && (null !== $result)) {
+            // apply 'idxname_format' only if the query succeeded, otherwise
+            // fallback to the given $index_name, without transformation
+            $index_name = $index_name_mdb2;
+        }
+        $result = $db->query(sprintf($query, $index_name));
+        if (PEAR::isError($result)) {
+            return $result;
+        }
+
+        $definition = array();
+        while (is_array($row = $result->fetchRow(MDB2_FETCHMODE_ASSOC))) {
+            $column_name = $row['field_name'];
+            if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+                if ($db->options['field_case'] == CASE_LOWER) {
+                    $column_name = strtolower($column_name);
+                } else {
+                    $column_name = strtoupper($column_name);
+                }
+            }
+            $definition['fields'][$column_name] = array(
+                'position' => (int)$row['position'],
+            );
+            if (!empty($row['collation'])) {
+                $definition['fields'][$column_name]['sorting'] = ($row['collation'] == 'ASC'
+                    ? 'ascending' : 'descending');
+            }
+        }
+        $result->free();
+        if (empty($definition['fields'])) {
+            return $db->raiseError(MDB2_ERROR_NOT_FOUND, null, null,
+                'it was not specified an existing table index', __FUNCTION__);
+        }
+        return $definition;
+    }
+
+    // }}}
+    // {{{ getTableConstraintDefinition()
+
+    /**
+     * Get the structure of a constraint into an array
+     *
+     * @param string $table_name      name of table that should be used in method
+     * @param string $constraint_name name of constraint that should be used in method
+     * @return mixed data array on success, a MDB2 error on failure
+     * @access public
+     */
+    function getTableConstraintDefinition($table_name, $constraint_name)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        list($schema, $table) = $this->splitTableSchema($table_name);
+
+        $table = $db->quoteIdentifier($table, true);
+        $query = "SELECT k.table_name,
+                         k.column_name field_name,
+                         CASE c.constraint_type WHEN 'PRIMARY KEY' THEN 1 ELSE 0 END 'primary',
+                         CASE c.constraint_type WHEN 'UNIQUE' THEN 1 ELSE 0 END 'unique',
+                         CASE c.constraint_type WHEN 'FOREIGN KEY' THEN 1 ELSE 0 END 'foreign',
+                         CASE c.constraint_type WHEN 'CHECK' THEN 1 ELSE 0 END 'check',
+                         CASE c.is_deferrable WHEN 'NO' THEN 0 ELSE 1 END 'deferrable',
+                         CASE c.initially_deferred WHEN 'NO' THEN 0 ELSE 1 END 'initiallydeferred',
+                         rc.match_option 'match',
+                		 rc.update_rule 'onupdate',
+                         rc.delete_rule 'ondelete',
+                         kcu.table_name 'references_table',
+                         kcu.column_name 'references_field',
+                         k.ordinal_position 'field_position'
+                    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE k
+                    LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS c
+                      ON k.table_name = c.table_name
+                     AND k.table_schema = c.table_schema
+                     AND k.table_catalog = c.table_catalog
+                     AND k.constraint_catalog = c.constraint_catalog
+                     AND k.constraint_name = c.constraint_name
+               LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc
+                      ON rc.constraint_schema = c.constraint_schema
+                     AND rc.constraint_catalog = c.constraint_catalog
+                     AND rc.constraint_name = c.constraint_name
+               LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu
+                      ON rc.unique_constraint_schema = kcu.constraint_schema
+                     AND rc.unique_constraint_catalog = kcu.constraint_catalog
+                     AND rc.unique_constraint_name = kcu.constraint_name
+					 AND k.ordinal_position = kcu.ordinal_position
+                   WHERE k.constraint_catalog = DB_NAME()
+                     AND k.table_name = '$table'
+                     AND k.constraint_name = '%s'";
+        if (!empty($schema)) {
+            $query .= " AND k.table_schema = '" .$db->quoteIdentifier($schema, true) ."'";
+        }
+        $query .= ' ORDER BY k.constraint_name,
+                             k.ordinal_position';
+
+        $constraint_name_mdb2 = $db->getIndexName($constraint_name);
+        $result = $db->queryRow(sprintf($query, $constraint_name_mdb2));
+        if (!PEAR::isError($result) && (null !== $result)) {
+            // apply 'idxname_format' only if the query succeeded, otherwise
+            // fallback to the given $index_name, without transformation
+            $constraint_name = $constraint_name_mdb2;
+        }
+        $result = $db->query(sprintf($query, $constraint_name));
+        if (PEAR::isError($result)) {
+            return $result;
+        }
+
+        $definition = array(
+            'fields' => array()
+        );
+        while (is_array($row = $result->fetchRow(MDB2_FETCHMODE_ASSOC))) {
+            $row = array_change_key_case($row, CASE_LOWER);
+            $column_name = $row['field_name'];
+            if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+                if ($db->options['field_case'] == CASE_LOWER) {
+                    $column_name = strtolower($column_name);
+                } else {
+                    $column_name = strtoupper($column_name);
+                }
+            }
+            $definition['fields'][$column_name] = array(
+                'position' => (int)$row['field_position']
+            );
+            if ($row['foreign']) {
+                $ref_column_name = $row['references_field'];
+                if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+                    if ($db->options['field_case'] == CASE_LOWER) {
+                        $ref_column_name = strtolower($ref_column_name);
+                    } else {
+                        $ref_column_name = strtoupper($ref_column_name);
+                    }
+                }
+                $definition['references']['table'] = $row['references_table'];
+                $definition['references']['fields'][$ref_column_name] = array(
+                    'position' => (int)$row['field_position']
+                );
+            }
+            //collation?!?
+            /*
+            if (!empty($row['collation'])) {
+                $definition['fields'][$column_name]['sorting'] = ($row['collation'] == 'ASC'
+                    ? 'ascending' : 'descending');
+            }
+            */
+            $lastrow = $row;
+            // otherwise $row is no longer usable on exit from loop
+        }
+        $result->free();
+        if (empty($definition['fields'])) {
+            return $db->raiseError(MDB2_ERROR_NOT_FOUND, null, null,
+                $constraint_name . ' is not an existing table constraint', __FUNCTION__);
+        }
+
+        $definition['primary'] = (boolean)$lastrow['primary'];
+        $definition['unique']  = (boolean)$lastrow['unique'];
+        $definition['foreign'] = (boolean)$lastrow['foreign'];
+        $definition['check']   = (boolean)$lastrow['check'];
+        $definition['deferrable'] = (boolean)$lastrow['deferrable'];
+        $definition['initiallydeferred'] = (boolean)$lastrow['initiallydeferred'];
+        $definition['onupdate'] = $lastrow['onupdate'];
+        $definition['ondelete'] = $lastrow['ondelete'];
+        $definition['match']    = $lastrow['match'];
+
+        return $definition;
+    }
+
+    // }}}
+    // {{{ getTriggerDefinition()
+
+    /**
+     * Get the structure of a trigger into an array
+     *
+     * EXPERIMENTAL
+     *
+     * WARNING: this function is experimental and may change the returned value
+     * at any time until labelled as non-experimental
+     *
+     * @param string    $trigger    name of trigger that should be used in method
+     * @return mixed data array on success, a MDB2 error on failure
+     * @access public
+     */
+    function getTriggerDefinition($trigger)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $query = "SELECT sys1.name trigger_name,
+                         sys2.name table_name,
+                         c.text trigger_body,
+                         c.encrypted is_encripted,
+                         CASE
+                           WHEN OBJECTPROPERTY(sys1.id, 'ExecIsTriggerDisabled') = 1
+                           THEN 0 ELSE 1
+                         END trigger_enabled,
+                         CASE
+                           WHEN OBJECTPROPERTY(sys1.id, 'ExecIsInsertTrigger') = 1
+                           THEN 'INSERT'
+                           WHEN OBJECTPROPERTY(sys1.id, 'ExecIsUpdateTrigger') = 1
+                           THEN 'UPDATE'
+                           WHEN OBJECTPROPERTY(sys1.id, 'ExecIsDeleteTrigger') = 1
+                           THEN 'DELETE'
+                         END trigger_event,
+                         CASE WHEN OBJECTPROPERTY(sys1.id, 'ExecIsInsteadOfTrigger') = 1
+                           THEN 'INSTEAD OF' ELSE 'AFTER'
+                         END trigger_type,
+                         '' trigger_comment
+                    FROM sysobjects sys1
+                    JOIN sysobjects sys2 ON sys1.parent_obj = sys2.id
+                    JOIN syscomments c ON sys1.id = c.id
+                   WHERE sys1.xtype = 'TR'
+                     AND sys1.name = ". $db->quote($trigger, 'text');
+
+        $types = array(
+            'trigger_name'    => 'text',
+            'table_name'      => 'text',
+            'trigger_body'    => 'text',
+            'trigger_type'    => 'text',
+            'trigger_event'   => 'text',
+            'trigger_comment' => 'text',
+            'trigger_enabled' => 'boolean',
+            'is_encripted'    => 'boolean',
+        );
+
+        $def = $db->queryRow($query, $types, MDB2_FETCHMODE_ASSOC);
+        if (PEAR::isError($def)) {
+            return $def;
+        }
+        $trg_body = $db->queryCol('EXEC sp_helptext '. $db->quote($trigger, 'text'), 'text');
+        if (!PEAR::isError($trg_body)) {
+            $def['trigger_body'] = implode(' ', $trg_body);
+        }
+        return $def;
+    }
+
+    // }}}
+    // {{{ tableInfo()
+
+    /**
+     * Returns information about a table or a result set
+     *
+     * NOTE: only supports 'table' and 'flags' if <var>$result</var>
+     * is a table name.
+     *
+     * @param object|string  $result  MDB2_result object from a query or a
+     *                                 string containing the name of a table.
+     *                                 While this also accepts a query result
+     *                                 resource identifier, this behavior is
+     *                                 deprecated.
+     * @param int            $mode    a valid tableInfo mode
+     *
+     * @return array  an associative array with the information requested.
+     *                 A MDB2_Error object on failure.
+     *
+     * @see MDB2_Driver_Common::tableInfo()
+     */
+    function tableInfo($result, $mode = null)
+    {
+        if (is_string($result)) {
+           return parent::tableInfo($result, $mode);
+        }
+
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        $resource = MDB2::isResultCommon($result) ? $result->getResource() : $result;
+        if (!is_resource($resource)) {
+            return $db->raiseError(MDB2_ERROR_NEED_MORE_DATA, null, null,
+                'Could not generate result resource', __FUNCTION__);
+        }
+
+        if ($db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            if ($db->options['field_case'] == CASE_LOWER) {
+                $case_func = 'strtolower';
+            } else {
+                $case_func = 'strtoupper';
+            }
+        } else {
+            $case_func = 'strval';
+        }
+
+        $meta = @sqlsrv_field_metadata($resource);
+        $count = count($meta);
+        $res   = array();
+
+        if ($mode) {
+            $res['num_fields'] = $count;
+        }
+
+        $db->loadModule('Datatype', null, true);
+        for ($i = 0; $i < $count; $i++) {
+            $res[$i] = array(
+                'table' => '',
+                'name'              => $case_func($meta[$i]['Name']),
+                'type'              => $meta[$i]['Type'],
+                'length'            => $meta[$i]['Size'],
+                'numeric_precision' => $meta[$i]['Precision'],
+                'numeric_scale'     => $meta[$i]['Scale'],
+                'flags'             => ''
+            );
+            $mdb2type_info = $db->datatype->mapNativeDatatype($res[$i]);
+            if (PEAR::isError($mdb2type_info)) {
+               return $mdb2type_info;
+            }
+            $res[$i]['mdb2type'] = $mdb2type_info[0][0];
+            if ($mode & MDB2_TABLEINFO_ORDER) {
+                $res['order'][$res[$i]['name']] = $i;
+            }
+            if ($mode & MDB2_TABLEINFO_ORDERTABLE) {
+                $res['ordertable'][$res[$i]['table']][$res[$i]['name']] = $i;
+            }
+        }
+
+        return $res;
+    }
+
+    // }}}
+    // {{{ _mssql_field_flags()
+
+    /**
+     * Get a column's flags
+     *
+     * Supports "not_null", "primary_key",
+     * "auto_increment" (mssql identity), "timestamp" (mssql timestamp),
+     * "unique_key" (mssql unique index, unique check or primary_key) and
+     * "multiple_key" (multikey index)
+     *
+     * mssql timestamp is NOT similar to the mysql timestamp so this is maybe
+     * not useful at all - is the behaviour of mysql_field_flags that primary
+     * keys are alway unique? is the interpretation of multiple_key correct?
+     *
+     * @param string $table   the table name
+     * @param string $column  the field name
+     *
+     * @return string  the flags
+     *
+     * @access protected
+     * @author Joern Barthel <j_barthel@web.de>
+     */
+    function _mssql_field_flags($table, $column)
+    {
+        $db = $this->getDBInstance();
+        if (PEAR::isError($db)) {
+            return $db;
+        }
+
+        static $tableName = null;
+        static $flags = array();
+
+        if ($table != $tableName) {
+
+            $flags = array();
+            $tableName = $table;
+
+            // get unique and primary keys
+            $res = $db->queryAll("EXEC SP_HELPINDEX[$table]", null, MDB2_FETCHMODE_ASSOC);
+
+            foreach ($res as $val) {
+                $val = array_change_key_case($val, CASE_LOWER);
+                $keys = explode(', ', $val['index_keys']);
+
+                if (sizeof($keys) > 1) {
+                    foreach ($keys as $key) {
+                        $this->_add_flag($flags[$key], 'multiple_key');
+                    }
+                }
+
+                if (strpos($val['index_description'], 'primary key')) {
+                    foreach ($keys as $key) {
+                        $this->_add_flag($flags[$key], 'primary_key');
+                    }
+                } elseif (strpos($val['index_description'], 'unique')) {
+                    foreach ($keys as $key) {
+                        $this->_add_flag($flags[$key], 'unique_key');
+                    }
+                }
+            }
+
+            // get auto_increment, not_null and timestamp
+            $res = $db->queryAll("EXEC SP_COLUMNS[$table]", null, MDB2_FETCHMODE_ASSOC);
+
+            foreach ($res as $val) {
+                $val = array_change_key_case($val, CASE_LOWER);
+                if ($val['nullable'] == '0') {
+                    $this->_add_flag($flags[$val['column_name']], 'not_null');
+                }
+                if (strpos($val['type_name'], 'identity')) {
+                    $this->_add_flag($flags[$val['column_name']], 'auto_increment');
+                }
+                if (strpos($val['type_name'], 'timestamp')) {
+                    $this->_add_flag($flags[$val['column_name']], 'timestamp');
+                }
+            }
+        }
+
+        if (!empty($flags[$column])) {
+            return(implode(' ', $flags[$column]));
+        }
+        return '';
+    }
+
+    // }}}
+    // {{{ _add_flag()
+
+    /**
+     * Adds a string to the flags array if the flag is not yet in there
+     * - if there is no flag present the array is created
+     *
+     * @param array  &$array  the reference to the flag-array
+     * @param string $value   the flag value
+     *
+     * @return void
+     *
+     * @access protected
+     * @author Joern Barthel <j_barthel@web.de>
+     */
+    function _add_flag(&$array, $value)
+    {
+        if (!is_array($array)) {
+            $array = array($value);
+        } elseif (!in_array($value, $array)) {
+            array_push($array, $value);
+        }
+    }
+
+    // }}}
+}
+?>
\ No newline at end of file
diff -urNb ec-cube-iis/data/module/MDB2/Driver/sqlsrv.php ec-cube/data/module/MDB2/Driver/sqlsrv.php
--- ec-cube-iis/data/module/MDB2/Driver/sqlsrv.php	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/data/module/MDB2/Driver/sqlsrv.php	2012-05-22 10:10:02.000000000 +0900
@@ -0,0 +1,1172 @@
+<?php
+// vim: set et ts=4 sw=4 fdm=marker:
+// +----------------------------------------------------------------------+
+// | PHP versions 4 and 5                                                 |
+// +----------------------------------------------------------------------+
+// | Copyright (c) 1998-2008 Manuel Lemos, Tomas V.V.Cox,                 |
+// | Stig. S. Bakken, Lukas Smith, Frank M. Kromann                       |
+// | All rights reserved.                                                 |
+// +----------------------------------------------------------------------+
+// | MDB2 is a merge of PEAR DB and Metabases that provides a unified DB  |
+// | API as well as database abstraction for PHP applications.            |
+// | This LICENSE is in the BSD license style.                            |
+// |                                                                      |
+// | Redistribution and use in source and binary forms, with or without   |
+// | modification, are permitted provided that the following conditions   |
+// | are met:                                                             |
+// |                                                                      |
+// | Redistributions of source code must retain the above copyright       |
+// | notice, this list of conditions and the following disclaimer.        |
+// |                                                                      |
+// | Redistributions in binary form must reproduce the above copyright    |
+// | notice, this list of conditions and the following disclaimer in the  |
+// | documentation and/or other materials provided with the distribution. |
+// |                                                                      |
+// | Neither the name of Manuel Lemos, Tomas V.V.Cox, Stig. S. Bakken,    |
+// | Lukas Smith nor the names of his contributors may be used to endorse |
+// | or promote products derived from this software without specific prior|
+// | written permission.                                                  |
+// |                                                                      |
+// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  |
+// | "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    |
+// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    |
+// | FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE      |
+// | REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,          |
+// | INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, |
+// | BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS|
+// |  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  |
+// | AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          |
+// | LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY|
+// | WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE          |
+// | POSSIBILITY OF SUCH DAMAGE.                                          |
+// +----------------------------------------------------------------------+
+// | Author: Frank M. Kromann <frank@kromann.info>                        |
+// +----------------------------------------------------------------------+
+// {{{ Class MDB2_Driver_sqlsrv
+/**
+ * MDB2 MSSQL Server (native) driver
+ *
+ * @package MDB2
+ * @category Database
+ */
+class MDB2_Driver_sqlsrv extends MDB2_Driver_Common
+{
+    // {{{ properties
+
+    var $string_quoting = array('start' => "'", 'end' => "'", 'escape' => "'", 'escape_pattern' => false);
+
+    var $identifier_quoting = array('start' => '[', 'end' => ']', 'escape' => ']');
+	
+	var $connection = null;
+
+    // }}}
+    // {{{ constructor
+
+    /**
+     * Constructor
+     */
+    function __construct()
+    {
+        parent::__construct();
+
+        $this->phptype = 'sqlsrv';
+        $this->dbsyntax = 'sqlsrv';
+
+        $this->supported['sequences'] = 'emulated';
+        $this->supported['indexes'] = true;
+        $this->supported['affected_rows'] = true;
+        $this->supported['summary_functions'] = true;
+        $this->supported['transactions'] = true;
+        $this->supported['order_by_text'] = true;
+        $this->supported['savepoints'] = false;
+        $this->supported['current_id'] = 'emulated';
+        $this->supported['limit_queries'] = 'emulated';
+        $this->supported['LOBs'] = true;
+        $this->supported['replace'] = 'emulated';
+        $this->supported['sub_selects'] = true;
+        $this->supported['triggers'] = true;
+        $this->supported['auto_increment'] = true;
+        $this->supported['primary_key'] = true;
+        $this->supported['result_introspection'] = true;
+        $this->supported['prepared_statements'] = 'emulated';
+        $this->supported['identifier_quoting'] = false;
+        $this->supported['pattern_escaping'] = true;
+        $this->supported['new_link'] = true;
+
+        $this->options['DBA_username'] = false;
+        $this->options['DBA_password'] = false;
+        $this->options['database_device'] = false;
+        $this->options['database_size'] = false;
+        $this->options['max_identifiers_length'] = 128; // MS Access: 64
+    }
+
+    // }}}
+    // {{{ errorInfo()
+
+    /**
+     * This method is used to collect information about an error
+     *
+     * @param integer $error
+     * @return array
+     * @access public
+     */
+    function errorInfo($error = null, $connection = null)
+    {
+        if (null === $connection) {
+			if (!$this->connection) {
+                $this->connect();
+            }
+            $connection = $this->connection;
+        }
+
+        $native_code = null;
+        $native_msg  = null;
+        if ($connection) {
+			$retErrors = sqlsrv_errors(SQLSRV_ERR_ALL);  
+			if ($retErrors !== null) {
+				foreach ($retErrors as $arrError) {
+					$native_msg .= "SQLState: ".$arrError[ 'SQLSTATE']."\n";  
+					$native_msg .= "Error Code: ".$arrError[ 'code']."\n";  
+					$native_msg .= "Message: ".$arrError[ 'message']."\n";  
+					$native_code = $arrError[ 'code'];
+				}  
+			}			
+        }
+        if (null === $error) {
+            static $ecode_map;
+            if (empty($ecode_map)) {
+                $ecode_map = array(
+                    102   => MDB2_ERROR_SYNTAX,
+                    110   => MDB2_ERROR_VALUE_COUNT_ON_ROW,
+                    155   => MDB2_ERROR_NOSUCHFIELD,
+                    156   => MDB2_ERROR_SYNTAX,
+                    170   => MDB2_ERROR_SYNTAX,
+                    207   => MDB2_ERROR_NOSUCHFIELD,
+                    208   => MDB2_ERROR_NOSUCHTABLE,
+                    245   => MDB2_ERROR_INVALID_NUMBER,
+                    319   => MDB2_ERROR_SYNTAX,
+                    321   => MDB2_ERROR_NOSUCHFIELD,
+                    325   => MDB2_ERROR_SYNTAX,
+                    336   => MDB2_ERROR_SYNTAX,
+                    515   => MDB2_ERROR_CONSTRAINT_NOT_NULL,
+                    547   => MDB2_ERROR_CONSTRAINT,
+                    911   => MDB2_ERROR_NOT_FOUND,
+                    1018  => MDB2_ERROR_SYNTAX,
+                    1035  => MDB2_ERROR_SYNTAX,
+                    1801  => MDB2_ERROR_ALREADY_EXISTS,
+                    1913  => MDB2_ERROR_ALREADY_EXISTS,
+                    2209  => MDB2_ERROR_SYNTAX,
+                    2223  => MDB2_ERROR_SYNTAX,
+                    2248  => MDB2_ERROR_SYNTAX,
+                    2256  => MDB2_ERROR_SYNTAX,
+                    2257  => MDB2_ERROR_SYNTAX,
+                    2627  => MDB2_ERROR_CONSTRAINT,
+                    2714  => MDB2_ERROR_ALREADY_EXISTS,
+                    3607  => MDB2_ERROR_DIVZERO,
+                    3701  => MDB2_ERROR_NOSUCHTABLE,
+                    7630  => MDB2_ERROR_SYNTAX,
+                    8134  => MDB2_ERROR_DIVZERO,
+                    9303  => MDB2_ERROR_SYNTAX,
+                    9317  => MDB2_ERROR_SYNTAX,
+                    9318  => MDB2_ERROR_SYNTAX,
+                    9331  => MDB2_ERROR_SYNTAX,
+                    9332  => MDB2_ERROR_SYNTAX,
+                    15253 => MDB2_ERROR_SYNTAX,
+                );
+            }
+            if (isset($ecode_map[$native_code])) {
+                if ($native_code == 3701
+                    && preg_match('/Cannot drop the index/i', $native_msg)
+                ) {
+                   $error = MDB2_ERROR_NOT_FOUND;
+                } else {
+                    $error = $ecode_map[$native_code];
+                }
+            }
+        }
+        return array($error, $native_code, $native_msg);
+    }
+
+    // }}}
+    // {{{ function escapePattern($text)
+
+    /**
+     * Quotes pattern (% and _) characters in a string)
+     *
+     * @param   string  the input string to quote
+     *
+     * @return  string  quoted string
+     *
+     * @access  public
+     */
+    function escapePattern($text)
+    {
+        $text = str_replace("[", "[ [ ]", $text);
+        foreach ($this->wildcards as $wildcard) {
+            $text = str_replace($wildcard, '[' . $wildcard . ']', $text);
+        }
+        return $text;
+    }
+
+    // }}}
+    // {{{ beginTransaction()
+
+    /**
+     * Start a transaction or set a savepoint.
+     *
+     * @param   string  name of a savepoint to set
+     * @return  mixed   MDB2_OK on success, a MDB2 error on failure
+     *
+     * @access  public
+     */
+    function beginTransaction($savepoint = null)
+    {
+        $this->debug('Starting transaction/savepoint', __FUNCTION__, array('is_manip' => true, 'savepoint' => $savepoint));
+        if (null !== $savepoint) {
+            if (!$this->in_transaction) {
+                return $this->raiseError(MDB2_ERROR_INVALID, null, null,
+                    'savepoint cannot be released when changes are auto committed', __FUNCTION__);
+            }
+            $query = 'SAVE TRANSACTION '.$savepoint;
+            return $this->_doQuery($query, true);
+        }
+        if ($this->in_transaction) {
+            return MDB2_OK;  //nothing to do
+        }
+        if (!$this->destructor_registered && $this->opened_persistent) {
+            $this->destructor_registered = true;
+            register_shutdown_function('MDB2_closeOpenTransactions');
+        }
+        if (PEAR::isError(sqlsrv_begin_transaction($this->connection))) {
+            return MDB2_ERROR;
+        }
+        $this->in_transaction = true;
+        return MDB2_OK;
+    }
+
+    // }}}
+    // {{{ commit()
+
+    /**
+     * Commit the database changes done during a transaction that is in
+     * progress or release a savepoint. This function may only be called when
+     * auto-committing is disabled, otherwise it will fail. Therefore, a new
+     * transaction is implicitly started after committing the pending changes.
+     *
+     * @param   string  name of a savepoint to release
+     * @return  mixed   MDB2_OK on success, a MDB2 error on failure
+     *
+     * @access  public
+     */
+    function commit($savepoint = null)
+    {
+        $this->debug('Committing transaction/savepoint', __FUNCTION__, array('is_manip' => true, 'savepoint' => $savepoint));
+        if (!$this->in_transaction) {
+            return $this->raiseError(MDB2_ERROR_INVALID, null, null,
+                'commit/release savepoint cannot be done changes are auto committed', __FUNCTION__);
+        }
+        if (null !== $savepoint) {
+            return MDB2_OK;
+        }
+
+        if (PEAR::isError(sqlsrv_commit($this->connection))) {
+            return MDB2_ERROR;
+        }
+        $this->in_transaction = false;
+        return MDB2_OK;
+    }
+
+    // }}}
+    // {{{ rollback()
+
+    /**
+     * Cancel any database changes done during a transaction or since a specific
+     * savepoint that is in progress. This function may only be called when
+     * auto-committing is disabled, otherwise it will fail. Therefore, a new
+     * transaction is implicitly started after canceling the pending changes.
+     *
+     * @param   string  name of a savepoint to rollback to
+     * @return  mixed   MDB2_OK on success, a MDB2 error on failure
+     *
+     * @access  public
+     */
+    function rollback($savepoint = null)
+    {
+        $this->debug('Rolling back transaction/savepoint', __FUNCTION__, array('is_manip' => true, 'savepoint' => $savepoint));
+        if (!$this->in_transaction) {
+            return $this->raiseError(MDB2_ERROR_INVALID, null, null,
+                'rollback cannot be done changes are auto committed', __FUNCTION__);
+        }
+        if (null !== $savepoint) {
+            $query = 'ROLLBACK TRANSACTION '.$savepoint;
+            return $this->_doQuery($query, true);
+        }
+
+        if (PEAR::isError(sqlsrv_rollback($this->connection))) {
+            return MDB2_ERROR;
+        }
+        $this->in_transaction = false;
+        return MDB2_OK;
+    }
+
+    // }}}
+    // {{{ _doConnect()
+
+    /**
+     * do the grunt work of the connect
+     *
+     * @return connection on success or MDB2 Error Object on failure
+     * @access protected
+     */
+    function _doConnect($username, $password, $database=null, $persistent = false)
+    {
+        if (!PEAR::loadExtension($this->phptype)) {
+            return $this->raiseError(MDB2_ERROR_NOT_FOUND, null, null,
+                'extension '.$this->phptype.' is not installed PHP', __FUNCTION__);
+        }
+
+        $host = $this->dsn['hostspec'] ? $this->dsn['hostspec'] : '.\\SQLEXPRESS';
+        $params = array(
+            'UID' => $username ? $username : null,
+            'pwd' => $password ? $password : null,
+        );
+		if ($database) {
+            $params['Database'] = $database;
+        }
+		
+        if ($this->dsn['port'] && $this->dsn['port'] != 1433) {
+            $host .= ','.$this->dsn['port'];
+        }
+
+        $params['CharacterSet'] = 'UTF-8';
+        $connection = sqlsrv_connect($host, $params);
+        if (!$connection) {
+            return $this->raiseError(MDB2_ERROR_CONNECT_FAILED, null, null,
+                'unable to establish a connection', __FUNCTION__, __FUNCTION__);
+        }
+        if (null !== $database) {
+            $this->connected_database_name = $database;
+        }
+
+        if (!empty($this->dsn['charset'])) {
+            $result = $this->setCharset($this->dsn['charset'], $connection);
+            if (PEAR::isError($result)) {
+                return $result;
+            }
+        }
+
+       if (empty($this->dsn['disable_iso_date'])) {
+           @sqlsrv_query($connection,'SET DATEFORMAT ymd');
+       }
+
+       return $connection;
+    }
+
+    // }}}
+    // {{{ connect()
+
+    /**
+     * Connect to the database
+     *
+     * @return true on success, MDB2 Error Object on failure
+     */
+    function connect()
+    {
+        if (is_resource($this->connection)) {
+            if (MDB2::areEquals($this->connected_dsn, $this->dsn)) {
+                return MDB2_OK;
+            }
+            $this->disconnect(false);
+        }
+
+        $connection = $this->_doConnect(
+            $this->dsn['username'],
+            $this->dsn['password'],
+            $this->database_name,
+            $this->options['persistent']
+        );
+        if (PEAR::isError($connection)) {
+            return $connection;
+        }
+
+        $this->connection = $connection;
+        $this->connected_dsn = $this->dsn;
+        $this->connected_database_name = $this->database_name;
+        $this->opened_persistent = $this->options['persistent'];
+        $this->dbsyntax = $this->dsn['dbsyntax'] ? $this->dsn['dbsyntax'] : $this->phptype;
+
+        return MDB2_OK;
+    }
+
+    // }}}
+    // {{{ databaseExists()
+
+    /**
+     * check if given database name exists?
+     *
+     * @param string $name    name of the database that should be checked
+     *
+     * @return mixed true/false on success, a MDB2 error on failure
+     * @access public
+     */
+    function databaseExists($name)
+    {
+        $connection = $this->_doConnect($this->dsn['username'],$this->dsn['password']);
+        if (PEAR::isError($connection)) {
+            return MDB2_ERROR_CONNECT_FAILED;
+        }
+		$result = @sqlsrv_query($connection,'select name from master..sysdatabases where name = \''.strtolower($name).'\'');
+		if (@sqlsrv_fetch($result)) {
+			return true;
+		}
+        return MDB2_ERROR_NOT_FOUND;
+    }
+
+    // }}}
+    // {{{ disconnect()
+
+    /**
+     * Log out and disconnect from the database.
+     *
+     * @param  boolean $force if the disconnect should be forced even if the
+     *                        connection is opened persistently
+     * @return mixed true on success, false if not connected and error
+     *                object on error
+     * @access public
+     */
+    function disconnect($force = true)
+    {
+        if (is_resource($this->connection)) {
+            if ($this->in_transaction) {
+                $dsn = $this->dsn;
+                $database_name = $this->database_name;
+                $persistent = $this->options['persistent'];
+                $this->dsn = $this->connected_dsn;
+                $this->database_name = $this->connected_database_name;
+                $this->options['persistent'] = $this->opened_persistent;
+                $this->rollback();
+                $this->dsn = $dsn;
+                $this->database_name = $database_name;
+                $this->options['persistent'] = $persistent;
+            }
+
+            @sqlsrv_close($this->connection);
+        }
+        return parent::disconnect($force);
+    }
+
+    // }}}
+    // {{{ standaloneQuery()
+
+   /**
+     * execute a query as DBA
+     *
+     * @param string $query the SQL query
+     * @param mixed   $types  array that contains the types of the columns in
+     *                        the result set
+     * @param boolean $is_manip  if the query is a manipulation query
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     * @access public
+     */
+    function &standaloneQuery($query, $types = null, $is_manip = false)
+    {
+        $user = $this->options['DBA_username']? $this->options['DBA_username'] : $this->dsn['username'];
+        $pass = $this->options['DBA_password']? $this->options['DBA_password'] : $this->dsn['password'];
+        $connection = $this->_doConnect($user, $pass, $this->database_name, $this->options['persistent']);
+        if (PEAR::isError($connection)) {
+            return $connection;
+        }
+
+        $query = $this->_modifyQuery($query, $is_manip, $this->limit, $this->offset);
+        $this->offset = $this->limit = 0;
+        
+        $result = $this->_doQuery($query, $is_manip, $connection);
+        if (!PEAR::isError($result)) {
+            $result = $this->_affectedRows($connection, $result);
+        }
+
+        @sqlsrv_close($connection);
+        return $result;
+    }
+
+    // }}}
+    // {{{ _doQuery()
+
+    /**
+     * Execute a query
+     * @param string $query  query
+     * @param boolean $is_manip  if the query is a manipulation query
+     * @param resource $connection
+     * @param string $database_name
+     * @return result or error object
+     * @access protected
+     */
+    function _doQuery($query, $is_manip = false, $connection = null, $database_name = null)
+    {
+        $this->last_query = $query;
+        $result = $this->debug($query, 'query', array('is_manip' => $is_manip, 'when' => 'pre'));
+        if ($result) {
+            if (PEAR::isError($result)) {
+                return $result;
+            }
+            $query = $result;
+        }
+        if ($this->options['disable_query']) {
+            $result = $is_manip ? 0 : null;
+            return $result;
+        }
+
+        if (null === $connection) {
+            $connection = $this->getConnection();
+            if (PEAR::isError($connection)) {
+                return $connection;
+            }
+        }
+        if (null === $database_name) {
+            $database_name = $this->database_name;
+        }
+
+        if ($database_name && $database_name != $this->connected_database_name) {
+			$connection = $this->_doConnect($this->dsn['username'],$this->dsn['password'],$database_name);
+			if (PEAR::isError($connection)) {
+				$err = $this->raiseError(null, null, null,
+					'Could not select the database: '.$database_name, __FUNCTION__);
+				return $err;
+			}
+			$this->connected_database_name = $database_name;
+        }
+
+	$query = preg_replace('/DATE_FORMAT\((MIN\()?([\w|.]*)(\))?\\Q, \'%Y-%m-%d\')\E/i','CONVERT(varchar(10),$1$2$3,120)',$query); 
+	$query = preg_replace('/DATE_FORMAT\(([\w|.]*)\, \'\%Y\-\%m\-\%d %H\:00\:00\'\)/i','CONVERT(varchar(13),$1,120)+\':00:00\'',$query); 
+        $result = @sqlsrv_query($connection,$query);
+        if (!$result) {
+            $err = $this->raiseError(null, null, null,
+                'Could not execute statement', __FUNCTION__);
+            return $err;
+        }
+        $this->result = $result;
+        $this->debug($query, 'query', array('is_manip' => $is_manip, 'when' => 'post', 'result' => $result));
+        return $result;
+    }
+
+    // }}}
+    // {{{ _affectedRows()
+
+    /**
+     * Returns the number of rows affected
+     *
+     * @param resource $result
+     * @param resource $connection
+     * @return mixed MDB2 Error Object or the number of rows affected
+     * @access private
+     */
+    function _affectedRows($connection, $result = null)
+    {
+        if (null === $result) {
+            $result = $this->result;
+        }
+        return sqlsrv_rows_affected($this->result);
+    }
+
+    // }}}
+    // {{{ _modifyQuery()
+
+    /**
+     * Changes a query string for various DBMS specific reasons
+     *
+     * @param string $query  query to modify
+     * @param boolean $is_manip  if it is a DML query
+     * @param integer $limit  limit the number of rows
+     * @param integer $offset  start reading from given offset
+     * @return string modified query
+     * @access protected
+     */
+    function _modifyQuery($query, $is_manip, $limit, $offset)
+    {
+        if ($limit > 0) {
+            $fetch = $offset + $limit;
+            if (!$is_manip) {
+                return preg_replace('/^([\s(])*SELECT( DISTINCT)?(?!\s*TOP\s*\()/i',
+                    "\\1SELECT\\2 TOP $fetch", $query);
+            }
+        }
+        return $query;
+    }
+
+    // }}}
+    // {{{ getServerVersion()
+
+    /**
+     * return version information about the server
+     *
+     * @param bool   $native  determines if the raw version string should be returned
+     * @return mixed array/string with version information or MDB2 error object
+     * @access public
+     */
+    function getServerVersion($native = false)
+    {
+        if ($this->connected_server_info) {
+            $server_info = $this->connected_server_info;
+        } else {
+            $this->connect();
+            $server_info = sqlsrv_server_info($this->connection);
+        }
+        // cache server_info
+        $this->connected_server_info = $server_info;
+		$version = $server_info['SQLServerVersion'];
+        if (!$native) {
+            if (preg_match('/(\d+)\.(\d+)\.(\d+)/', $version, $tmp)) {
+                $version = array(
+                    'major' => $tmp[1],
+                    'minor' => $tmp[2],
+                    'patch' => $tmp[3],
+                    'extra' => null,
+                    'native' => $version,
+                );
+            } else {
+                $version = array(
+                    'major' => null,
+                    'minor' => null,
+                    'patch' => null,
+                    'extra' => null,
+                    'native' => $version,
+                );
+            }
+        }
+        return $version;
+    }
+
+    // }}}
+    // {{{ _checkSequence
+
+    /**
+     * Checks if there's a sequence that exists.
+     *
+     * @param  string $seq_name    The sequence name to verify.
+     * @return bool   $tableExists The value if the table exists or not
+     * @access private
+     */
+    function _checkSequence($seq_name)
+    {
+        $query = "SELECT * FROM $seq_name";
+        $tableExists =& $this->_doQuery($query, true);
+        if (PEAR::isError($tableExists)) {
+            if ($tableExists->getCode() == MDB2_ERROR_NOSUCHTABLE) {
+                return false;
+            }
+            return false;
+        }
+		if (@sqlsrv_fetch($tableExists)) {
+			return true;
+		}
+        return false;
+    }
+
+    // }}}
+    // {{{ nextID()
+
+    /**
+     * Returns the next free id of a sequence
+     *
+     * @param string $seq_name name of the sequence
+     * @param boolean $ondemand when true the sequence is
+     *                          automatic created, if it
+     *                          not exists
+     *
+     * @return mixed MDB2 Error Object or id
+     * @access public
+     */
+    function nextID($seq_name, $ondemand = true)
+    {
+        $sequence_name = $this->quoteIdentifier($this->getSequenceName($seq_name), true);
+        $seqcol_name = $this->quoteIdentifier($this->options['seqcol_name'], true);
+        $this->pushErrorHandling(PEAR_ERROR_RETURN);
+        $this->expectError(MDB2_ERROR_NOSUCHTABLE);
+        
+        $seq_val = $this->_checkSequence($sequence_name);
+
+        if ($seq_val) {
+            $query = "SET IDENTITY_INSERT $sequence_name OFF ".
+                     "INSERT INTO $sequence_name DEFAULT VALUES";
+        } else {
+            $query = "INSERT INTO $sequence_name ($seqcol_name) VALUES (0)";
+        }
+        $result = $this->_doQuery($query, true);
+        $this->popExpect();
+        $this->popErrorHandling();
+        if (PEAR::isError($result)) {
+            if ($ondemand && !$this->_checkSequence($sequence_name)) {
+                $this->loadModule('Manager', null, true);
+                $result = $this->manager->createSequence($seq_name);
+                if (PEAR::isError($result)) {
+                    return $this->raiseError($result, null, null,
+                        'on demand sequence '.$seq_name.' could not be created', __FUNCTION__);
+                } else {
+                    /**
+                     * Little off-by-one problem with the sequence emulation
+                     * here being fixed, that instead of re-calling nextID
+                     * and forcing an increment by one, we simply check if it
+                     * exists, then we get the last inserted id if it does.
+                     *
+                     * In theory, $seq_name should be created otherwise there would
+                     * have been an error thrown somewhere up there.. 
+                     *
+                     * @todo confirm
+                     */
+                    if ($this->_checkSequence($seq_name)) {
+                        return $this->lastInsertID($seq_name);
+                    }
+
+                    return $this->nextID($seq_name, false);
+                }
+            }
+            return $result;
+        }
+        $value = $this->lastInsertID($sequence_name);
+        if (is_numeric($value)) {
+            $query = "DELETE FROM $sequence_name WHERE $seqcol_name < $value";
+            $result = $this->_doQuery($query, true);
+            if (PEAR::isError($result)) {
+                $this->warnings[] = 'nextID: could not delete previous sequence table values from '.$seq_name;
+            }
+        }
+        return $value;
+    }
+
+    // }}}
+    // {{{ lastInsertID()
+
+    /**
+     * Returns the autoincrement ID if supported or $id or fetches the current
+     * ID in a sequence called: $table.(empty($field) ? '' : '_'.$field)
+     *
+     * @param string $table name of the table into which a new row was inserted
+     * @param string $field name of the field into which a new row was inserted
+     *
+     * @return mixed MDB2 Error Object or id
+     * @access public
+     */
+    function lastInsertID($table = null, $field = null)
+    {
+        return $this->queryOne("SELECT IDENT_CURRENT('$table')", 'integer');
+    }
+
+    // }}}
+}
+
+// }}}
+// {{{ Class MDB2_Result_mssql
+
+/**
+ * MDB2 MSSQL Server result driver
+ *
+ * @package MDB2
+ * @category Database
+ * @author  Frank M. Kromann <frank@kromann.info>
+ */
+class MDB2_Result_sqlsrv extends MDB2_Result_Common
+{
+    // {{{ constructor: function __construct($db, $result, $limit = 0, $offset = 0)
+
+    /**
+     * Constructor
+     */
+    function __construct($db, $result, $limit = 0, $offset = 0)
+{
+        $this->db = $db;
+        $this->result = $result;
+        $this->offset = $offset;
+        $this->limit = max(0, $limit - 1);
+		$this->cursor = 0;
+		$this->rows = array();
+		$this->numFields = sqlsrv_num_fields($result);
+		$this->fieldMeta = sqlsrv_field_metadata($result);
+		$this->numRowsAffected = sqlsrv_rows_affected($result);
+		while ($row = sqlsrv_fetch_array($result, SQLSRV_FETCH_ASSOC)) {
+			if ($row !== null) {
+				if ($this->offset && $this->offset_count < $this->offset) {
+					$this->offset_count++;
+					continue;
+				}
+				foreach ($row as $k => $v) {
+					if (is_object($v) && method_exists($v, 'format')) {
+                        //DateTime Object FIXME
+						$v->setTimezone(new DateTimeZone('Asia/Tokyo'));//TS_ISO_8601 with a trailing 'Z' is GMT
+						$row[$k] = $v->format('Y-m-d H:i:s');
+					}
+				}
+				$this->rows[] = $row; //read results into memory, cursors are not supported
+			}
+		}
+		$this->rowcnt = count($this->rows);
+    }
+
+    // }}}
+    // {{{ _skipLimitOffset()
+
+    /**
+     * Skip the first row of a result set.
+     *
+     * @param resource $result
+     * @return mixed a result handle or MDB2_OK on success, a MDB2 error on failure
+     * @access protected
+     */
+/*    function _skipLimitOffset()
+    {
+        if ($this->limit) {
+            if ($this->rownum >= $this->limit) {
+                return false;
+            }
+        }
+        if ($this->offset) {
+            while ($this->offset_count < $this->offset) {
+                ++$this->offset_count;
+                if (!is_array(@sqlsrv_fetch_array($this->result))) {
+                    $this->offset_count = $this->limit;
+                    return false;
+                }
+            }
+        }
+        return MDB2_OK;
+    }*/
+
+    // }}}
+	function array_to_obj($array, &$obj) {
+		foreach ($array as $key => $value) {
+			if (is_array($value)) {
+				$obj->$key = new stdClass();
+				array_to_obj($value, $obj->$key);
+			} else {
+				$obj->$key = $value;
+			}
+		}
+		return $obj;
+	} 
+    // {{{ fetchRow()
+
+    /**
+     * Fetch a row and insert the data into an existing array.
+     *
+     * @param int       $fetchmode  how the array data should be indexed
+     * @param int    $rownum    number of the row where the data can be found
+     * @return int data array on success, a MDB2 error on failure
+     * @access public
+     */
+    function fetchRow($fetchmode = MDB2_FETCHMODE_DEFAULT, $rownum = null)
+    {
+        if (!$this->result) {
+            return $this->db->raiseError(MDB2_ERROR_INVALID, null, null, 'no valid statement given', __FUNCTION__);
+        }
+        if (($this->limit && $this->rownum >= $this->limit) || ($this->cursor >= $this->rowcnt || $this->rowcnt == 0)) {
+            return null;
+        }
+        if (null !== $rownum) {
+            $seek = $this->seek($rownum);
+            if (PEAR::isError($seek)) {
+                return $seek;
+            }
+        }
+		
+		$row = false;
+		$arrNum = array();
+		if ($fetchmode == MDB2_FETCHMODE_ORDERED || $fetchmode == MDB2_FETCHMODE_DEFAULT) {
+			foreach ($this->rows[$this->cursor] as $key=>$value) {
+				$arrNum[] = $value;
+			}
+		}
+		switch($fetchmode) {
+			case MDB2_FETCHMODE_ASSOC:
+				$row = $this->rows[$this->cursor];
+                break;
+			case MDB2_FETCHMODE_ORDERED:
+				$row = $arrNum;
+                break;
+			case MDB2_FETCHMODE_OBJECT:
+                $o = new $this->db->options['fetch_class'];
+				$row = $this->array_to_obj($this->rows[$this->cursor], $o);
+                break;
+			case MDB2_FETCHMODE_DEFAULT:
+			default:
+			$row = $this->rows[$this->cursor] + $arrNum;
+            break;
+		} 
+		$this->cursor++;
+		
+		/*
+        if ($fetchmode == MDB2_FETCHMODE_OBJECT) {
+			$row = sqlsrv_fetch_object($this->result,$this->db->options['fetch_class']);
+		} else {
+		switch($fetchmode) {
+			case MDB2_FETCHMODE_ASSOC: $fetchmode = SQLSRV_FETCH_ASSOC; break;
+			case MDB2_FETCHMODE_ORDERED: $fetchmode = SQLSRV_FETCH_NUMERIC; break;
+			case MDB2_FETCHMODE_DEFAULT: 
+			default: 
+				$fetchmode = SQLSRV_FETCH_BOTH;
+		}
+			$row = sqlsrv_fetch_array($this->result,$fetchmode);
+		}
+		foreach ($row as $key=>$value) {
+			if (is_object($value) && method_exists($value, 'format')) {//is DateTime object
+				$row[$key] = $value->format("Y-m-d H:i:s");
+			}
+		}*/
+		
+        /*if ($fetchmode == MDB2_FETCHMODE_DEFAULT) {
+            $fetchmode = $this->db->fetchmode;
+        }*/
+        if ($fetchmode == MDB2_FETCHMODE_ASSOC && is_array($row) && $this->db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            $row = array_change_key_case($row, $this->db->options['field_case']);
+        }
+        if (!$row) {
+            if (false === $this->result) {
+                $err = $this->db->raiseError(MDB2_ERROR_NEED_MORE_DATA, null, null,
+                    'resultset has already been freed', __FUNCTION__);
+                return $err;
+            }
+            return null;
+        }
+        $mode = $this->db->options['portability'] & MDB2_PORTABILITY_EMPTY_TO_NULL;
+        $rtrim = false;
+        if ($this->db->options['portability'] & MDB2_PORTABILITY_RTRIM) {
+            if (empty($this->types)) {
+                $mode += MDB2_PORTABILITY_RTRIM;
+            } else {
+                $rtrim = true;
+            }
+        }
+        if ($mode) {
+            $this->db->_fixResultArrayValues($row, $mode);
+        }
+        if (!empty($this->types)) {
+            $row = $this->db->datatype->convertResultRow($this->types, $row, $rtrim);
+        }
+        if (!empty($this->values)) {
+            $this->_assignBindColumns($row);
+        }
+        ++$this->rownum;
+        return $row;
+    }
+
+    // }}}
+    // {{{ _getColumnNames()
+
+    /**
+     * Retrieve the names of columns returned by the DBMS in a query result.
+     *
+     * @return  mixed   Array variable that holds the names of columns as keys
+     *                  or an MDB2 error on failure.
+     *                  Some DBMS may not return any columns when the result set
+     *                  does not contain any rows.
+     * @access private
+     */
+    function _getColumnNames()
+    {
+		if (!$this->result) {
+            return $this->db->raiseError(MDB2_ERROR_INVALID, null, null, 'no valid statement given', __FUNCTION__);
+        }
+        $columns = array();
+		foreach ($this->fieldMeta as $n => $col) {
+			$columns[$col['Name']] = $n;
+		}
+        if ($this->db->options['portability'] & MDB2_PORTABILITY_FIX_CASE) {
+            $columns = array_change_key_case($columns, $this->db->options['field_case']);
+        }
+        return $columns;
+    }
+
+    // }}}
+    // {{{ numCols()
+
+    /**
+     * Count the number of columns returned by the DBMS in a query result.
+     *
+     * @return mixed integer value with the number of columns, a MDB2 error
+     *      on failure
+     * @access public
+     */
+    function numCols()
+    {
+        if (!$this->result) {
+            return $this->db->raiseError(MDB2_ERROR_INVALID, null, null, 'no valid statement given', __FUNCTION__);
+        }
+        $cols = $this->numFields;
+        if (!$cols) {
+            if (false === $this->result) {
+                return $this->db->raiseError(MDB2_ERROR_NEED_MORE_DATA, null, null,
+                    'resultset has already been freed', __FUNCTION__);
+            }
+            if (null === $this->result) {
+                return count($this->types);
+            }
+            return $this->db->raiseError(null, null, null,
+                'Could not get column count', __FUNCTION__);
+        }
+        return $cols;
+    }
+
+    // }}}
+    // {{{ nextResult()
+
+    /**
+     * Move the internal result pointer to the next available result
+     *
+     * @return true on success, false if there is no more result set or an error object on failure
+     * @access public
+     */
+    function nextResult()
+    {
+        if (false === $this->result) {
+            return $this->db->raiseError(MDB2_ERROR_NEED_MORE_DATA, null, null,
+                'resultset has already been freed', __FUNCTION__);
+        }
+        if (null === $this->result) {
+            return false;
+        }
+        $ret = sqlsrv_next_result($this->result);
+		if ($ret) {
+			$this->cursor = 0;
+			$this->rows = array();
+			$this->numFields = sqlsrv_num_fields($this->result);
+			$this->fieldMeta = sqlsrv_field_metadata($this->result);
+			$this->numRowsAffected = sqlsrv_rows_affected($this->result);
+			while ($row = sqlsrv_fetch_array($this->result, SQLSRV_FETCH_ASSOC)) {
+				if ($row !== null) {
+					if ($this->offset && $this->offset_count < $this->offset) {
+						$this->offset_count++;
+						continue;
+					}
+					foreach ($row as $k => $v) {
+						if (is_object($v) && method_exists($v, 'format')) {//DateTime Object
+							$v->setTimezone(new DateTimeZone('Asia/Tokyo'));//TS_ISO_8601 with a trailing 'Z' is GMT
+							$row[$k] = $v->format("Y-m-d H:i:s");
+						}
+					}
+					$this->rows[] = $row;//read results into memory, cursors are not supported
+				}
+			}
+			$this->rowcnt = count($this->rows);		
+		}
+		return $ret;
+    }
+
+    // }}}
+    // {{{ free()
+
+    /**
+     * Free the internal resources associated with $result.
+     *
+     * @return boolean true on success, false if $result is invalid
+     * @access public
+     */
+    function free()
+    {
+        if (is_resource($this->result) && $this->db->connection) {
+            if (!@sqlsrv_free_stmt($this->result)) {
+                return $this->db->raiseError(null, null, null,
+                    'Could not free result', __FUNCTION__);
+            }
+        }
+        $this->result = false;
+        return MDB2_OK;
+    }
+
+    // }}}
+    // {{{ function rowCount()
+    /**
+     * Returns the actual row number that was last fetched (count from 0)
+     * @return  int
+     *
+     * @access  public
+     */
+    function rowCount()
+    {
+        return $this->cursor;
+}
+
+// }}}
+    // {{{ function numRows()
+
+/**
+     * Returns the number of rows in a result object
+     *
+     * @return  mixed   MDB2 Error Object or the number of rows
+ *
+     * @access  public
+ */
+    function numRows()
+{
+        return $this->rowcnt;
+    }
+
+    // }}}
+    // {{{ function seek($rownum = 0)
+
+    /**
+     * Seek to a specific row in a result set
+     *
+     * @param   int     number of the row where the data can be found
+     *
+     * @return mixed MDB2_OK on success, a MDB2 error on failure
+     *
+     * @access public
+     */
+    function seek($rownum = 0)
+    {
+        $this->cursor = min($rownum, $this->rowcnt);
+                return MDB2_OK;
+            }
+
+    // }}}
+    }
+
+    // }}}
+// {{{ class MDB2_BufferedResult_mssql
+
+/**
+ * MDB2 MSSQL Server buffered result driver
+ *
+ * @package MDB2
+ * @category Database
+ * @author  Frank M. Kromann <frank@kromann.info>
+ */
+class MDB2_BufferedResult_sqlsrv extends MDB2_Result_sqlsrv
+{
+    // {{{ valid()
+
+    /**
+     * Check if the end of the result set has been reached
+     *
+     * @return mixed true or false on sucess, a MDB2 error on failure
+     * @access public
+     */
+    function valid()
+    {
+        $numrows = $this->numRows();
+        if (PEAR::isError($numrows)) {
+            return $numrows;
+        }
+        return $this->rownum < ($numrows - 1);
+    }
+
+    // }}}
+
+}
+
+// }}}
+// {{{ MDB2_Statement_mssql
+
+/**
+ * MDB2 MSSQL Server statement driver
+ *
+ * @package MDB2
+ * @category Database
+ * @author  Frank M. Kromann <frank@kromann.info>
+ */
+class MDB2_Statement_sqlsrv extends MDB2_Statement_Common
+{
+
+}
+
+// }}}
+
+?>
diff -urNb ec-cube-iis/html/.user.ini ec-cube/html/.user.ini
--- ec-cube-iis/html/.user.ini	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/html/.user.ini	2014-07-11 18:57:30.000000000 +0900
@@ -0,0 +1,9 @@
+mbstring.language = Japanese
+mbstring.encoding_translation = off
+output_handler = NULL
+magic_quotes_gpc = off
+session.auto_start = 0
+mbstring.internal_encoding = UTF-8
+upload_max_filesize = 5M
+register_globals = off
+date.timezone = Asia/Tokyo
diff -urNb ec-cube-iis/html/install/index.php ec-cube/html/install/index.php
--- ec-cube-iis/html/install/index.php	2014-07-15 10:31:03.000000000 +0900
+++ ec-cube/html/install/index.php	2014-08-05 16:25:32.000000000 +0900
@@ -48,11 +48,10 @@
 
 $objPage = new StdClass;
 $objPage->arrDB_TYPE = array(
-    'mysql' => 'MySQL',
+    'sqlsrv' => 'SQL Database'
 );
 $objPage->arrDB_PORT = array(
-    'pgsql' => '',
-    'mysql' => '',
+    'sqlsrv' => '1433'
 );
 $objPage->arrMailBackend = array('mail' => 'mail',
                                  'smtp' => 'SMTP',
@@ -112,7 +111,8 @@
         //入力値のエラーチェック
         $objPage->arrErr = lfCheckDBError($objDBParam);
         if (count($objPage->arrErr) == 0) {
-            if ($err = renameAdminDir($objWebParam->getValue('admin_dir')) !== true) {
+            $err = renameAdminDir($objWebParam->getValue('admin_dir'));
+            if ($err !== true) {
                 $objPage->arrErr['all'] .= $err;
                 $objPage = lfDispStep2($objPage);
             } else {
@@ -145,7 +145,11 @@
 
         // 初期データの作成
         if (count($objPage->arrErr) == 0) {
-            $objPage->arrErr = lfExecuteSQL('./sql/insert_data.sql', $arrDsn);
+            $insert_data_sql = './sql/insert_data_' . $arrDsn['phptype'] . '.sql';
+            if (!file_exists($insert_data_sql)) {
+                $insert_data_sql = './sql/insert_data.sql';
+            }
+            $objPage->arrErr = lfExecuteSQL($insert_data_sql, $arrDsn);
             if (count($objPage->arrErr) == 0) {
                 $objPage->tpl_message .= '○：初期データの作成に成功しました。<br />';
             } else {
@@ -648,7 +652,15 @@
 
     // 店名、管理者メールアドレスを取得する。(再インストール時)
     if (defined('DEFAULT_DSN')) {
-        $objQuery = new SC_Query();
+        $dsn = array('phptype'  => DB_TYPE,
+                     'username' => DB_USER,
+                     'password' => DB_PASSWORD,
+                     'protocol' => 'tcp',
+                     'hostspec' => DB_SERVER,
+                     'port'     => DB_PORT,
+                     'database' => DB_NAME
+                     );
+        $objQuery = new SC_Query($dsn);
         $tables = $objQuery->listTables();
 
         if (!PEAR::isError($tables) && in_array('dtb_baseinfo', $tables)) {
@@ -731,14 +743,14 @@
     if(file_exists($webpi_filename) && $fp = @fopen($webpi_filename, 'r')) {
         while (!feof($fp)) {
             $connect_str = fgets($fp);
-            if(preg_match('/mysql/', $connect_str)) {
+            if(preg_match('/sqlsrv/', $connect_str)) {
                 break;
             }
         }
         
-        // MySQLの文字列から分割して接続情報を取得する
+        // DB接続文字列から分割して接続情報を取得する
         if(!empty($connect_str)) {
-            // /* mysql://[ユーザー名]:[パスワード]@[ホスト名]/[データベース名];*/
+            // /* sqlsrv://[ユーザー名]:[パスワード]@[ホスト名]/[データベース名];*/
             // @で分解
             $split_connect = explode('@', $connect_str);
 
@@ -939,14 +951,15 @@
     $options['debug'] = PEAR_DB_DEBUG;
     $objDB = MDB2::connect($arrDsn, $options);
     $objManager =& $objDB->loadModule('Manager');
-
-    // 接続エラー
-    if (!PEAR::isError($objDB)) {
         $exists = $objManager->listSequences();
+    if (!PEAR::isError($objDB)) {
+        $objDB->disconnect();
         foreach ($arrSequences as $seq) {
             SC_Utils::sfFlush(true);
             $seq_name = $seq[0] . '_' . $seq[1];
             if (in_array($seq_name, $exists)) {
+                $objDB = MDB2::connect($arrDsn, $options);
+                $objManager =& $objDB->loadModule('Manager');
                 $result = $objManager->dropSequence($seq_name);
                 if (PEAR::isError($result)) {
                     $arrErr['all'] = '>> ' . $result->message . '<br />';
@@ -954,6 +967,7 @@
                 } else {
                     GC_Utils_Ex::gfPrintLog('OK:' . $seq_name, INSTALL_LOG);
                 }
+                $objDB->disconnect();
             }
         }
     } else {
@@ -977,12 +991,11 @@
     // Debugモード指定
     $options['debug'] = PEAR_DB_DEBUG;
     $objDB = MDB2::connect($arrDsn, $options);
-    $objManager =& $objDB->loadModule('Manager');
-
-    // 接続エラー
     if (!PEAR::isError($objDB)) {
-        $exists = $objManager->listSequences();
+        $objDB->disconnect();
         foreach ($arrSequences as $seq) {
+            $objDB = MDB2::connect($arrDsn, $options);
+            $objManager =& $objDB->loadModule('Manager');
             SC_Utils::sfFlush(true);
             $res = $objDB->query('SELECT max(' . $seq[1] . ') FROM ' . $seq[0]);
             if (PEAR::isError($res)) {
@@ -1000,6 +1013,7 @@
             } else {
                 GC_Utils_Ex::gfPrintLog('OK:' . $seq_name, INSTALL_LOG);
             }
+            $objDB->disconnect();
         }
     } else {
         $arrErr['all'] = '>> ' . $objDB->message;
@@ -1197,6 +1211,7 @@
         'phptype'   => $arrRet['db_type'],
         'username'  => $arrRet['db_user'],
         'password'  => $arrRet['db_password'],
+        'protocol'  => 'tcp',
         'database'  => $arrRet['db_name'],
         'port'      => $arrRet['db_port'],
     );
diff -urNb ec-cube-iis/html/install/sql/create_table_sqlsrv.sql ec-cube/html/install/sql/create_table_sqlsrv.sql
--- ec-cube-iis/html/install/sql/create_table_sqlsrv.sql	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/html/install/sql/create_table_sqlsrv.sql	2014-08-20 15:05:24.000000000 +0900
@@ -0,0 +1,1242 @@
+create table dtb_module_update_logs(
+    log_id int NOT NULL,
+    module_id int NOT NULL,
+    buckup_path nvarchar(max),
+    error_flg smallint DEFAULT 0,
+    error nvarchar(max),
+    ok nvarchar(max),
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (log_id)
+);
+
+CREATE TABLE dtb_ownersstore_settings (
+    public_key varchar(64)
+    PRIMARY KEY(public_key)
+);
+
+CREATE TABLE dtb_kiyaku (
+    kiyaku_id int NOT NULL,
+    kiyaku_title nvarchar(max) NOT NULL,
+    kiyaku_text nvarchar(max) NOT NULL,
+    rank int NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (kiyaku_id)
+);
+
+CREATE TABLE dtb_holiday (
+    holiday_id int NOT NULL,
+    title nvarchar(max) NOT NULL,
+    month smallint NOT NULL,
+    day smallint NOT NULL,
+    rank int NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (holiday_id)
+);
+
+CREATE TABLE mtb_zip (
+    zip_id int,
+    zipcode nvarchar(max),
+    state nvarchar(max),
+    city nvarchar(max),
+    town nvarchar(max),
+    PRIMARY KEY(zip_id)
+);
+
+CREATE TABLE dtb_update (
+    module_id int NOT NULL,
+    module_name nvarchar(max) NOT NULL,
+    now_version nvarchar(max),
+    latest_version nvarchar(max) NOT NULL,
+    module_explain nvarchar(max),
+    main_php nvarchar(max) NOT NULL,
+    extern_php nvarchar(max) NOT NULL,
+    install_sql nvarchar(max),
+    uninstall_sql nvarchar(max),
+    other_files nvarchar(max),
+    del_flg smallint NOT NULL DEFAULT 0,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    release_date datetimeoffset NOT NULL,
+    PRIMARY KEY (module_id)
+);
+
+CREATE TABLE dtb_baseinfo (
+    id smallint,
+    company_name nvarchar(max),
+    company_kana nvarchar(max),
+    zip01 nvarchar(max),
+    zip02 nvarchar(max),
+    zipcode nvarchar(max),
+    country_id int,
+    pref smallint,
+    addr01 nvarchar(max),
+    addr02 nvarchar(max),
+    tel01 nvarchar(max),
+    tel02 nvarchar(max),
+    tel03 nvarchar(max),
+    fax01 nvarchar(max),
+    fax02 nvarchar(max),
+    fax03 nvarchar(max),
+    business_hour nvarchar(max),
+    law_company nvarchar(max),
+    law_manager nvarchar(max),
+    law_zip01 nvarchar(max),
+    law_zip02 nvarchar(max),
+    law_zipcode nvarchar(max),
+    law_country_id int,
+    law_pref smallint,
+    law_addr01 nvarchar(max),
+    law_addr02 nvarchar(max),
+    law_tel01 nvarchar(max),
+    law_tel02 nvarchar(max),
+    law_tel03 nvarchar(max),
+    law_fax01 nvarchar(max),
+    law_fax02 nvarchar(max),
+    law_fax03 nvarchar(max),
+    law_email nvarchar(max),
+    law_url nvarchar(max),
+    law_term01 nvarchar(max),
+    law_term02 nvarchar(max),
+    law_term03 nvarchar(max),
+    law_term04 nvarchar(max),
+    law_term05 nvarchar(max),
+    law_term06 nvarchar(max),
+    law_term07 nvarchar(max),
+    law_term08 nvarchar(max),
+    law_term09 nvarchar(max),
+    law_term10 nvarchar(max),
+    email01 nvarchar(max),
+    email02 nvarchar(max),
+    email03 nvarchar(max),
+    email04 nvarchar(max),
+    free_rule numeric(9),
+    shop_name nvarchar(max),
+    shop_kana nvarchar(max),
+    shop_name_eng nvarchar(max),
+    point_rate numeric(9) NOT NULL DEFAULT 0,
+    welcome_point numeric(9) NOT NULL DEFAULT 0,
+    update_date datetimeoffset NOT NULL,
+    top_tpl nvarchar(max),
+    product_tpl nvarchar(max),
+    detail_tpl nvarchar(max),
+    mypage_tpl nvarchar(max),
+    good_traded nvarchar(max),
+    message nvarchar(max),
+    regular_holiday_ids nvarchar(max),
+    latitude nvarchar(max),
+    longitude nvarchar(max),
+    downloadable_days numeric(9) DEFAULT 30,
+    downloadable_days_unlimited smallint,
+    PRIMARY KEY(id)
+);
+
+CREATE TABLE dtb_deliv (
+    deliv_id int NOT NULL,
+    product_type_id int,
+    name nvarchar(max),
+    service_name nvarchar(max),
+    remark nvarchar(max),
+    confirm_url nvarchar(max),
+    rank int,
+    status smallint NOT NULL DEFAULT 1,
+    del_flg smallint NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (deliv_id)
+);
+
+CREATE TABLE dtb_payment_options (
+    deliv_id int NOT NULL,
+    payment_id int NOT NULL,
+    rank int,
+    PRIMARY KEY (deliv_id, payment_id)
+);
+
+CREATE TABLE dtb_delivtime (
+    deliv_id int NOT NULL,
+    time_id int NOT NULL,
+    deliv_time nvarchar(max) NOT NULL,
+    PRIMARY KEY (deliv_id, time_id)
+);
+
+CREATE TABLE dtb_delivfee (
+    deliv_id int NOT NULL,
+    fee_id int NOT NULL,
+    fee numeric(9) NOT NULL,
+    pref smallint,
+    PRIMARY KEY (deliv_id, fee_id)
+);
+
+CREATE TABLE dtb_payment (
+    payment_id int NOT NULL,
+    payment_method nvarchar(max),
+    charge numeric(9),
+    rule_max numeric(9),
+    rank int,
+    note nvarchar(max),
+    fix smallint,
+    status smallint NOT NULL DEFAULT 1,
+    del_flg smallint NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    payment_image nvarchar(max),
+    upper_rule numeric(9),
+    charge_flg smallint DEFAULT 1,
+    rule_min numeric(9),
+    upper_rule_max numeric(9),
+    module_id int,
+    module_path nvarchar(max),
+    memo01 nvarchar(max),
+    memo02 nvarchar(max),
+    memo03 nvarchar(max),
+    memo04 nvarchar(max),
+    memo05 nvarchar(max),
+    memo06 nvarchar(max),
+    memo07 nvarchar(max),
+    memo08 nvarchar(max),
+    memo09 nvarchar(max),
+    memo10 nvarchar(max),
+    PRIMARY KEY (payment_id)
+);
+
+CREATE TABLE dtb_mailtemplate (
+    template_id int NOT NULL,
+    subject nvarchar(max),
+    header nvarchar(max),
+    footer nvarchar(max),
+    creator_id int NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (template_id)
+);
+
+CREATE TABLE dtb_mailmaga_template (
+    template_id int NOT NULL,
+    subject nvarchar(max),
+    mail_method int,
+    body nvarchar(max),
+    del_flg smallint NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (template_id)
+);
+
+CREATE TABLE dtb_send_history (
+    send_id int NOT NULL,
+    mail_method smallint,
+    subject nvarchar(max),
+    body nvarchar(max),
+    send_count int,
+    complete_count int NOT NULL DEFAULT 0,
+    start_date datetimeoffset,
+    end_date datetimeoffset,
+    search_data nvarchar(max),
+    del_flg smallint NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (send_id)
+);
+
+CREATE TABLE dtb_send_customer (
+    customer_id int NOT NULL,
+    send_id int NOT NULL,
+    email nvarchar(max),
+    name nvarchar(max),
+    send_flag smallint,
+    PRIMARY KEY (send_id, customer_id)
+);
+
+CREATE TABLE dtb_products (
+    product_id int NOT NULL,
+    name nvarchar(max) NOT NULL,
+    maker_id int,
+    status smallint NOT NULL DEFAULT 2,
+    comment1 nvarchar(max),
+    comment2 nvarchar(max),
+    comment3 nvarchar(max),
+    comment4 nvarchar(max),
+    comment5 nvarchar(max),
+    comment6 nvarchar(max),
+    note nvarchar(max),
+    main_list_comment nvarchar(max),
+    main_list_image nvarchar(max),
+    main_comment nvarchar(max),
+    main_image nvarchar(max),
+    main_large_image nvarchar(max),
+    sub_title1 nvarchar(max),
+    sub_comment1 nvarchar(max),
+    sub_image1 nvarchar(max),
+    sub_large_image1 nvarchar(max),
+    sub_title2 nvarchar(max),
+    sub_comment2 nvarchar(max),
+    sub_image2 nvarchar(max),
+    sub_large_image2 nvarchar(max),
+    sub_title3 nvarchar(max),
+    sub_comment3 nvarchar(max),
+    sub_image3 nvarchar(max),
+    sub_large_image3 nvarchar(max),
+    sub_title4 nvarchar(max),
+    sub_comment4 nvarchar(max),
+    sub_image4 nvarchar(max),
+    sub_large_image4 nvarchar(max),
+    sub_title5 nvarchar(max),
+    sub_comment5 nvarchar(max),
+    sub_image5 nvarchar(max),
+    sub_large_image5 nvarchar(max),
+    sub_title6 nvarchar(max),
+    sub_comment6 nvarchar(max),
+    sub_image6 nvarchar(max),
+    sub_large_image6 nvarchar(max),
+    del_flg smallint NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    deliv_date_id int,
+    PRIMARY KEY (product_id)
+);
+
+CREATE TABLE dtb_products_class (
+    product_class_id int NOT NULL,
+    product_id int NOT NULL,
+    classcategory_id1 int NOT NULL DEFAULT 0,
+    classcategory_id2 int NOT NULL DEFAULT 0,
+    product_type_id int NOT NULL DEFAULT 0,
+    product_code nvarchar(64),
+    stock numeric(9),
+    stock_unlimited smallint NOT NULL DEFAULT 0,
+    sale_limit numeric(9),
+    price01 numeric(9),
+    price02 numeric(9) NOT NULL,
+    deliv_fee numeric(9),
+    point_rate numeric(9) NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    down_filename nvarchar(max),
+    down_realfilename nvarchar(max),
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (product_class_id),
+    UNIQUE (product_id, classcategory_id1, classcategory_id2)
+);
+
+CREATE TABLE dtb_class (
+    class_id int NOT NULL,
+    name nvarchar(max),
+    rank int,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (class_id)
+);
+
+CREATE TABLE dtb_classcategory (
+    classcategory_id int NOT NULL,
+    name nvarchar(max),
+    class_id int NOT NULL,
+    rank int,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (classcategory_id)
+);
+
+CREATE TABLE dtb_category (
+    category_id int NOT NULL,
+    category_name nvarchar(max),
+    parent_category_id int NOT NULL DEFAULT 0,
+    level int NOT NULL,
+    rank int,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (category_id)
+);
+
+CREATE TABLE dtb_product_categories (
+    product_id int NOT NULL,
+    category_id int NOT NULL,
+    rank int NOT NULL,
+    PRIMARY KEY(product_id, category_id)
+);
+
+CREATE TABLE dtb_product_status (
+    product_status_id smallint NOT NULL,
+    product_id int NOT NULL,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (product_status_id, product_id)
+);
+
+CREATE TABLE dtb_recommend_products (
+    product_id int NOT NULL,
+    recommend_product_id int NOT NULL,
+    rank int NOT NULL,
+    comment nvarchar(max),
+    status smallint NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY(product_id)
+);
+
+CREATE TABLE dtb_review (
+    review_id int NOT NULL,
+    product_id int NOT NULL,
+    reviewer_name nvarchar(max) NOT NULL,
+    reviewer_url nvarchar(max),
+    sex smallint,
+    customer_id int,
+    recommend_level smallint NOT NULL,
+    title nvarchar(max) NOT NULL,
+    comment nvarchar(max) NOT NULL,
+    status smallint DEFAULT 2,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (review_id)
+);
+
+CREATE TABLE dtb_customer_favorite_products (
+    customer_id int NOT NULL,
+    product_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (customer_id, product_id)
+);
+
+CREATE TABLE dtb_category_count (
+    category_id int NOT NULL,
+    product_count int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    PRIMARY KEY (category_id)
+);
+
+CREATE TABLE dtb_category_total_count (
+    category_id int NOT NULL,
+    product_count int,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    PRIMARY KEY (category_id)
+);
+
+CREATE TABLE dtb_news (
+    news_id int NOT NULL,
+    news_date datetimeoffset,
+    rank int,
+    news_title nvarchar(max) NOT NULL,
+    news_comment nvarchar(max),
+    news_url nvarchar(max),
+    news_select smallint NOT NULL DEFAULT 0,
+    link_method nvarchar(max),
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (news_id)
+);
+
+CREATE TABLE dtb_best_products (
+    best_id int NOT NULL,
+    category_id int NOT NULL,
+    rank int NOT NULL DEFAULT 0,
+    product_id int NOT NULL,
+    title nvarchar(max),
+    comment nvarchar(max),
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (best_id)
+);
+
+CREATE TABLE dtb_mail_history (
+    send_id int NOT NULL,
+    order_id int NOT NULL,
+    send_date datetimeoffset,
+    template_id int,
+    creator_id int NOT NULL,
+    subject nvarchar(max),
+    mail_body nvarchar(max),
+    PRIMARY KEY (send_id)
+);
+
+CREATE TABLE dtb_customer (
+    customer_id int NOT NULL,
+    name01 nvarchar(max) NOT NULL,
+    name02 nvarchar(max) NOT NULL,
+    kana01 nvarchar(max),
+    kana02 nvarchar(max),
+    company_name nvarchar(max),
+    zip01 nvarchar(max),
+    zip02 nvarchar(max),
+    zipcode nvarchar(max),
+    country_id int,
+    pref smallint,
+    addr01 nvarchar(max),
+    addr02 nvarchar(max),
+    email nvarchar(max) NOT NULL,
+    email_mobile nvarchar(max),
+    tel01 nvarchar(max),
+    tel02 nvarchar(max),
+    tel03 nvarchar(max),
+    fax01 nvarchar(max),
+    fax02 nvarchar(max),
+    fax03 nvarchar(max),
+    sex smallint,
+    job smallint,
+    birth datetimeoffset,
+    password nvarchar(max),
+    reminder smallint,
+    reminder_answer nvarchar(max),
+    salt nvarchar(max),
+    secret_key varchar(64) NOT NULL,
+    first_buy_date datetimeoffset,
+    last_buy_date datetimeoffset,
+    buy_times numeric(9) DEFAULT 0,
+    buy_total numeric(9) DEFAULT 0,
+    point numeric(9) NOT NULL DEFAULT 0,
+    note nvarchar(max),
+    status smallint NOT NULL DEFAULT 1,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    mobile_phone_id nvarchar(max),
+    mailmaga_flg smallint,
+    PRIMARY KEY (customer_id),
+    UNIQUE (secret_key)
+);
+
+CREATE TABLE dtb_order (
+    order_id int NOT NULL,
+    order_temp_id nvarchar(max),
+    customer_id int NOT NULL,
+    message nvarchar(max),
+    order_name01 nvarchar(max),
+    order_name02 nvarchar(max),
+    order_kana01 nvarchar(max),
+    order_kana02 nvarchar(max),
+    order_company_name nvarchar(max),
+    order_email nvarchar(max),
+    order_tel01 nvarchar(max),
+    order_tel02 nvarchar(max),
+    order_tel03 nvarchar(max),
+    order_fax01 nvarchar(max),
+    order_fax02 nvarchar(max),
+    order_fax03 nvarchar(max),
+    order_zip01 nvarchar(max),
+    order_zip02 nvarchar(max),
+    order_zipcode nvarchar(max),
+    order_country_id int,
+    order_pref smallint,
+    order_addr01 nvarchar(max),
+    order_addr02 nvarchar(max),
+    order_sex smallint,
+    order_birth datetimeoffset,
+    order_job int,
+    subtotal numeric(9),
+    discount numeric(9) NOT NULL DEFAULT 0,
+    deliv_id int,
+    deliv_fee numeric(9),
+    charge numeric(9),
+    use_point numeric(9) NOT NULL DEFAULT 0,
+    add_point numeric(9) NOT NULL DEFAULT 0,
+    birth_point numeric(9) NOT NULL DEFAULT 0,
+    tax numeric(9),
+    total numeric(9),
+    payment_total numeric(9),
+    payment_id int,
+    payment_method nvarchar(max),
+    note nvarchar(max),
+    status smallint,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    commit_date datetimeoffset,
+    payment_date datetimeoffset,
+    device_type_id int,
+    del_flg smallint NOT NULL DEFAULT 0,
+    memo01 nvarchar(max),
+    memo02 nvarchar(max),
+    memo03 nvarchar(max),
+    memo04 nvarchar(max),
+    memo05 nvarchar(max),
+    memo06 nvarchar(max),
+    memo07 nvarchar(max),
+    memo08 nvarchar(max),
+    memo09 nvarchar(max),
+    memo10 nvarchar(max),
+    PRIMARY KEY (order_id)
+);
+
+CREATE TABLE dtb_order_temp (
+    order_temp_id varchar(32) NOT NULL,
+    customer_id int NOT NULL,
+    message nvarchar(max),
+    order_name01 nvarchar(max),
+    order_name02 nvarchar(max),
+    order_kana01 nvarchar(max),
+    order_kana02 nvarchar(max),
+    order_company_name nvarchar(max),
+    order_email nvarchar(max),
+    order_tel01 nvarchar(max),
+    order_tel02 nvarchar(max),
+    order_tel03 nvarchar(max),
+    order_fax01 nvarchar(max),
+    order_fax02 nvarchar(max),
+    order_fax03 nvarchar(max),
+    order_zip01 nvarchar(max),
+    order_zip02 nvarchar(max),
+    order_zipcode nvarchar(max),
+    order_country_id int,
+    order_pref smallint,
+    order_addr01 nvarchar(max),
+    order_addr02 nvarchar(max),
+    order_sex smallint,
+    order_birth datetimeoffset,
+    order_job int,
+    subtotal numeric(9),
+    discount numeric(9) NOT NULL DEFAULT 0,
+    deliv_id int,
+    deliv_fee numeric(9),
+    charge numeric(9),
+    use_point numeric(9) NOT NULL DEFAULT 0,
+    add_point numeric(9) NOT NULL DEFAULT 0,
+    birth_point numeric(9) NOT NULL DEFAULT 0,
+    tax numeric(9),
+    total numeric(9),
+    payment_total numeric(9),
+    payment_id int,
+    payment_method nvarchar(max),
+    note nvarchar(max),
+    mail_flag smallint,
+    status smallint,
+    deliv_check smallint,
+    point_check smallint,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    device_type_id int,
+    del_flg smallint NOT NULL DEFAULT 0,
+    order_id int,
+    memo01 nvarchar(max),
+    memo02 nvarchar(max),
+    memo03 nvarchar(max),
+    memo04 nvarchar(max),
+    memo05 nvarchar(max),
+    memo06 nvarchar(max),
+    memo07 nvarchar(max),
+    memo08 nvarchar(max),
+    memo09 nvarchar(max),
+    memo10 nvarchar(max),
+    session nvarchar(max),
+    PRIMARY KEY (order_temp_id)
+);
+
+CREATE TABLE dtb_shipping (
+    shipping_id int NOT NULL,
+    order_id int NOT NULL,
+    shipping_name01 nvarchar(max),
+    shipping_name02 nvarchar(max),
+    shipping_kana01 nvarchar(max),
+    shipping_kana02 nvarchar(max),
+    shipping_company_name nvarchar(max),
+    shipping_tel01 nvarchar(max),
+    shipping_tel02 nvarchar(max),
+    shipping_tel03 nvarchar(max),
+    shipping_fax01 nvarchar(max),
+    shipping_fax02 nvarchar(max),
+    shipping_fax03 nvarchar(max),
+    shipping_country_id int,
+    shipping_pref smallint,
+    shipping_zip01 nvarchar(max),
+    shipping_zip02 nvarchar(max),
+    shipping_zipcode nvarchar(max),
+    shipping_addr01 nvarchar(max),
+    shipping_addr02 nvarchar(max),
+    time_id int,
+    shipping_time nvarchar(max),
+    shipping_num nvarchar(max),
+    shipping_date datetimeoffset,
+    shipping_commit_date datetimeoffset,
+    rank int,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (shipping_id, order_id)
+);
+
+CREATE TABLE dtb_shipment_item (
+    shipping_id int NOT NULL,
+    product_class_id int NOT NULL,
+    order_id int NOT NULL,
+    product_name nvarchar(max) NOT NULL,
+    product_code nvarchar(64),
+    classcategory_name1 nvarchar(max),
+    classcategory_name2 nvarchar(max),
+    price numeric(9),
+    quantity numeric(9),
+    PRIMARY KEY (shipping_id, product_class_id, order_id)
+);
+
+CREATE TABLE dtb_other_deliv (
+    other_deliv_id int NOT NULL,
+    customer_id int NOT NULL,
+    name01 nvarchar(max),
+    name02 nvarchar(max),
+    kana01 nvarchar(max),
+    kana02 nvarchar(max),
+    company_name nvarchar(max),
+    zip01 nvarchar(max),
+    zip02 nvarchar(max),
+    zipcode nvarchar(max),
+    country_id int,
+    pref smallint,
+    addr01 nvarchar(max),
+    addr02 nvarchar(max),
+    tel01 nvarchar(max),
+    tel02 nvarchar(max),
+    tel03 nvarchar(max),
+    fax01 nvarchar(max),
+    fax02 nvarchar(max),
+    fax03 nvarchar(max)
+    PRIMARY KEY (other_deliv_id)
+);
+
+CREATE TABLE dtb_order_detail (
+    order_detail_id int NOT NULL,
+    order_id int NOT NULL,
+    product_id int NOT NULL,
+    product_class_id int NOT NULL,
+    product_name nvarchar(max) NOT NULL,
+    product_code nvarchar(64),
+    classcategory_name1 nvarchar(max),
+    classcategory_name2 nvarchar(max),
+    price numeric(9),
+    quantity numeric(9),
+    point_rate numeric(9) NOT NULL DEFAULT 0,
+    tax_rate numeric(9),
+    tax_rule smallint,
+    PRIMARY KEY (order_detail_id)
+);
+
+CREATE TABLE dtb_member (
+    member_id int NOT NULL,
+    name nvarchar(max),
+    department nvarchar(max),
+    login_id nvarchar(max) NOT NULL,
+    password nvarchar(max) NOT NULL,
+    salt nvarchar(max) NOT NULL,
+    authority smallint NOT NULL,
+    rank int NOT NULL DEFAULT 0,
+    work smallint NOT NULL DEFAULT 1,
+    del_flg smallint NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    login_date datetimeoffset,
+    PRIMARY KEY (member_id)
+);
+
+CREATE TABLE dtb_pagelayout (
+    device_type_id int NOT NULL,
+    page_id int NOT NULL,
+    page_name nvarchar(max),
+    url nvarchar(max) NOT NULL,
+    filename nvarchar(max),
+    header_chk smallint DEFAULT 1,
+    footer_chk smallint DEFAULT 1,
+    edit_flg smallint DEFAULT 1,
+    author nvarchar(max),
+    description nvarchar(max),
+    keyword nvarchar(max),
+    update_url nvarchar(max),
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    meta_robots nvarchar(max),
+    PRIMARY KEY (device_type_id, page_id)
+);
+
+CREATE TABLE dtb_bloc (
+    device_type_id int NOT NULL,
+    bloc_id int NOT NULL,
+    bloc_name nvarchar(max),
+    tpl_path nvarchar(max),
+    filename varchar(64) NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    php_path nvarchar(max),
+    deletable_flg smallint NOT NULL DEFAULT 1,
+    plugin_id int,
+    PRIMARY KEY (device_type_id, bloc_id),
+    UNIQUE (device_type_id, filename)
+);
+
+CREATE TABLE dtb_blocposition (
+    device_type_id int NOT NULL,
+    page_id int NOT NULL,
+    target_id int NOT NULL,
+    bloc_id int NOT NULL,
+    bloc_row int,
+    anywhere smallint DEFAULT 0 NOT NULL,
+    PRIMARY KEY (device_type_id, page_id, target_id, bloc_id)
+);
+
+CREATE TABLE dtb_csv (
+    no int,
+    csv_id int NOT NULL,
+    col nvarchar(max),
+    disp_name nvarchar(max),
+    rank int,
+    rw_flg smallint DEFAULT 1,
+    status smallint NOT NULL DEFAULT 1,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    mb_convert_kana_option nvarchar(max),
+    size_const_type nvarchar(max),
+    error_check_types nvarchar(max),
+    PRIMARY KEY (no)
+);
+
+CREATE TABLE dtb_csv_sql (
+    sql_id int,
+    sql_name nvarchar(max) NOT NULL,
+    csv_sql nvarchar(max),
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (sql_id)
+);
+
+CREATE TABLE dtb_templates (
+    template_code varchar(64) NOT NULL,
+    device_type_id int NOT NULL,
+    template_name nvarchar(max),
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (template_code)
+);
+
+CREATE TABLE dtb_maker (
+    maker_id int NOT NULL,
+    name nvarchar(max) NOT NULL,
+    rank int NOT NULL DEFAULT 0,
+    creator_id int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (maker_id)
+);
+
+CREATE TABLE dtb_maker_count (
+    maker_id int NOT NULL,
+    product_count int NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    PRIMARY KEY (maker_id)
+);
+
+CREATE TABLE mtb_pref (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_permission (
+    id varchar(64),
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_disable_logout (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_authority (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_auth_excludes (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_work (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_disp (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_status (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_status_image (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_allowed_tag (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_page_max (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_magazine_type (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_mail_magazine_type (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_recommend (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_taxrule (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_mail_template (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_mail_tpl_path (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_job (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_reminder (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_sex (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_customer_status (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_mail_type (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_order_status (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_product_status_color (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_customer_order_status (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_order_status_color (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_wday (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_delivery_date (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_product_list_max (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_db (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_target (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_review_deny_url (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_mobile_domain (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_ownersstore_err (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_ownersstore_ips (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_constants (
+    id varchar(64),
+    name nvarchar(max),
+    rank smallint NOT NULL DEFAULT 0,
+    remarks nvarchar(max),
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_product_type (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_device_type (
+    id smallint,
+    name nvarchar(max),
+    rank smallint NOT NULL,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE mtb_country (
+    id int,
+    name nvarchar(max),
+    rank int NOT NULL,
+    PRIMARY KEY (id)
+);
+
+CREATE TABLE dtb_mobile_ext_session_id (
+    session_id varchar(64) NOT NULL,
+    param_key nvarchar(max),
+    param_value nvarchar(max),
+    url nvarchar(max),
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    PRIMARY KEY (session_id)
+);
+
+CREATE TABLE dtb_module (
+    module_id int NOT NULL UNIQUE,
+    module_code nvarchar(max) NOT NULL,
+    module_name nvarchar(max) NOT NULL,
+    sub_data nvarchar(max),
+    auto_update_flg smallint NOT NULL DEFAULT 0,
+    del_flg smallint NOT NULL DEFAULT 0,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY(module_id)
+);
+
+CREATE TABLE dtb_session (
+    sess_id varchar(64) NOT NULL,
+    sess_data nvarchar(max),
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (sess_id)
+);
+
+CREATE TABLE dtb_bkup (
+    bkup_name varchar(64),
+    bkup_memo nvarchar(max),
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    PRIMARY KEY (bkup_name)
+);
+
+CREATE TABLE dtb_plugin (
+    plugin_id int NOT NULL,
+    plugin_name nvarchar(max) NOT NULL,
+    plugin_code nvarchar(max) NOT NULL,
+    class_name nvarchar(max) NOT NULL,
+    author nvarchar(max),
+    author_site_url nvarchar(max),
+    plugin_site_url nvarchar(max),
+    plugin_version nvarchar(max),
+    compliant_version nvarchar(max),
+    plugin_description nvarchar(max),
+    priority int NOT NULL DEFAULT 0,
+    enable smallint NOT NULL DEFAULT 0,
+    free_field1 nvarchar(max),
+    free_field2 nvarchar(max),
+    free_field3 nvarchar(max),
+    free_field4 nvarchar(max),
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (plugin_id)
+);
+
+CREATE TABLE dtb_plugin_hookpoint (
+    plugin_hookpoint_id int NOT NULL,
+    plugin_id int NOT NULL,
+    callback nvarchar(max),
+    use_flg smallint NOT NULL DEFAULT 1,
+    hook_point nvarchar(max) NOT NULL,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (plugin_hookpoint_id)
+);
+
+CREATE TABLE dtb_index_list (
+    table_name varchar(64) NOT NULL,
+    column_name varchar(64) NOT NULL,
+    recommend_flg smallint NOT NULL DEFAULT 0,
+    recommend_comment nvarchar(max),
+    PRIMARY KEY (table_name, column_name)
+);
+
+CREATE TABLE dtb_api_config (
+    api_config_id int NOT NULL,
+    operation_name nvarchar(max) NOT NULL,
+    operation_description nvarchar(max),
+    auth_types nvarchar(max) NOT NULL,
+    enable smallint NOT NULL DEFAULT 0,
+    is_log smallint NOT NULL DEFAULT 0,
+    sub_data nvarchar(max),
+    del_flg smallint NOT NULL DEFAULT 0,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (api_config_id)
+);
+
+CREATE TABLE dtb_api_account (
+    api_account_id int NOT NULL,
+    api_access_key nvarchar(max) NOT NULL,
+    api_secret_key nvarchar(max) NOT NULL,
+    enable smallint NOT NULL DEFAULT 0,
+    del_flg smallint NOT NULL DEFAULT 0,
+    create_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (api_account_id)
+);
+
+CREATE TABLE dtb_tax_rule (
+    tax_rule_id int NOT NULL,
+    country_id int NOT NULL DEFAULT 0,
+    pref_id int NOT NULL DEFAULT 0,
+    product_id int NOT NULL DEFAULT 0,
+    product_class_id int NOT NULL DEFAULT 0,
+    calc_rule smallint NOT NULL DEFAULT 1,
+    tax_rate numeric(9) NOT NULL DEFAULT 8,
+    tax_adjust numeric(9) NOT NULL DEFAULT 0,
+    apply_date datetimeoffset NOT NULL DEFAULT CURRENT_TIMESTAMP,
+	member_id int NOT NULL,
+    del_flg smallint NOT NULL DEFAULT 0,
+    create_date datetimeoffset NOT NULL,
+    update_date datetimeoffset NOT NULL,
+    PRIMARY KEY (tax_rule_id)
+);
diff -urNb ec-cube-iis/html/install/sql/insert_data_sqlsrv.sql ec-cube/html/install/sql/insert_data_sqlsrv.sql
--- ec-cube-iis/html/install/sql/insert_data_sqlsrv.sql	1970-01-01 09:00:00.000000000 +0900
+++ ec-cube/html/install/sql/insert_data_sqlsrv.sql	2014-08-05 16:19:13.000000000 +0900
@@ -0,0 +1,1528 @@
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (10, 1, N'カテゴリ', 'category.tpl', 'category', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/category.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (10, 2, N'利用ガイド', 'guide.tpl', 'guide', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (10, 3, N'かごの中', 'cart.tpl', 'cart', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/cart.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (10, 4, N'商品検索', 'search_products.tpl', 'search_products', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/search_products.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (10, 5, N'新着情報', 'news.tpl', 'news', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/news.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (10, 6, N'ログイン', 'login.tpl', 'login', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/login.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (10, 7, N'おすすめ商品', 'recommend.tpl', 'recommend', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/recommend.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (10, 8, N'カレンダー', 'calendar.tpl', 'calendar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/calendar.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (10, 9, N'【ヘッダー】ログイン', 'login_header.tpl', 'login_header', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/login_header.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (1, 1, N'サイトロゴ', 'site_logo.tpl', 'site_logo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (1, 2, N'新着情報', 'news.tpl', 'news', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/news.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (1, 3, N'おすすめ商品', 'recommend.tpl', 'recommend', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/recommend.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (1, 4, N'カテゴリ', 'category.tpl', 'category', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/category.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (2, 1, N'新着情報', 'news.tpl', 'news', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/news.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (2, 2, N'ログイン', 'login.tpl', 'login', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/login.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (2, 3, N'おすすめ商品', 'recommend.tpl', 'recommend', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/recommend.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (2, 4, N'カテゴリ', 'category.tpl', 'category', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/category.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (2, 5, N'【ヘッダー】ログイン', 'login_header.tpl', 'login_header', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/login_header.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (2, 6, N'【ヘッダー】ナビ', 'navi_header.tpl', 'navi_header', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/navi_header.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (2, 7, N'【フッター】ログイン', 'login_footer.tpl', 'login_footer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/login_footer.php', 0);
+INSERT INTO dtb_bloc (device_type_id, bloc_id, bloc_name, tpl_path, filename, create_date, update_date, php_path, deletable_flg) VALUES (2, 8, N'【フッター】ナビ', 'navi_footer.tpl', 'navi_footer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'frontparts/bloc/navi_footer.php', 0);
+
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 1, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 1, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 1, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 1, 3, 4, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 1, 3, 8, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 1, 4, 7, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 1, 4, 5, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 1, 3, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 1, 10, 9, 1, 1);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 2, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 2, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 2, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 3, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 3, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 3, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 4, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 4, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 4, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 5, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 5, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 5, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 6, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 6, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 6, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 7, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 7, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 7, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 8, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 8, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 8, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 9, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 9, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 9, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 10, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 10, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 10, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 11, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 11, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 11, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 12, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 12, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 12, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 13, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 13, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 13, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 14, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 14, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 14, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 15, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 15, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 15, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 16, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 16, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 16, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 17, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 17, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 17, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 18, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 18, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 18, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 19, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 19, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 19, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 20, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 20, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 20, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 21, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 21, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 21, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 22, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 22, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 22, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 23, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 23, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 23, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 24, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 24, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 24, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 25, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 25, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 25, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 26, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 26, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 26, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 27, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 27, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 27, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 28, 1, 1, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 28, 1, 2, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (10, 28, 1, 3, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (1, 1, 10, 1, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (1, 1, 2, 2, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (1, 1, 2, 3, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (1, 1, 2, 4, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 1, 4, 1, 4, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 1, 4, 2, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 1, 4, 3, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 1, 4, 4, 3, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 1, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 1, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 1, 10, 5, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 2, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 2, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 2, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 3, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 3, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 3, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 4, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 4, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 4, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 5, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 5, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 5, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 6, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 6, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 6, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 7, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 7, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 7, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 8, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 8, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 8, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 9, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 9, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 9, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 10, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 10, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 10, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 11, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 11, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 11, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 12, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 12, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 12, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 13, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 13, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 13, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 14, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 14, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 14, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 15, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 15, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 15, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 16, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 16, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 16, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 17, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 17, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 17, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 18, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 18, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 18, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 19, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 19, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 19, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 20, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 20, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 20, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 21, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 21, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 21, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 22, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 22, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 22, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 23, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 23, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 23, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 24, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 24, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 24, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 25, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 25, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 25, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 26, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 26, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 26, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 27, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 27, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 27, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 28, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 28, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 28, 10, 6, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 29, 6, 7, 2, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 29, 6, 8, 1, 0);
+INSERT INTO dtb_blocposition (device_type_id, page_id, target_id, bloc_id, bloc_row, anywhere) VALUES (2, 29, 10, 6, 1, 0);
+
+INSERT INTO dtb_category (category_id, category_name, parent_category_id, level, rank, creator_id, create_date, update_date, del_flg) VALUES (1, N'食品', 0, 1, 5, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_category (category_id, category_name, parent_category_id, level, rank, creator_id, create_date, update_date, del_flg) VALUES (2, N'雑貨', 0, 1, 6, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_category (category_id, category_name, parent_category_id, level, rank, creator_id, create_date, update_date, del_flg) VALUES (3, N'お菓子', 1, 2, 3, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_category (category_id, category_name, parent_category_id, level, rank, creator_id, create_date, update_date, del_flg) VALUES (4, N'なべ', 1, 2, 4, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_category (category_id, category_name, parent_category_id, level, rank, creator_id, create_date, update_date, del_flg) VALUES (5, N'アイス', 3, 3, 2, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_category (category_id, category_name, parent_category_id, level, rank, creator_id, create_date, update_date, del_flg) VALUES (6, N'レシピ', 0, 1, 1, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+
+INSERT INTO dtb_category_count (category_id, product_count, create_date) VALUES (4, 2, CURRENT_TIMESTAMP);
+INSERT INTO dtb_category_count (category_id, product_count, create_date) VALUES (5, 1, CURRENT_TIMESTAMP);
+INSERT INTO dtb_category_count (category_id, product_count, create_date) VALUES (6, 1, CURRENT_TIMESTAMP);
+
+INSERT INTO dtb_category_total_count (category_id, product_count, create_date) VALUES (3, 1, CURRENT_TIMESTAMP);
+INSERT INTO dtb_category_total_count (category_id, product_count, create_date) VALUES (1, 3, CURRENT_TIMESTAMP);
+INSERT INTO dtb_category_total_count (category_id, product_count, create_date) VALUES (2, NULL, CURRENT_TIMESTAMP);
+INSERT INTO dtb_category_total_count (category_id, product_count, create_date) VALUES (5, 1, CURRENT_TIMESTAMP);
+INSERT INTO dtb_category_total_count (category_id, product_count, create_date) VALUES (4, 2, CURRENT_TIMESTAMP);
+INSERT INTO dtb_category_total_count (category_id, product_count, create_date) VALUES (6, 1, CURRENT_TIMESTAMP);
+
+INSERT INTO dtb_class (class_id, name, rank, creator_id, create_date, update_date, del_flg) VALUES (1, N'味', 1, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_class (class_id, name, rank, creator_id, create_date, update_date, del_flg) VALUES (2, N'大きさ', 2, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_classcategory (classcategory_id, name, class_id, rank, creator_id, create_date, update_date, del_flg) VALUES (1, N'バニラ', 1, 1, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_classcategory (classcategory_id, name, class_id, rank, creator_id, create_date, update_date, del_flg) VALUES (2, N'チョコ', 1, 2, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_classcategory (classcategory_id, name, class_id, rank, creator_id, create_date, update_date, del_flg) VALUES (3, N'抹茶', 1, 3, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_classcategory (classcategory_id, name, class_id, rank, creator_id, create_date, update_date, del_flg) VALUES (4, 'L', 2, 1, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_classcategory (classcategory_id, name, class_id, rank, creator_id, create_date, update_date, del_flg) VALUES (5, 'M', 2, 2, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_classcategory (classcategory_id, name, class_id, rank, creator_id, create_date, update_date, del_flg) VALUES (6, 'S', 2, 3, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_classcategory (classcategory_id, name, class_id, rank, creator_id, create_date, update_date, del_flg) VALUES (0, NULL, 0, 0, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (1, 1, 'product_id', N'商品ID', 1, 3, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (2, 1, 'product_class_id', N'商品規格ID', 2, 3, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (3, 1, 'parent_classcategory_id', N'親規格分類ID', 3, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (4, 1, 'classcategory_id', N'規格分類ID', 4, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (5, 1, 'parent_classcategory_name', N'親規格分類名', 5, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (6, 1, 'classcategory_name', N'規格分類名', 6, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (7, 1, 'maker_id', N'メーカーID', 7, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (8, 1, '(SELECT name as maker_name FROM dtb_maker WHERE prdcls.maker_id = dtb_maker.maker_id) as maker_name', N'メーカー名', 8, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (9, 1, 'name', N'商品名', 9, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,EXIST_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (10, 1, 'status', N'表示ステータス(公開・非公開)', 10, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (11, 1, 'comment1', N'メーカーURL(コメント1)', 11, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'URL_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,URL_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (12, 1, 'comment2', N'コメント2', 12, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (13, 1, 'comment3', N'検索ワード(コメント3)', 13, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (14, 1, 'comment4', N'コメント4', 14, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (15, 1, 'comment5', N'コメント5', 15, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (16, 1, 'comment6', N'コメント6', 16, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (17, 1, 'note', N'備考欄(SHOP専用)', 17, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (18, 1, 'main_list_comment', N'一覧-メインコメント', 18, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'MTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,EXIST_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (19, 1, 'main_list_image', N'一覧-メイン画像', 19, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (20, 1, 'main_comment', N'詳細-メインコメント', 20, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,EXIST_CHECK,HTML_TAG_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (21, 1, 'main_image', N'詳細-メイン画像', 21, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (22, 1, 'main_large_image', N'詳細-メイン拡大画像 ', 22, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (23, 1, 'sub_title1', N'詳細-サブタイトル(1)', 23, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (24, 1, 'sub_comment1', N'詳細-サブコメント(1)', 24, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,HTML_TAG_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (25, 1, 'sub_image1', N'詳細-サブ画像(1)', 25, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (26, 1, 'sub_large_image1', N'詳細-サブ拡大画像(1)', 26, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (27, 1, 'sub_title2', N'詳細-サブタイトル(2)', 27, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (28, 1, 'sub_comment2', N'詳細-サブコメント(2)', 28, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (29, 1, 'sub_image2', N'詳細-サブ画像(2)', 29, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (30, 1, 'sub_large_image2', N'詳細-サブ拡大画像(2)', 30, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (31, 1, 'sub_title3', N'詳細-サブタイトル(3)', 31, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (32, 1, 'sub_comment3', N'詳細-サブコメント(3)', 32, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (33, 1, 'sub_image3', N'詳細-サブ画像(3)', 33, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (34, 1, 'sub_large_image3', N'詳細-サブ拡大画像(3)', 34, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (35, 1, 'sub_title4', N'詳細-サブタイトル(4)', 35, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (36, 1, 'sub_comment4', N'詳細-サブコメント(4)', 36, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (37, 1, 'sub_image4', N'詳細-サブ画像(4)', 37, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (38, 1, 'sub_large_image4', N'詳細-サブ拡大画像(4)', 38, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (39, 1, 'sub_title5', N'詳細-サブタイトル(5)', 39, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (40, 1, 'sub_comment5', N'詳細-サブコメント(5)', 40, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (41, 1, 'sub_image5', N'詳細-サブ画像(5)', 41, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (42, 1, 'sub_large_image5', N'詳細-サブ拡大画像(5)', 42, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (43, 1, 'deliv_date_id', N'発送日目安ID', 43, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (44, 1, 'del_flg', N'削除フラグ', 44, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (45, 1, 'product_type_id', N'商品種別ID', 45, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (46, 1, 'product_code', N'商品コード', 46, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (47, 1, 'stock', N'在庫数', 47, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'AMOUNT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (48, 1, 'stock_unlimited', N'在庫無制限フラグ', 48, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (49, 1, 'sale_limit', N'販売制限数', 49, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'AMOUNT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (50, 1, 'price01', N'通常価格', 50, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (51, 1, 'price02', N'販売価格', 51, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK,EXIST_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (52, 1, 'deliv_fee', N'送料', 52, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (53, 1, 'point_rate', N'ポイント付与率', 53, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PERCENTAGE_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (54, 1, 'down_filename', N'ダウンロードファイル名', 54, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (55, 1, 'down_realfilename', N'ダウンロード実ファイル', 55, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,DOWN_FILE_EXISTS');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (56, 1, '(SELECT recommend_product_id FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 0) AS recommend_product_id1', N'関連商品ID(1)', 56, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (57, 1, '(SELECT comment FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 0) AS recommend_comment1', N'関連商品コメント(1)', 57, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (58, 1, '(SELECT recommend_product_id FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 1) AS recommend_product_id2', N'関連商品ID(2)', 58, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (59, 1, '(SELECT comment FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 1) AS recommend_comment2', N'関連商品コメント(2)', 59, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (60, 1, '(SELECT recommend_product_id FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 2) AS recommend_product_id3', N'関連商品ID(3)', 60, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (61, 1, '(SELECT comment FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 2) AS recommend_comment3', N'関連商品コメント(3)', 61, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (62, 1, '(SELECT recommend_product_id FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 3) AS recommend_product_id4', N'関連商品ID(4)', 62, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (63, 1, '(SELECT comment FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 3) AS recommend_comment4', N'関連商品コメント(4)', 63, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (64, 1, '(SELECT recommend_product_id FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 4) AS recommend_product_id5', N'関連商品ID(5)', 64, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (65, 1, '(SELECT comment FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 4) AS recommend_comment5', '関連商品コメント(5)', 65, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (66, 1, '(SELECT recommend_product_id FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 5) AS recommend_product_id6', N'関連商品ID(6)', 66, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (67, 1, '(SELECT comment FROM dtb_recommend_products WHERE prdcls.product_id = dtb_recommend_products.product_id ORDER BY rank DESC, recommend_product_id DESC limit 1 offset 5) AS recommend_comment6', N'関連商品コメント(6)', 67, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (68, 1, '(SELECT ARRAY_TO_STRING(ARRAY(SELECT product_status_id FROM dtb_product_status WHERE dtb_product_status.product_id = prdcls.product_id and del_flg = 0 ORDER BY dtb_product_status.product_status_id), '','')) as product_statuses', N'商品ステータス', 68, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (69, 1, '(SELECT ARRAY_TO_STRING(ARRAY(SELECT name FROM dtb_product_status LEFT JOIN mtb_status ON  dtb_product_status.product_status_id = mtb_status.id  WHERE dtb_product_status.product_id = prdcls.product_id and del_flg = 0 ORDER BY dtb_product_status.product_status_id), '','')) as product_status_names', N'商品ステータス名', 69, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (70, 1, '(SELECT ARRAY_TO_STRING(ARRAY(SELECT category_id FROM dtb_product_categories WHERE dtb_product_categories.product_id = prdcls.product_id ORDER BY dtb_product_categories.rank), '','')) as category_ids', N'カテゴリID', 70, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (71, 1, '(SELECT ARRAY_TO_STRING(ARRAY(SELECT category_name FROM dtb_product_categories LEFT JOIN dtb_category ON dtb_product_categories.category_id = dtb_category.category_id WHERE dtb_product_categories.product_id = prdcls.product_id ORDER BY dtb_product_categories.rank), '','')) as category_names', N'カテゴリ名', 71, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (72, 2, 'customer_id', N'会員ID', 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (73, 2, 'name01', N'お名前(姓)', 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (74, 2, 'name02', N'お名前(名)', 3, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (75, 2, 'kana01', N'お名前(フリガナ・姓)', 4, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (76, 2, 'kana02', N'お名前(フリガナ・名)', 5, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (77, 2, 'zip01', N'郵便番号1', 6, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (78, 2, 'zip02', N'郵便番号2', 7, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (79, 2, '(SELECT name FROM mtb_pref WHERE mtb_pref.id = dtb_customer.pref) as pref', N'都道府県', 8, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (80, 2, 'addr01', N'住所1', 9, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (81, 2, 'addr02', N'住所2', 10, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (82, 2, 'email', 'E-MAIL', 11, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (83, 2, 'tel01', 'TEL1', 12, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (84, 2, 'tel02', 'TEL2', 13, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (85, 2, 'tel03', 'TEL3', 14, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (86, 2, 'fax01', 'FAX1', 15, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (87, 2, 'fax02', 'FAX2', 16, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (88, 2, 'fax03', 'FAX3', 17, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (89, 2, '(SELECT name FROM mtb_sex WHERE mtb_sex.id = dtb_customer.sex) as sex', N'性別', 18, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (90, 2, '(SELECT name FROM mtb_job WHERE mtb_job.id = dtb_customer.job) as job', N'職業', 19, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (91, 2, 'birth', N'誕生日', 20, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (92, 2, 'first_buy_date', N'初回購入日', 21, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (93, 2, 'last_buy_date', N'最終購入日', 22, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (94, 2, 'buy_times', N'購入回数', 23, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (95, 2, 'point', N'ポイント残高', 24, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (96, 2, 'note', N'備考', 25, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (97, 2, 'create_date', N'登録日', 26, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, status, create_date, update_date) VALUES (98, 2, 'update_date', N'更新日', 27, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (99, 3, 'order_id', N'注文番号', 1, 3, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (100, 3, 'customer_id', N'会員ID', 2, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (101, 3, 'message', N'要望等', 3, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (102, 3, 'order_name01', N'お名前(姓)', 4, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,EXIST_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (103, 3, 'order_name02', N'お名前(名)', 5, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,EXIST_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (104, 3, 'order_kana01', N'お名前(フリガナ・姓)', 6, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVCa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (105, 3, 'order_kana02', N'お名前(フリガナ名)', 7, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVCa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (106, 3, 'order_email', N'メールアドレス', 8, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'a', 'null', 'NO_SPTAB,EMAIL_CHECK,EMAIL_CHAR_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (107, 3, 'order_tel01', N'電話番号1', 9, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'TEL_ITEM_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (108, 3, 'order_tel02', N'電話番号2', 10, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'TEL_ITEM_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (109, 3, 'order_tel03', N'電話番号3', 11, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'TEL_ITEM_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (110, 3, 'order_fax01', 'FAX1', 12, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'TEL_ITEM_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (111, 3, 'order_fax02', 'FAX2', 13, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'TEL_ITEM_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (112, 3, 'order_fax03', 'FAX3', 14, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'TEL_ITEM_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (113, 3, 'order_zip01', N'郵便番号1', 15, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'ZIP01_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK,NUM_COUNT_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (114, 3, 'order_zip02', N'郵便番号2', 16, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'ZIP02_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK,NUM_COUNT_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (115, 3, '(SELECT name FROM mtb_pref WHERE mtb_pref.id = dtb_order.order_pref) as pref', N'都道府県', 17, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (116, 3, 'order_addr01', N'住所1', 18, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'MTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (117, 3, 'order_addr02', N'住所2', 19, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'MTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (118, 3, 'order_sex', N'性別', 20, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (119, 3, 'order_birth', N'生年月日', 21, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (120, 3, 'order_job', N'職種', 22, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (121, 3, 'subtotal', N'小計', 38, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (122, 3, 'discount', N'値引き', 39, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (123, 3, 'deliv_fee', N'送料', 40, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (124, 3, 'charge', N'手数料', 41, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (125, 3, 'use_point', N'使用ポイント', 42, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (126, 3, 'add_point', N'加算ポイント', 43, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (127, 3, 'tax', N'税金', 44, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (128, 3, 'total', N'合計', 45, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (129, 3, 'payment_total', N'お支払い合計', 46, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'PRICE_LEN', 'MAX_LENGTH_CHECK,NUM_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (130, 3, 'deliv_id', N'配送業者ID', 47, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (131, 3, 'payment_method', N'支払い方法', 48, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (132, 3, 'note', N'SHOPメモ', 50, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LLTEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (133, 3, 'status', N'対応状況', 51, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (134, 3, 'create_date', N'注文日時', 52, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'a', '', 'CHECK_DATE');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (135, 3, 'update_date', N'更新日時', 53, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'a', '', 'CHECK_DATE');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (136, 3, 'commit_date', N'発送完了日時', 54, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'a', '', 'CHECK_DATE');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (137, 3, 'device_type_id', N'端末種別ID', 55, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (138, 3, '(SELECT COUNT(shipping_id) as shipping_target_num FROM dtb_shipping WHERE dtb_shipping.order_id = dtb_order.order_id) as shipping_num', N'配送先数', 56, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (139, 3, '(SELECT ARRAY_TO_STRING(ARRAY(SELECT shipping_id FROM dtb_shipping WHERE dtb_shipping.order_id = dtb_order.order_id), '','')) as shipping_ids', N'配送情報ID', 57, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (140, 4, 'B.name', N'商品名', 1, 2, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (141, 4, '(SELECT name FROM mtb_disp WHERE mtb_disp.id = A.status) as status', N'レビュー表示', 2, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (142, 4, 'A.create_date', N'投稿日', 3, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'a', '', 'CHECK_DATE,EXIST_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (143, 4, 'A.reviewer_name', N'投稿者名', 4, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (144, 4, '(SELECT name FROM mtb_sex WHERE mtb_sex.id = A.sex) as sex', N'性別', 5, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (145, 4, '(SELECT name FROM mtb_recommend WHERE mtb_recommend.id = A.recommend_level) as recommend_level', N'おすすめレベル', 6, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (146, 4, 'A.title', N'タイトル', 7, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (147, 4, 'A.comment', N'コメント', 8, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'LTEXT_LEN', 'MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (148, 5, 'category_id', N'カテゴリID', 1, 3, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (149, 5, 'category_name', N'カテゴリ名', 2, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'KVa', 'STEXT_LEN', 'SPTAB_CHECK,MAX_LENGTH_CHECK,EXIST_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (150, 5, 'parent_category_id', N'親カテゴリID', 3, 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (151, 5, 'level', N'階層', NULL, 2, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (152, 5, 'rank', N'表示ランク', NULL, 2, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+INSERT INTO dtb_csv (no, csv_id, col, disp_name, rank, rw_flg, status, create_date, update_date, mb_convert_kana_option, size_const_type, error_check_types) VALUES (153, 5, 'del_flg', N'削除フラグ', NULL, 1, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'n', 'INT_LEN', 'NUM_CHECK,MAX_LENGTH_CHECK');
+
+INSERT INTO dtb_deliv (deliv_id, product_type_id, name, service_name, confirm_url, rank, status, del_flg, creator_id, create_date, update_date) VALUES (1, 1, N'サンプル業者', N'サンプル業者', NULL, 2, 1, 0, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_deliv (deliv_id, product_type_id, name, service_name, confirm_url, rank, status, del_flg, creator_id, create_date, update_date) VALUES (2, 2, N'配送無し(ダウンロード商品用)', N'なし', NULL, 1, 1, 0, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+
+INSERT INTO dtb_payment_options (deliv_id, payment_id, rank) VALUES (1, 1, 1);
+INSERT INTO dtb_payment_options (deliv_id, payment_id, rank) VALUES (1, 2, 2);
+INSERT INTO dtb_payment_options (deliv_id, payment_id, rank) VALUES (1, 3, 3);
+INSERT INTO dtb_payment_options (deliv_id, payment_id, rank) VALUES (1, 4, 4);
+INSERT INTO dtb_payment_options (deliv_id, payment_id, rank) VALUES (2, 3, 1);
+
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 1, 1000, 1);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 2, 1000, 2);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 3, 1000, 3);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 4, 1000, 4);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 5, 1000, 5);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 6, 1000, 6);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 7, 1000, 7);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 8, 1000, 8);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 9, 1000, 9);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 10, 1000, 10);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 11, 1000, 11);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 12, 1000, 12);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 13, 1000, 13);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 14, 1000, 14);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 15, 1000, 15);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 16, 1000, 16);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 17, 1000, 17);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 18, 1000, 18);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 19, 1000, 19);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 20, 1000, 20);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 21, 1000, 21);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 22, 1000, 22);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 23, 1000, 23);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 24, 1000, 24);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 25, 1000, 25);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 26, 1000, 26);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 27, 1000, 27);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 28, 1000, 28);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 29, 1000, 29);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 30, 1000, 30);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 31, 1000, 31);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 32, 1000, 32);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 33, 1000, 33);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 34, 1000, 34);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 35, 1000, 35);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 36, 1000, 36);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 37, 1000, 37);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 38, 1000, 38);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 39, 1000, 39);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 40, 1000, 40);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 41, 1000, 41);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 42, 1000, 42);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 43, 1000, 43);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 44, 1000, 44);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 45, 1000, 45);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 46, 1000, 46);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (1, 47, 1000, 47);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 1, 0, 1);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 2, 0, 2);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 3, 0, 3);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 4, 0, 4);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 5, 0, 5);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 6, 0, 6);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 7, 0, 7);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 8, 0, 8);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 9, 0, 9);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 10, 0, 10);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 11, 0, 11);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 12, 0, 12);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 13, 0, 13);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 14, 0, 14);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 15, 0, 15);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 16, 0, 16);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 17, 0, 17);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 18, 0, 18);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 19, 0, 19);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 20, 0, 20);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 21, 0, 21);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 22, 0, 22);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 23, 0, 23);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 24, 0, 24);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 25, 0, 25);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 26, 0, 26);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 27, 0, 27);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 28, 0, 28);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 29, 0, 29);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 30, 0, 30);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 31, 0, 31);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 32, 0, 32);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 33, 0, 33);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 34, 0, 34);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 35, 0, 35);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 36, 0, 36);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 37, 0, 37);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 38, 0, 38);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 39, 0, 39);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 40, 0, 40);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 41, 0, 41);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 42, 0, 42);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 43, 0, 43);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 44, 0, 44);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 45, 0, 45);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 46, 0, 46);
+INSERT INTO dtb_delivfee (deliv_id, fee_id, fee, pref) VALUES (2, 47, 0, 47);
+
+INSERT INTO dtb_delivtime (deliv_id, time_id, deliv_time) VALUES (1, 1, N'午前');
+INSERT INTO dtb_delivtime (deliv_id, time_id, deliv_time) VALUES (1, 2, N'午後');
+
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (1, N'元旦(1月1日)', 1, 1, 100, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (2, N'成人の日(1月第2月曜日)', 1, 14, 99, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (3, N'建国記念の日(2月11日)', 2, 11, 98, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (4, N'春分の日(3月21日)', 3, 21, 97, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (5, N'昭和の日(4月29日)', 4, 29, 96, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (6, N'憲法記念日(5月3日)', 5, 3, 95, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (7, N'みどりの日(5月4日)', 5, 4, 94, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (8, N'こどもの日(5月5日)', 5, 5, 93, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (9, N'海の日(7月第3月曜日)', 7, 21, 92, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (10, N'敬老の日(9月第3月曜日)', 9, 15, 91, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (11, N'秋分の日(9月23日)', 9, 23, 90, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (12, N'体育の日(10月第2月曜日)', 10, 13, 89, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (13, N'文化の日(11月3日)', 11, 3, 88, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (14, N'勤労感謝の日(11月23日)', 11, 23, 87, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_holiday (holiday_id, title, month, day, rank, creator_id, create_date, update_date, del_flg) VALUES (15, N'天皇誕生日(12月23日)', 12, 23, 86, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (1, N'第1条 (会員)', N'1. 「会員」とは、当社が定める手続に従い本規約に同意の上、入会の申し込みを行う個人をいいます。
+2. 「会員情報」とは、会員が当社に開示した会員の属性に関する情報および会員の取引に関する履歴等の情報をいいます。
+3. 本規約は、すべての会員に適用され、登録手続時および登録後にお守りいただく規約です。', 12, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (2, N'第2条 (登録)', N'1. 会員資格
+本規約に同意の上、所定の入会申込みをされたお客様は、所定の登録手続完了後に会員としての資格を有します。会員登録手続は、会員となるご本人が行ってください。代理による登録は一切認められません。なお、過去に会員資格が取り消された方やその他当社が相応しくないと判断した方からの会員申込はお断りする場合があります。
+
+2. 会員情報の入力
+会員登録手続の際には、入力上の注意をよく読み、所定の入力フォームに必要事項を正確に入力してください。会員情報の登録において、特殊記号・旧漢字・ローマ数字などはご使用になれません。これらの文字が登録された場合は当社にて変更致します。
+
+3. パスワードの管理
+(1)パスワードは会員本人のみが利用できるものとし、第三者に譲渡・貸与できないものとします。
+(2)パスワードは、他人に知られることがないよう定期的に変更する等、会員本人が責任をもって管理してください。
+(3)パスワードを用いて当社に対して行われた意思表示は、会員本人の意思表示とみなし、そのために生じる支払等はすべて会員の責任となります。', 11, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (3, N'第3条 (変更)', N'1. 会員は、氏名、住所など当社に届け出た事項に変更があった場合には、速やかに当社に連絡するものとします。
+2. 変更登録がなされなかったことにより生じた損害について、当社は一切責任を負いません。また、変更登録がなされた場合でも、変更登録前にすでに手続がなされた取引は、変更登録前の情報に基づいて行われますのでご注意ください。', 10, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (4, N'第4条 (退会)', N'会員が退会を希望する場合には、会員本人が退会手続きを行ってください。所定の退会手続の終了後に、退会となります。', 9, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (5, N'第5条 (会員資格の喪失及び賠償義務)', N'1. 会員が、会員資格取得申込の際に虚偽の申告をしたとき、通信販売による代金支払債務を怠ったとき、その他当社が会員として不適当と認める事由があるときは、当社は、会員資格を取り消すことができることとします。
+2. 会員が、以下の各号に定める行為をしたときは、これにより当社が被った損害を賠償する責任を負います。
+(1)会員番号、パスワードを不正に使用すること
+(2)当ホームページにアクセスして情報を改ざんしたり、当ホームページに有害なコンピュータープログラムを送信するなどして、当社の営業を妨害すること
+(3)当社が扱う商品の知的所有権を侵害する行為をすること
+(4)その他、この利用規約に反する行為をすること', 8, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (6, N'第6条 (会員情報の取扱い)', N'1. 当社は、原則として会員情報を会員の事前の同意なく第三者に対して開示することはありません。ただし、次の各号の場合には、会員の事前の同意なく、当社は会員情報その他のお客様情報を開示できるものとします。
+(1)法令に基づき開示を求められた場合
+(2)当社の権利、利益、名誉等を保護するために必要であると当社が判断した場合
+2. 会員情報につきましては、当社の「個人情報保護への取組み」に従い、当社が管理します。当社は、会員情報を、会員へのサービス提供、サービス内容の向上、サービスの利用促進、およびサービスの健全かつ円滑な運営の確保を図る目的のために、当社おいて利用することができるものとします。
+3. 当社は、会員に対して、メールマガジンその他の方法による情報提供(広告を含みます)を行うことができるものとします。会員が情報提供を希望しない場合は、当社所定の方法に従い、その旨を通知して頂ければ、情報提供を停止します。ただし、本サービス運営に必要な情報提供につきましては、会員の希望により停止をすることはできません。', 7, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (7, N'第7条 (禁止事項)', N'本サービスの利用に際して、会員に対し次の各号の行為を行うことを禁止します。
+
+1. 法令または本規約、本サービスご利用上のご注意、本サービスでのお買い物上のご注意その他の本規約等に違反すること
+2. 当社、およびその他の第三者の権利、利益、名誉等を損ねること
+3. 青少年の心身に悪影響を及ぼす恐れがある行為、その他公序良俗に反する行為を行うこと
+4. 他の利用者その他の第三者に迷惑となる行為や不快感を抱かせる行為を行うこと
+5. 虚偽の情報を入力すること
+6. 有害なコンピュータープログラム、メール等を送信または書き込むこと
+7. 当社のサーバーその他のコンピューターに不正にアクセスすること
+8. パスワードを第三者に貸与・譲渡すること、または第三者と共用すること
+9. その他当社が不適切と判断すること', 6, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (8, N'第8条 (サービスの中断・停止等)', N'1. 当社は、本サービスの稼動状態を良好に保つために、次の各号の一に該当する場合、予告なしに、本サービスの提供全てあるいは一部を停止することがあります。
+(1)システムの定期保守および緊急保守のために必要な場合
+(2)システムに負荷が集中した場合
+(3)火災、停電、第三者による妨害行為などによりシステムの運用が困難になった場合
+(4)その他、止むを得ずシステムの停止が必要と当社が判断した場合', 5, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (9, N'第9条 (サービスの変更・廃止)', N'当社は、その判断によりサービスの全部または一部を事前の通知なく、適宜変更・廃止できるものとします。', 4, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (10, N'第10条 (免責)', N'1. 通信回線やコンピューターなどの障害によるシステムの中断・遅滞・中止・データの消失、データへの不正アクセスにより生じた損害、その他当社のサービスに関して会員に生じた損害について、当社は一切責任を負わないものとします。
+2. 当社は、当社のウェブページ・サーバー・ドメインなどから送られるメール・コンテンツに、コンピューター・ウィルスなどの有害なものが含まれていないことを保証いたしません。
+3. 会員が本規約等に違反したことによって生じた損害については、当社は一切責任を負いません。', 3, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (11, N'第11条 (本規約の改定)', N'当社は、本規約を任意に改定できるものとし、また、当社において本規約を補充する規約(以下「補充規約」といいます)を定めることができます。本規約の改定または補充は、改定後の本規約または補充規約を当社所定のサイトに掲示したときにその効力を生じるものとします。この場合、会員は、改定後の規約および補充規約に従うものと致します。', 2, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_kiyaku (kiyaku_id, kiyaku_title, kiyaku_text, rank, creator_id, create_date, update_date, del_flg) VALUES (12, N'第12条 (準拠法、管轄裁判所)', N'本規約に関して紛争が生じた場合、当社本店所在地を管轄する地方裁判所を第一審の専属的合意管轄裁判所とします。 ', 1, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+
+INSERT INTO dtb_mailtemplate (template_id, subject, header, footer, creator_id, del_flg, create_date, update_date) VALUES (1, N'ご注文ありがとうございます', N'この度はご注文いただき誠にありがとうございます。
+下記ご注文内容にお間違えがないかご確認下さい。
+
+', N'
+============================================
+
+
+このメッセージはお客様へのお知らせ専用ですので、
+このメッセージへの返信としてご質問をお送りいただいても回答できません。
+ご了承ください。
+
+ご質問やご不明な点がございましたら、こちらからお願いいたします。
+
+', 0, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_mailtemplate (template_id, subject, header, footer, creator_id, del_flg, create_date, update_date) VALUES (5, N'お問い合わせを受け付けました', NULL, NULL, 0, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+
+INSERT INTO dtb_member (member_id, name, department, login_id, password, salt, authority, rank, work, del_flg, creator_id, update_date, create_date, login_date) VALUES (1, 'dummy', NULL, 'dummy', 'dummy', 'dummy', 0, 0, 1, 1, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL);
+
+INSERT INTO dtb_module (module_id, module_code, module_name, sub_data, auto_update_flg, del_flg, create_date, update_date) VALUES (0, '0', 'patch', NULL, 0, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+
+INSERT INTO dtb_news (news_id, news_date, rank, news_title, news_comment, news_url, news_select, link_method, creator_id, create_date, update_date, del_flg) VALUES (1, CURRENT_TIMESTAMP, 1, N'サイトオープンいたしました!', N'一人暮らしからオフィスなどさまざまなシーンで あなたの生活をサポートするグッズをご家庭へお届けします！一人暮らしからオフィスなどさまざまなシーンで あなたの生活をサポートするグッズをご家庭へお届けします！一人暮らしからオフィスなどさまざまなシーンで あなたの生活をサポートするグッズをご家庭へお届けします！', NULL, 0, NULL, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 0, N'プレビューデータ', 'preview', NULL, 1, 1, 1, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 1, N'TOPページ', 'index.php', 'index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 2, N'商品一覧ページ', 'products/list.php', 'products/list', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 3, N'商品詳細ページ', 'products/detail.php', 'products/detail', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 4, N'MYページ', 'mypage/index.php', 'mypage/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 5, N'MYページ/会員登録内容変更(入力ページ)', 'mypage/change.php', 'mypage/change', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 6, N'MYページ/会員登録内容変更(完了ページ)', 'mypage/change_complete.php', 'mypage/change_complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 7, N'MYページ/お届け先追加･変更', 'mypage/delivery.php', 'mypage/delivery', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 8, N'MYページ/お気に入り一覧', 'mypage/favorite.php', 'mypage/favorite', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 9, N'MYページ/購入履歴詳細', 'mypage/history.php', 'mypage/history', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 10, N'MYページ/ログイン', 'mypage/login.php', 'mypage/login', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 11, N'MYページ/退会手続き(入力ページ)', 'mypage/refusal.php', 'mypage/refusal', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 12, N'MYページ/退会手続き(完了ページ)', 'mypage/refusal_complete.php', 'mypage/refusal_complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 13, N'当サイトについて', 'abouts/index.php', 'abouts/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 14, N'現在のカゴの中', 'cart/index.php', 'cart/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 15, N'お問い合わせ(入力ページ)', 'contact/index.php', 'contact/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 16, N'お問い合わせ(完了ページ)', 'contact/complete.php', 'contact/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 17, N'会員登録(入力ページ)', 'entry/index.php', 'entry/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 18, N'ご利用規約', 'entry/kiyaku.php', 'entry/kiyaku', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 19, N'会員登録(完了ページ)', 'entry/complete.php', 'entry/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 20, N'特定商取引に関する法律に基づく表記', 'order/index.php', 'order/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 21, N'本会員登録(完了ページ)', 'regist/complete.php', 'regist/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 22, N'商品購入/ログイン', 'shopping/index.php', 'shopping/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 23, N'商品購入/お届け先の指定', 'shopping/deliv.php', 'shopping/deliv', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 24, N'商品購入/お届け先の複数指定', 'shopping/multiple.php', 'shopping/multiple', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 25, N'商品購入/お支払方法・お届け時間等の指定', 'shopping/payment.php', 'shopping/payment', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 26, N'商品購入/ご入力内容のご確認', 'shopping/confirm.php', 'shopping/confirm', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 27, N'商品購入/ご注文完了', 'shopping/complete.php', 'shopping/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (10, 28, N'プライバシーポリシー', 'guide/privacy.php', 'guide/privacy', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 0, NULL, 'preview', 'preview', 1, 1, 1, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 1, N'TOPページ', 'index.php', 'index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 2, N'商品一覧ページ', 'products/list.php', 'products/list', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 3, N'商品詳細ページ', 'products/detail.php', 'products/detail', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 4, N'MYページ', 'mypage/index.php', 'mypage/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 5, N'MYページ/会員登録内容変更(入力ページ)', 'mypage/change.php', 'mypage/change', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 6, N'MYページ/会員登録内容変更(完了ページ)', 'mypage/change_complete.php', 'mypage/change_complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 7, N'MYページ/お届け先追加･変更', 'mypage/delivery.php', 'mypage/delivery', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 8, N'MYページ/お気に入り一覧', 'mypage/favorite.php', 'mypage/favorite', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 9, N'MYページ/購入履歴詳細', 'mypage/history.php', 'mypage/history', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 10, N'MYページ/ログイン', 'mypage/login.php', 'mypage/login', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 11, N'MYページ/退会手続き(入力ページ)', 'mypage/refusal.php', 'mypage/refusal', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 12, N'MYページ/退会手続き(完了ページ)', 'mypage/refusal_complete.php', 'mypage/refusal_complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 13, N'当サイトについて', 'abouts/index.php', 'abouts/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 14, N'現在のカゴの中', 'cart/index.php', 'cart/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 15, N'お問い合わせ(入力ページ)', 'contact/index.php', 'contact/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 16, N'お問い合わせ(完了ページ)', 'contact/complete.php', 'contact/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 17, N'会員登録(入力ページ)', 'entry/index.php', 'entry/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 18, N'ご利用規約', 'entry/kiyaku.php', 'entry/kiyaku', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 19, N'会員登録(完了ページ)', 'entry/complete.php', 'entry/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 20, N'特定商取引に関する法律に基づく表記', 'order/index.php', 'order/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 21, N'本会員登録(完了ページ)', 'regist/complete.php', 'regist/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 22, N'商品購入/ログイン', 'shopping/index.php', 'shopping/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 23, N'商品購入/お届け先の指定', 'shopping/deliv.php', 'shopping/deliv', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 24, N'商品購入/お届け先の複数指定', 'shopping/multiple.php', 'shopping/multiple', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 25, N'商品購入/お支払方法・お届け時間等の指定', 'shopping/payment.php', 'shopping/payment', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 26, N'商品購入/ご入力内容のご確認', 'shopping/confirm.php', 'shopping/confirm', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 27, N'商品購入/ご注文完了', 'shopping/complete.php', 'shopping/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 28, N'プライバシーポリシー', 'guide/privacy.php', 'guide/privacy', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (2, 29, N'パスワードを忘れた方', 'forgot/index.php', 'forgot/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 0, NULL, 'preview', 'preview', 1, 1, 1, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 1, N'TOPページ', 'index.php', 'index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 2, N'商品一覧ページ', 'products/list.php', 'products/list', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 3, N'商品検索ページ', 'products/search.php', 'products/search', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 4, N'商品カテゴリページ', 'products/category_list.php', 'products/category_list', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 5, N'商品詳細ページ', 'products/detail.php', 'products/detail', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 6, N'MYページ', 'mypage/index.php', 'mypage/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 7, N'MYページ/会員登録内容変更(入力ページ)', 'mypage/change.php', 'mypage/change', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 8, N'MYページ/会員登録内容変更(完了ページ)', 'mypage/change_complete.php', 'mypage/change_complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 9, N'MYページ/お届け先追加･変更', 'mypage/delivery.php', 'mypage/delivery', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 10, N'MYページ/お気に入り一覧', 'mypage/favorite.php', 'mypage/favorite', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 11, N'MYページ/購入履歴詳細', 'mypage/history.php', 'mypage/history', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 12, N'MYページ/ログイン', 'mypage/login.php', 'mypage/login', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 13, N'MYページ/退会手続き(入力ページ)', 'mypage/refusal.php', 'mypage/refusal', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 14, N'MYページ/退会手続き(完了ページ)', 'mypage/refusal_complete.php', 'mypage/refusal_complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 15, N'当サイトについて', 'abouts/index.php', 'abouts/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 16, N'現在のカゴの中', 'cart/index.php', 'cart/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 17, N'お問い合わせ(入力ページ)', 'contact/index.php', 'contact/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 18, N'お問い合わせ(完了ページ)', 'contact/complete.php', 'contact/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 19, N'会員登録(入力ページ)', 'entry/index.php', 'entry/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 20, N'ご利用規約', 'entry/kiyaku.php', 'entry/kiyaku', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 21, N'会員登録(完了ページ)', 'entry/complete.php', 'entry/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 22, N'携帯メール登録', 'entry/email_mobile.php', 'entry/email_mobile', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 23, N'特定商取引に関する法律に基づく表記', 'order/index.php', 'order/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 24, N'本会員登録(完了ページ)', 'regist/complete.php', 'regist/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 25, N'商品購入/ログイン', 'shopping/index.php', 'shopping/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 26, N'商品購入/お届け先の指定', 'shopping/deliv.php', 'shopping/deliv', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 27, N'商品購入/お届け先の複数指定', 'shopping/multiple.php', 'shopping/multiple', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 28, N'商品購入/お支払方法・お届け時間等の指定', 'shopping/payment.php', 'shopping/payment', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 29, N'商品購入/ご入力内容のご確認', 'shopping/confirm.php', 'shopping/confirm', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 30, N'商品購入/ご注文完了', 'shopping/complete.php', 'shopping/complete', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 31, N'非対応デバイス', 'unsupported/index.php', 'unsupported/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 32, N'ご利用ガイド', 'guide/index.php', 'guide/index', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 33, N'ご利用ガイド/ご利用方法', 'guide/usage.php', 'guide/usage', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 34, N'ご利用ガイド/プライバシーポリシー', 'guide/privacy.php', 'guide/privacy', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 35, N'ご利用ガイド/通信料について', 'guide/charge.php', 'guide/charge', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 36, N'ご利用ガイド/ご利用規約', 'guide/kiyaku.php', 'guide/kiyaku', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_pagelayout (device_type_id, page_id, page_name, url, filename, header_chk, footer_chk, edit_flg, author, description, keyword, update_url, create_date, update_date) VALUES (1, 37, N'ご利用ガイド/運営会社紹介', 'guide/about.php', 'guide/about', 1, 1, 2, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+
+INSERT INTO dtb_payment (payment_id, payment_method, charge, rule_max, rank, note, fix, status, del_flg, creator_id, create_date, update_date, payment_image, upper_rule, charge_flg, rule_min, upper_rule_max, module_id, module_path, memo01, memo02, memo03, memo04, memo05, memo06, memo07, memo08, memo09, memo10) VALUES (1, N'郵便振替', 0, NULL, 4, NULL, 2, 1, 0, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
+INSERT INTO dtb_payment (payment_id, payment_method, charge, rule_max, rank, note, fix, status, del_flg, creator_id, create_date, update_date, payment_image, upper_rule, charge_flg, rule_min, upper_rule_max, module_id, module_path, memo01, memo02, memo03, memo04, memo05, memo06, memo07, memo08, memo09, memo10) VALUES (2, N'現金書留', 0, NULL, 3, NULL, 2, 1, 0, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
+INSERT INTO dtb_payment (payment_id, payment_method, charge, rule_max, rank, note, fix, status, del_flg, creator_id, create_date, update_date, payment_image, upper_rule, charge_flg, rule_min, upper_rule_max, module_id, module_path, memo01, memo02, memo03, memo04, memo05, memo06, memo07, memo08, memo09, memo10) VALUES (3, N'銀行振込', 0, NULL, 2, NULL, 2, 1, 0, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
+INSERT INTO dtb_payment (payment_id, payment_method, charge, rule_max, rank, note, fix, status, del_flg, creator_id, create_date, update_date, payment_image, upper_rule, charge_flg, rule_min, upper_rule_max, module_id, module_path, memo01, memo02, memo03, memo04, memo05, memo06, memo07, memo08, memo09, memo10) VALUES (4, N'代金引換', 0, NULL, 1, NULL, 2, 1, 0, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
+
+INSERT INTO dtb_product_categories (product_id, category_id, rank) VALUES (1, 5, 1);
+INSERT INTO dtb_product_categories (product_id, category_id, rank) VALUES (2, 4, 2);
+INSERT INTO dtb_product_categories (product_id, category_id, rank) VALUES (3, 4, 1);
+INSERT INTO dtb_product_categories (product_id, category_id, rank) VALUES (3, 6, 1);
+
+INSERT INTO dtb_products (product_id, name, maker_id, status, comment1, comment2, comment3, comment4, comment5, comment6, note, main_list_comment, main_list_image, main_comment, main_image, main_large_image, sub_title1, sub_comment1, sub_image1, sub_large_image1, sub_title2, sub_comment2, sub_image2, sub_large_image2, sub_title3, sub_comment3, sub_image3, sub_large_image3, sub_title4, sub_comment4, sub_image4, sub_large_image4, sub_title5, sub_comment5, sub_image5, sub_large_image5, sub_title6, sub_comment6, sub_image6, sub_large_image6, del_flg, creator_id, create_date, update_date, deliv_date_id) VALUES (1, N'アイスクリーム', NULL, 1, NULL, NULL, N'アイス,バニラ,チョコ,抹茶', NULL, NULL, NULL, NULL, N'暑い夏にどうぞ。', 'ice130.jpg', N'冷たいものはいかがですか?', 'ice260.jpg', 'ice500.jpg', NULL, '<b>おいしいよ<b>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 2);
+INSERT INTO dtb_products (product_id, name, maker_id, status, comment1, comment2, comment3, comment4, comment5, comment6, note, main_list_comment, main_list_image, main_comment, main_image, main_large_image, sub_title1, sub_comment1, sub_image1, sub_large_image1, sub_title2, sub_comment2, sub_image2, sub_large_image2, sub_title3, sub_comment3, sub_image3, sub_large_image3, sub_title4, sub_comment4, sub_image4, sub_large_image4, sub_title5, sub_comment5, sub_image5, sub_large_image5, sub_title6, sub_comment6, sub_image6, sub_large_image6, del_flg, creator_id, create_date, update_date, deliv_date_id) VALUES (2, N'おなべ', NULL, 1, NULL, NULL, N'鍋,なべ,ナベ', NULL, NULL, NULL, NULL, N'一人用からあります。', 'nabe130.jpg', N'たまには鍋でもどうでしょう。', 'nabe260.jpg', 'nabe500.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 3);
+INSERT INTO dtb_products (product_id, name, maker_id, status, comment1, comment2, comment3, comment4, comment5, comment6, note, main_list_comment, main_list_image, main_comment, main_image, main_large_image, sub_title1, sub_comment1, sub_image1, sub_large_image1, sub_title2, sub_comment2, sub_image2, sub_large_image2, sub_title3, sub_comment3, sub_image3, sub_large_image3, sub_title4, sub_comment4, sub_image4, sub_large_image4, sub_title5, sub_comment5, sub_image5, sub_large_image5, sub_title6, sub_comment6, sub_image6, sub_large_image6, del_flg, creator_id, create_date, update_date, deliv_date_id) VALUES (3, N'おなべレシピ', NULL, 1, NULL, NULL, N'鍋,なべ,ナベ,レシピ,作り方', NULL, NULL, NULL, NULL, N'あの、秘伝のお鍋レシピです。', 'recipe130.jpg', N'<b>この商品はダウンロード商品です</b><br />自分でチャレンジしてみたい方に。', 'recipe260.jpg', 'recipe500.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1);
+
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(0, 1, 0, 0, 'ice-01', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(1, 1, 3, 6, 'ice-01', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(2, 1, 3, 5, 'ice-02', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(3, 1, 3, 4, 'ice-03', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(4, 1, 2, 6, 'ice-04', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(5, 1, 2, 5, 'ice-05', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(6, 1, 2, 4, 'ice-06', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(7, 1, 1, 6, 'ice-07', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(8, 1, 1, 5, 'ice-08', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(9, 1, 1, 4, 'ice-09', NULL, 1, NULL, 1000, 933, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(10, 2, 0, 0, 'nabe-01', 100, 0, 5, 1700, 1650, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 1, NULL, NULL);
+INSERT INTO dtb_products_class (product_class_id, product_id, classcategory_id1, classcategory_id2, product_code, stock, stock_unlimited, sale_limit, price01, price02, deliv_fee, point_rate, creator_id, create_date, update_date, del_flg, product_type_id, down_filename, down_realfilename) VALUES(11, 3, 0, 0, 'recipe-01', NULL, 1, NULL, NULL, 100, NULL, 10, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0, 2, 'おなべレシピ.pdf', 'recipe_onabe.pdf');
+
+INSERT INTO dtb_product_status (product_status_id, product_id, creator_id, create_date, update_date, del_flg) VALUES (1, 1, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_product_status (product_status_id, product_id, creator_id, create_date, update_date, del_flg) VALUES (4, 3, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_product_status (product_status_id, product_id, creator_id, create_date, update_date, del_flg) VALUES (5, 3, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+
+INSERT INTO dtb_recommend_products (product_id, recommend_product_id, rank, comment, status, creator_id, create_date, update_date) VALUES (2, 1, 4, N'お口直しに。', 0, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+
+INSERT INTO dtb_best_products (best_id, category_id, rank, product_id, title, comment, creator_id, create_date, update_date, del_flg) VALUES (1, 0, 1, 2, NULL, N'たまには鍋でもどうでしょう。', 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+INSERT INTO dtb_best_products (best_id, category_id, rank, product_id, title, comment, creator_id, create_date, update_date, del_flg) VALUES (2, 0, 2, 1, NULL, N'お口直しに。', 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0);
+
+INSERT INTO dtb_templates (template_code, device_type_id, template_name, create_date, update_date) VALUES ('default', 10, N'デフォルト', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_templates (template_code, device_type_id, template_name, create_date, update_date) VALUES ('mobile', 1, N'モバイル', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+INSERT INTO dtb_templates (template_code, device_type_id, template_name, create_date, update_date) VALUES ('sphone', 2, N'スマートフォン', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (0, 'table', 0);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (1, 'tr', 1);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (2, 'td', 2);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (3, 'a', 3);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (4, 'b', 4);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (5, 'blink', 5);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (6, 'br', 6);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (7, 'center', 7);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (8, 'font', 8);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (9, 'h', 9);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (10, 'hr', 10);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (11, 'img', 11);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (12, 'li', 12);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (13, 'strong', 13);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (14, 'p', 14);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (15, 'div', 15);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (16, 'i', 16);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (17, 'u', 17);
+INSERT INTO mtb_allowed_tag (id, name, rank) VALUES (18, 's', 18);
+
+INSERT INTO mtb_authority (id, name, rank) VALUES (0, N'システム管理者', 0);
+INSERT INTO mtb_authority (id, name, rank) VALUES (1, N'店舗オーナー', 1);
+
+INSERT INTO mtb_auth_excludes (id, name, rank) VALUES (0, 'index.php', 0);
+INSERT INTO mtb_auth_excludes (id, name, rank) VALUES (1, 'logout.php', 1);
+
+INSERT INTO mtb_db (id, name, rank) VALUES (1, 'PostgreSQL', 0);
+INSERT INTO mtb_db (id, name, rank) VALUES (2, 'MySQL', 1);
+
+INSERT INTO mtb_delivery_date (id, name, rank) VALUES (1, N'即日', 0);
+INSERT INTO mtb_delivery_date (id, name, rank) VALUES (2, N'1～2日後', 1);
+INSERT INTO mtb_delivery_date (id, name, rank) VALUES (3, N'3～4日後', 2);
+INSERT INTO mtb_delivery_date (id, name, rank) VALUES (4, N'1週間以降', 3);
+INSERT INTO mtb_delivery_date (id, name, rank) VALUES (5, N'2週間以降', 4);
+INSERT INTO mtb_delivery_date (id, name, rank) VALUES (6, N'3週間以降', 5);
+INSERT INTO mtb_delivery_date (id, name, rank) VALUES (7, N'1ヶ月以降', 6);
+INSERT INTO mtb_delivery_date (id, name, rank) VALUES (8, N'2ヶ月以降', 7);
+INSERT INTO mtb_delivery_date (id, name, rank) VALUES (9, N'お取り寄せ(商品入荷後)', 8);
+
+INSERT INTO mtb_disable_logout (id, name, rank) VALUES (1, '/shopping/deliv.php', 0);
+INSERT INTO mtb_disable_logout (id, name, rank) VALUES (2, '/shopping/payment.php', 1);
+INSERT INTO mtb_disable_logout (id, name, rank) VALUES (3, '/shopping/confirm.php', 2);
+INSERT INTO mtb_disable_logout (id, name, rank) VALUES (4, '/shopping/card.php', 3);
+INSERT INTO mtb_disable_logout (id, name, rank) VALUES (5, '/shopping/loan.php', 4);
+
+INSERT INTO mtb_disp (id, name, rank) VALUES (1, N'公開', 0);
+INSERT INTO mtb_disp (id, name, rank) VALUES (2, N'非公開', 1);
+
+INSERT INTO mtb_product_type (id, name, rank) VALUES (1, N'通常商品', 0);
+INSERT INTO mtb_product_type (id, name, rank) VALUES (2, N'ダウンロード商品', 1);
+
+INSERT INTO mtb_device_type (id, name, rank) VALUES (1, N'モバイル', 0);
+INSERT INTO mtb_device_type (id, name, rank) VALUES (2, N'スマートフォン', 1);
+INSERT INTO mtb_device_type (id, name, rank) VALUES (10, 'PC', 2);
+INSERT INTO mtb_device_type (id, name, rank) VALUES (99, N'管理画面', 3);
+
+INSERT INTO mtb_job (id, name, rank) VALUES (1, N'公務員', 0);
+INSERT INTO mtb_job (id, name, rank) VALUES (2, N'コンサルタント', 1);
+INSERT INTO mtb_job (id, name, rank) VALUES (3, N'コンピューター関連技術職', 2);
+INSERT INTO mtb_job (id, name, rank) VALUES (4, N'コンピューター関連以外の技術職', 3);
+INSERT INTO mtb_job (id, name, rank) VALUES (5, N'金融関係', 4);
+INSERT INTO mtb_job (id, name, rank) VALUES (6, N'医師', 5);
+INSERT INTO mtb_job (id, name, rank) VALUES (7, N'弁護士', 6);
+INSERT INTO mtb_job (id, name, rank) VALUES (8, N'総務・人事・事務', 7);
+INSERT INTO mtb_job (id, name, rank) VALUES (9, N'営業・販売', 8);
+INSERT INTO mtb_job (id, name, rank) VALUES (10, N'研究・開発', 9);
+INSERT INTO mtb_job (id, name, rank) VALUES (11, N'広報・宣伝', 10);
+INSERT INTO mtb_job (id, name, rank) VALUES (12, N'企画・マーケティング', 11);
+INSERT INTO mtb_job (id, name, rank) VALUES (13, N'デザイン関係', 12);
+INSERT INTO mtb_job (id, name, rank) VALUES (14, N'会社経営・役員', 13);
+INSERT INTO mtb_job (id, name, rank) VALUES (15, N'出版・マスコミ関係', 14);
+INSERT INTO mtb_job (id, name, rank) VALUES (16, N'学生・フリーター', 15);
+INSERT INTO mtb_job (id, name, rank) VALUES (17, N'主婦', 16);
+INSERT INTO mtb_job (id, name, rank) VALUES (18, N'その他', 17);
+
+INSERT INTO mtb_magazine_type (id, name, rank) VALUES (1, 'HTML', 0);
+INSERT INTO mtb_magazine_type (id, name, rank) VALUES (2, N'テキスト', 1);
+
+INSERT INTO mtb_mail_magazine_type (id, name, rank) VALUES (1, N'HTMLメール', 0);
+INSERT INTO mtb_mail_magazine_type (id, name, rank) VALUES (2, N'テキストメール', 1);
+INSERT INTO mtb_mail_magazine_type (id, name, rank) VALUES (3, N'希望しない', 2);
+
+INSERT INTO mtb_mail_template (id, name, rank) VALUES (1, N'注文受付メール', 0);
+INSERT INTO mtb_mail_template (id, name, rank) VALUES (2, N'注文受付メール(携帯)', 1);
+INSERT INTO mtb_mail_template (id, name, rank) VALUES (3, N'注文キャンセル受付メール', 2);
+INSERT INTO mtb_mail_template (id, name, rank) VALUES (4, N'取り寄せ確認メール', 3);
+INSERT INTO mtb_mail_template (id, name, rank) VALUES (5, N'お問い合わせ受付メール', 4);
+
+INSERT INTO mtb_mail_tpl_path (id, name, rank) VALUES (1, 'mail_templates/order_mail.tpl', 0);
+INSERT INTO mtb_mail_tpl_path (id, name, rank) VALUES (2, 'mail_templates/order_mail.tpl', 1);
+INSERT INTO mtb_mail_tpl_path (id, name, rank) VALUES (3, 'mail_templates/order_mail.tpl', 2);
+INSERT INTO mtb_mail_tpl_path (id, name, rank) VALUES (4, 'mail_templates/order_mail.tpl', 3);
+INSERT INTO mtb_mail_tpl_path (id, name, rank) VALUES (5, 'mail_templates/contact_mail.tpl', 4);
+
+INSERT INTO mtb_mail_type (id, name, rank) VALUES (1, N'PCメールアドレス', 0);
+INSERT INTO mtb_mail_type (id, name, rank) VALUES (2, N'携帯メールアドレス', 1);
+INSERT INTO mtb_mail_type (id, name, rank) VALUES (3, N'PCメールアドレス (携帯メールアドレスを登録している会員は除外)', 2);
+INSERT INTO mtb_mail_type (id, name, rank) VALUES (4, N'携帯メールアドレス (PCメールアドレスを登録している会員は除外)', 3);
+
+INSERT INTO mtb_mobile_domain (id, name, rank) VALUES (1, 'docomo.ne.jp', 0);
+INSERT INTO mtb_mobile_domain (id, name, rank) VALUES (2, 'ezweb.ne.jp', 1);
+INSERT INTO mtb_mobile_domain (id, name, rank) VALUES (3, 'softbank.ne.jp', 2);
+INSERT INTO mtb_mobile_domain (id, name, rank) VALUES (4, 'vodafone.ne.jp', 3);
+INSERT INTO mtb_mobile_domain (id, name, rank) VALUES (5, 'pdx.ne.jp', 4);
+INSERT INTO mtb_mobile_domain (id, name, rank) VALUES (6, 'disney.ne.jp', 5);
+INSERT INTO mtb_mobile_domain (id, name, rank) VALUES (7, 'willcom.com', 6);
+
+INSERT INTO mtb_order_status (id, name, rank) VALUES (7, N'決済処理中', 0);
+INSERT INTO mtb_order_status (id, name, rank) VALUES (1, N'新規受付', 1);
+INSERT INTO mtb_order_status (id, name, rank) VALUES (2, N'入金待ち', 2);
+INSERT INTO mtb_order_status (id, name, rank) VALUES (6, N'入金済み', 3);
+INSERT INTO mtb_order_status (id, name, rank) VALUES (3, N'キャンセル', 4);
+INSERT INTO mtb_order_status (id, name, rank) VALUES (4, N'取り寄せ中', 5);
+INSERT INTO mtb_order_status (id, name, rank) VALUES (5, N'発送済み', 6);
+
+
+INSERT INTO mtb_order_status_color (id, name, rank) VALUES (1, '#FFFFFF', 0);
+INSERT INTO mtb_order_status_color (id, name, rank) VALUES (2, '#FFDE9B', 1);
+INSERT INTO mtb_order_status_color (id, name, rank) VALUES (3, '#C9C9C9', 2);
+INSERT INTO mtb_order_status_color (id, name, rank) VALUES (4, '#FFD9D9', 3);
+INSERT INTO mtb_order_status_color (id, name, rank) VALUES (5, '#BFDFFF', 4);
+INSERT INTO mtb_order_status_color (id, name, rank) VALUES (6, '#FFFFAB', 5);
+INSERT INTO mtb_order_status_color (id, name, rank) VALUES (7, '#FFCCCC', 6);
+
+INSERT INTO mtb_customer_order_status (id, name, rank) VALUES (7, N'注文未完了', 0);
+INSERT INTO mtb_customer_order_status (id, name, rank) VALUES (1, N'注文受付', 1);
+INSERT INTO mtb_customer_order_status (id, name, rank) VALUES (2, N'入金待ち', 2);
+INSERT INTO mtb_customer_order_status (id, name, rank) VALUES (6, N'注文受付', 3);
+INSERT INTO mtb_customer_order_status (id, name, rank) VALUES (3, N'キャンセル', 4);
+INSERT INTO mtb_customer_order_status (id, name, rank) VALUES (4, N'注文受付', 5);
+INSERT INTO mtb_customer_order_status (id, name, rank) VALUES (5, N'発送済み', 6);
+
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('1000', N'不明なエラーが発生しました。', 0);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('1001', N'不正なパラメーターが送信されました。', 1);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('1002', N'認証に失敗しました。<br />・仮会員の方は、本会員登録を行ってください<br />・認証キーが正しく設定されているか確認してください', 2);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('1003', N'認証に失敗しました。<br />・仮会員の方は、本会員登録を行ってください<br />・認証キーが正しく設定されているか確認してください', 3);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('1004', N'購入済みの商品はありません。', 4);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('1005', N'ダウンロード可能なアップデータはありません。<br />・ステータスが「入金待ち」の可能性があります<br />・インストールされているモジュールが既に最新版の可能性があります。', 5);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('1006', N'配信サーバーでエラーが発生しました。', 6);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('1007', N'ダウンロード完了通知に失敗しました。', 7);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2001', N'管理画面の認証に失敗しました。<br />管理画面トップページへ戻り、ログインし直してください。', 8);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2002', N'配信サーバーへ接続できません。', 9);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2003', N'配信サーバーへ接続できません。', 10);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2004', N'配信サーバーでエラーが発生しました。', 11);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2005', N'認証キーが設定されていません。<br />・「認証キー設定」で認証キーを設定してください。', 12);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2006', N'不正なアクセスです。', 13);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2007', N'不正なパラメーターが送信されました。', 14);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2008', N'自動アップデートが無効です', 15);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2009', N'ファイルの書き込みに失敗しました。<br />・書き込み権限が正しく設定されていません。<br />・data/downloads/tmpディレクトリに書き込み権限があるかどうか確認してください', 16);
+INSERT INTO mtb_ownersstore_err (id, name, rank) VALUES ('2010', N'ファイルの書き込みに失敗しました。<br />・「ログ管理」で詳細を確認してください。', 17);
+
+INSERT INTO mtb_ownersstore_ips (id, name, rank) VALUES ('0', '210.188.195.143', 0);
+
+INSERT INTO mtb_page_max (id, name, rank) VALUES (10, '10', 0);
+INSERT INTO mtb_page_max (id, name, rank) VALUES (20, '20', 1);
+INSERT INTO mtb_page_max (id, name, rank) VALUES (30, '30', 2);
+INSERT INTO mtb_page_max (id, name, rank) VALUES (40, '40', 3);
+INSERT INTO mtb_page_max (id, name, rank) VALUES (50, '50', 4);
+INSERT INTO mtb_page_max (id, name, rank) VALUES (60, '60', 5);
+INSERT INTO mtb_page_max (id, name, rank) VALUES (70, '70', 6);
+INSERT INTO mtb_page_max (id, name, rank) VALUES (80, '80', 7);
+INSERT INTO mtb_page_max (id, name, rank) VALUES (90, '90', 8);
+INSERT INTO mtb_page_max (id, name, rank) VALUES (100, '100', 9);
+
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/system/index.php', '0', 0);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/system/delete.php', '0', 1);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/system/input.php', '0', 2);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/system/master.php', '0', 3);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/system/master_delete.php', '0', 4);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/system/master_rank.php', '0', 5);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/system/mastercsv.php', '0', 6);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/system/rank.php', '0', 7);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/entry/index.php', '1', 8);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/entry/delete.php', '1', 9);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/entry/inputzip.php', '1', 10);
+INSERT INTO mtb_permission (id, name, rank) VALUES ('/admin/search/delete_note.php', '1', 11);
+
+INSERT INTO mtb_pref (id, name, rank) VALUES (1, N'北海道', 1);
+INSERT INTO mtb_pref (id, name, rank) VALUES (2, N'青森県', 2);
+INSERT INTO mtb_pref (id, name, rank) VALUES (3, N'岩手県', 3);
+INSERT INTO mtb_pref (id, name, rank) VALUES (4, N'宮城県', 4);
+INSERT INTO mtb_pref (id, name, rank) VALUES (5, N'秋田県', 5);
+INSERT INTO mtb_pref (id, name, rank) VALUES (6, N'山形県', 6);
+INSERT INTO mtb_pref (id, name, rank) VALUES (7, N'福島県', 7);
+INSERT INTO mtb_pref (id, name, rank) VALUES (8, N'茨城県', 8);
+INSERT INTO mtb_pref (id, name, rank) VALUES (9, N'栃木県', 9);
+INSERT INTO mtb_pref (id, name, rank) VALUES (10, N'群馬県', 10);
+INSERT INTO mtb_pref (id, name, rank) VALUES (11, N'埼玉県', 11);
+INSERT INTO mtb_pref (id, name, rank) VALUES (12, N'千葉県', 12);
+INSERT INTO mtb_pref (id, name, rank) VALUES (13, N'東京都', 13);
+INSERT INTO mtb_pref (id, name, rank) VALUES (14, N'神奈川県', 14);
+INSERT INTO mtb_pref (id, name, rank) VALUES (15, N'新潟県', 15);
+INSERT INTO mtb_pref (id, name, rank) VALUES (16, N'富山県', 16);
+INSERT INTO mtb_pref (id, name, rank) VALUES (17, N'石川県', 17);
+INSERT INTO mtb_pref (id, name, rank) VALUES (18, N'福井県', 18);
+INSERT INTO mtb_pref (id, name, rank) VALUES (19, N'山梨県', 19);
+INSERT INTO mtb_pref (id, name, rank) VALUES (20, N'長野県', 20);
+INSERT INTO mtb_pref (id, name, rank) VALUES (21, N'岐阜県', 21);
+INSERT INTO mtb_pref (id, name, rank) VALUES (22, N'静岡県', 22);
+INSERT INTO mtb_pref (id, name, rank) VALUES (23, N'愛知県', 23);
+INSERT INTO mtb_pref (id, name, rank) VALUES (24, N'三重県', 24);
+INSERT INTO mtb_pref (id, name, rank) VALUES (25, N'滋賀県', 25);
+INSERT INTO mtb_pref (id, name, rank) VALUES (26, N'京都府', 26);
+INSERT INTO mtb_pref (id, name, rank) VALUES (27, N'大阪府', 27);
+INSERT INTO mtb_pref (id, name, rank) VALUES (28, N'兵庫県', 28);
+INSERT INTO mtb_pref (id, name, rank) VALUES (29, N'奈良県', 29);
+INSERT INTO mtb_pref (id, name, rank) VALUES (30, N'和歌山県', 30);
+INSERT INTO mtb_pref (id, name, rank) VALUES (31, N'鳥取県', 31);
+INSERT INTO mtb_pref (id, name, rank) VALUES (32, N'島根県', 32);
+INSERT INTO mtb_pref (id, name, rank) VALUES (33, N'岡山県', 33);
+INSERT INTO mtb_pref (id, name, rank) VALUES (34, N'広島県', 34);
+INSERT INTO mtb_pref (id, name, rank) VALUES (35, N'山口県', 35);
+INSERT INTO mtb_pref (id, name, rank) VALUES (36, N'徳島県', 36);
+INSERT INTO mtb_pref (id, name, rank) VALUES (37, N'香川県', 37);
+INSERT INTO mtb_pref (id, name, rank) VALUES (38, N'愛媛県', 38);
+INSERT INTO mtb_pref (id, name, rank) VALUES (39, N'高知県', 39);
+INSERT INTO mtb_pref (id, name, rank) VALUES (40, N'福岡県', 40);
+INSERT INTO mtb_pref (id, name, rank) VALUES (41, N'佐賀県', 41);
+INSERT INTO mtb_pref (id, name, rank) VALUES (42, N'長崎県', 42);
+INSERT INTO mtb_pref (id, name, rank) VALUES (43, N'熊本県', 43);
+INSERT INTO mtb_pref (id, name, rank) VALUES (44, N'大分県', 44);
+INSERT INTO mtb_pref (id, name, rank) VALUES (45, N'宮崎県', 45);
+INSERT INTO mtb_pref (id, name, rank) VALUES (46, N'鹿児島県', 46);
+INSERT INTO mtb_pref (id, name, rank) VALUES (47, N'沖縄県', 47);
+
+INSERT INTO mtb_product_list_max (id, name, rank) VALUES (15, N'15件', 0);
+INSERT INTO mtb_product_list_max (id, name, rank) VALUES (30, N'30件', 1);
+INSERT INTO mtb_product_list_max (id, name, rank) VALUES (50, N'50件', 2);
+
+INSERT INTO mtb_product_status_color (id, name, rank) VALUES (1, '#FFFFFF', 0);
+INSERT INTO mtb_product_status_color (id, name, rank) VALUES (2, '#C9C9C9', 1);
+INSERT INTO mtb_product_status_color (id, name, rank) VALUES (3, '#DDE6F2', 2);
+
+INSERT INTO mtb_recommend (id, name, rank) VALUES (5, N'★★★★★', 0);
+INSERT INTO mtb_recommend (id, name, rank) VALUES (4, N'★★★★', 1);
+INSERT INTO mtb_recommend (id, name, rank) VALUES (3, N'★★★', 2);
+INSERT INTO mtb_recommend (id, name, rank) VALUES (2, N'★★', 3);
+INSERT INTO mtb_recommend (id, name, rank) VALUES (1, N'★', 4);
+
+INSERT INTO mtb_reminder (id, name, rank) VALUES (1, N'母親の旧姓は？', 0);
+INSERT INTO mtb_reminder (id, name, rank) VALUES (2, N'お気に入りのマンガは？', 1);
+INSERT INTO mtb_reminder (id, name, rank) VALUES (3, N'大好きなペットの名前は？', 2);
+INSERT INTO mtb_reminder (id, name, rank) VALUES (4, N'初恋の人の名前は？', 3);
+INSERT INTO mtb_reminder (id, name, rank) VALUES (5, N'面白かった映画は？', 4);
+INSERT INTO mtb_reminder (id, name, rank) VALUES (6, N'尊敬していた先生の名前は？', 5);
+INSERT INTO mtb_reminder (id, name, rank) VALUES (7, N'好きな食べ物は？', 6);
+
+INSERT INTO mtb_review_deny_url (id, name, rank) VALUES (0, 'http://', 0);
+INSERT INTO mtb_review_deny_url (id, name, rank) VALUES (1, 'https://', 1);
+INSERT INTO mtb_review_deny_url (id, name, rank) VALUES (2, 'ttp://', 2);
+INSERT INTO mtb_review_deny_url (id, name, rank) VALUES (3, 'ttps://', 3);
+
+INSERT INTO mtb_sex (id, name, rank) VALUES (1, N'男性', 0);
+INSERT INTO mtb_sex (id, name, rank) VALUES (2, N'女性', 1);
+
+INSERT INTO mtb_customer_status (id, name, rank) VALUES (1, N'仮会員', 0);
+INSERT INTO mtb_customer_status (id, name, rank) VALUES (2, N'本会員', 1);
+
+INSERT INTO mtb_status (id, name, rank) VALUES (1, 'NEW', 0);
+INSERT INTO mtb_status (id, name, rank) VALUES (2, N'残りわずか', 1);
+INSERT INTO mtb_status (id, name, rank) VALUES (3, N'ポイント２倍', 2);
+INSERT INTO mtb_status (id, name, rank) VALUES (4, N'オススメ', 3);
+INSERT INTO mtb_status (id, name, rank) VALUES (5, N'限定品', 4);
+
+INSERT INTO mtb_status_image (id, name, rank) VALUES (1, 'img/icon/ico_01.gif', 0);
+INSERT INTO mtb_status_image (id, name, rank) VALUES (2, 'img/icon/ico_02.gif', 1);
+INSERT INTO mtb_status_image (id, name, rank) VALUES (3, 'img/icon/ico_03.gif', 2);
+INSERT INTO mtb_status_image (id, name, rank) VALUES (4, 'img/icon/ico_04.gif', 3);
+INSERT INTO mtb_status_image (id, name, rank) VALUES (5, 'img/icon/ico_05.gif', 4);
+
+INSERT INTO mtb_target (id, name, rank) VALUES (0, 'Unused', 0);
+INSERT INTO mtb_target (id, name, rank) VALUES (1, 'LeftNavi', 1);
+INSERT INTO mtb_target (id, name, rank) VALUES (2, 'MainHead', 2);
+INSERT INTO mtb_target (id, name, rank) VALUES (3, 'RightNavi', 3);
+INSERT INTO mtb_target (id, name, rank) VALUES (4, 'MainFoot', 4);
+INSERT INTO mtb_target (id, name, rank) VALUES (5, 'TopNavi', 5);
+INSERT INTO mtb_target (id, name, rank) VALUES (6, 'BottomNavi', 6);
+INSERT INTO mtb_target (id, name, rank) VALUES (7, 'HeadNavi', 7);
+INSERT INTO mtb_target (id, name, rank) VALUES (8, 'HeaderTopNavi', 8);
+INSERT INTO mtb_target (id, name, rank) VALUES (9, 'FooterBottomNavi', 9);
+INSERT INTO mtb_target (id, name, rank) VALUES (10, 'HeaderInternalNavi', 10);
+
+INSERT INTO mtb_taxrule (id, name, rank) VALUES (1, N'四捨五入', 0);
+INSERT INTO mtb_taxrule (id, name, rank) VALUES (2, N'切り捨て', 1);
+INSERT INTO mtb_taxrule (id, name, rank) VALUES (3, N'切り上げ', 2);
+
+INSERT INTO mtb_wday (id, name, rank) VALUES (0, N'日', 0);
+INSERT INTO mtb_wday (id, name, rank) VALUES (1, N'月', 1);
+INSERT INTO mtb_wday (id, name, rank) VALUES (2, N'火', 2);
+INSERT INTO mtb_wday (id, name, rank) VALUES (3, N'水', 3);
+INSERT INTO mtb_wday (id, name, rank) VALUES (4, N'木', 4);
+INSERT INTO mtb_wday (id, name, rank) VALUES (5, N'金', 5);
+INSERT INTO mtb_wday (id, name, rank) VALUES (6, N'土', 6);
+
+INSERT INTO mtb_work (id, name, rank) VALUES (0, N'非稼働', 0);
+INSERT INTO mtb_work (id, name, rank) VALUES (1, N'稼働', 1);
+
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SAMPLE_ADDRESS1', N'"市区町村名 (例：千代田区神田神保町)"', 1, 'フロント表示関連');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SAMPLE_ADDRESS2', N'"番地・ビル名 (例：1-3-5)"', 2, 'フロント表示関連');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USER_DIR', '"user_data/"', 3, N'ユーザファイル保存先');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USER_REALDIR', 'HTML_REALDIR . USER_DIR', 4, N'ユーザファイル保存先');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USER_URL', 'HTTP_URL . USER_DIR', 9, N'ユーザー作成ページ等');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('AUTH_TYPE', '"HMAC"', 10, N'認証方式');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USER_PACKAGE_DIR', '"packages/"', 17, N'テンプレートファイル保存先');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USER_TEMPLATE_REALDIR', 'USER_REALDIR . USER_PACKAGE_DIR', 18, N'テンプレートファイル保存先');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('TEMPLATE_TEMP_REALDIR', 'HTML_REALDIR . "upload/temp_template/"', 19, N'テンプレートファイル一時保存先');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USER_DEF_PHP_REALFILE', 'USER_REALDIR . "__default.php"', 20, N'ユーザー作成画面のデフォルトPHPファイル');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MODULE_DIR', '"downloads/module/"', 22, N'ダウンロードモジュール保存ディレクトリ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MODULE_REALDIR', 'DATA_REALDIR . MODULE_DIR', 23, N'ダウンロードモジュール保存ディレクトリ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MAX_LIFETIME', '7200', 26, N'DBセッションの有効期限(秒)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MASTER_DATA_REALDIR', 'DATA_REALDIR . "cache/"', 27, N'マスターデータキャッシュディレクトリ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('UPDATE_HTTP', '"http://www.ec-cube.net/info/index.php"', 28, N'アップデート管理用ファイル格納場所');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CHAR_CODE', '"UTF-8"', 39, N'文字コード');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LOCALE', '"ja_JP.UTF-8"', 40, N'ロケール設定');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ECCUBE_PAYMENT', '"EC-CUBE"', 41, N'決済モジュール付与文言');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PEAR_DB_DEBUG', '0', 42, N'PEAR::DBのデバッグモード');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PEAR_DB_PERSISTENT', 'false', 43, N'PEAR::DBの持続的接続オプション');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CLOSE_DAY', '31', 45, N'締め日の指定(末日の場合は、31を指定してください。)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('FAVORITE_ERROR', '13', 46, N'一般サイトエラー');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('GRAPH_REALDIR', 'HTML_REALDIR . "upload/graph_image/"', 49, N'グラフ格納ディレクトリ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('GRAPH_URLPATH', 'ROOT_URLPATH . "upload/graph_image/"', 50, N'グラフURL');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('GRAPH_PIE_MAX', '10', 51, N'円グラフ最大表示数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('GRAPH_LABEL_MAX', '40', 52, N'グラフのラベルの文字数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PRODUCTS_TOTAL_MAX', '15', 55, N'商品集計で何位まで表示するか');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEFAULT_PRODUCT_DISP', '2', 56, N'1:公開 2:非公開');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DELIV_FREE_AMOUNT', '0', 57, N'送料無料購入数量 (0の場合は、いくつ買っても無料にならない)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('INPUT_DELIV_FEE', '1', 58, N'配送料の設定画面表示(有効:1 無効:0)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('OPTION_PRODUCT_DELIV_FEE', '0', 59, N'商品ごとの送料設定(有効:1 無効:0)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('OPTION_DELIV_FEE', '1', 60, N'配送業者ごとの配送料を加算する(有効:1 無効:0)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('OPTION_RECOMMEND', '1', 61, N'おすすめ商品登録(有効:1 無効:0)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('OPTION_CLASS_REGIST', '1', 62, N'商品規格登録(有効:1 無効:0)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEFAULT_PASSWORD', '"******"', 66, N'会員登録変更(マイページ)パスワード用');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DELIV_ADDR_MAX', '20', 67, N'別のお届け先最大登録数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ORDER_STATUS_MAX', '50', 70, N'対応状況管理画面の一覧表示件数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('REVIEW_REGIST_MAX', '5', 71, N'フロントレビュー書き込み最大数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEBUG_MODE', 'false', 72, N'デバッグモード(true：sfPrintRやDBのエラーメッセージ、ログレベルがDebugのログを出力する、false：出力しない)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USE_VERBOSE_LOG', 'DEBUG_MODE', 73, N'ログを冗長とするか(true:利用する、false:利用しない)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_ID', '"1"', 74, N'管理ユーザID(メンテナンス用表示されない。)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CUSTOMER_CONFIRM_MAIL', 'false', 75, N'会員登録時に仮会員確認メールを送信するか (true:仮会員、false:本会員)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LOGIN_FRAME', '"login_frame.tpl"', 77, N'ログイン画面フレーム');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MAIN_FRAME', '"main_frame.tpl"', 78, N'管理画面フレーム');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SITE_FRAME', '"site_frame.tpl"', 79, N'一般サイト画面フレーム');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CERT_STRING', '"7WDhcBTF"', 80, N'認証文字列');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('BIRTH_YEAR', '1901', 83, N'生年月日登録開始年');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CREDIT_ADD_YEAR', '10', 85, N'クレジットカードの期限＋何年');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('POINT_RULE', '2', 88, N'ポイントの計算ルール(1:四捨五入、2:切り捨て、3:切り上げ)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('POINT_VALUE', '1', 89, N'1ポイント当たりの値段(円)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_MODE', '0', 90, N'管理モード 1:有効　0:無効(納品時)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MAX_LOG_QUANTITY', '5', 92, N'ログファイル最大数(ログテーション)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MAX_LOG_SIZE', '"1000000"', 93, N'1つのログファイルに保存する最大容量(byte)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('TRANSACTION_ID_NAME', '"transactionid"', 94, N'トランザクションID の名前');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('FORGOT_MAIL', '0', 95, N'パスワード忘れの確認メールを送付するか否か。(0:送信しない、1:送信する)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('BIRTH_MONTH_POINT', '0', 98, N'誕生日月ポイント');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LARGE_IMAGE_WIDTH', '500', 110, N'拡大画像横');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LARGE_IMAGE_HEIGHT', '500', 111, N'拡大画像縦');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SMALL_IMAGE_WIDTH', '130', 112, N'一覧画像横');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SMALL_IMAGE_HEIGHT', '130', 113, N'一覧画像縦');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('NORMAL_IMAGE_WIDTH', '260', 114, N'通常画像横');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('NORMAL_IMAGE_HEIGHT', '260', 115, N'通常画像縦');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('NORMAL_SUBIMAGE_WIDTH', '200', 116, N'通常サブ画像横');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('NORMAL_SUBIMAGE_HEIGHT', '200', 117, N'通常サブ画像縦');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LARGE_SUBIMAGE_WIDTH', '500', 118, N'拡大サブ画像横');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LARGE_SUBIMAGE_HEIGHT', '500', 119, N'拡大サブ画像縦');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('IMAGE_SIZE', '1000', 126, N'画像サイズ制限(KB)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CSV_SIZE', '2000', 127, N'CSVサイズ制限(KB)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CSV_LINE_MAX', '10000', 128, N'CSVアップロード1行あたりの最大文字数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('FILE_SIZE', '10000', 130, N'ファイル管理画面アップ制限(KB)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('TEMPLATE_SIZE', '10000', 131, N'アップできるテンプレートファイル制限(KB)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LEVEL_MAX', '5', 132, N'カテゴリの最大階層');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CATEGORY_MAX', '1000', 133, N'最大カテゴリ登録数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_TITLE', N'"EC-CUBE 管理機能"', 134, N'管理機能タイトル');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SELECT_RGB', '"#ffffdf"', 135, N'編集時強調表示色');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DISABLED_RGB', '"#C9C9C9"', 136, N'入力項目無効時の表示色');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ERR_COLOR', '"#ffe8e8"', 137, N'エラー時表示色');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CATEGORY_HEAD', '">"', 138, N'親カテゴリ表示文字');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('START_BIRTH_YEAR', '1970', 139, N'生年月日初期選択年');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('NORMAL_PRICE_TITLE', N'"通常価格"', 140, N'価格名称');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SALE_PRICE_TITLE', N'"販売価格"', 141, N'価格名称');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LOG_REALFILE', 'DATA_REALDIR . "logs/site.log"', 142, N'標準ログファイル');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CUSTOMER_LOG_REALFILE', 'DATA_REALDIR . "logs/customer.log"', 143, N'会員ログイン ログファイル');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_LOG_REALFILE', 'DATA_REALDIR . "logs/admin.log"', 144, N'管理機能ログファイル');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEBUG_LOG_REALFILE', '""', 145, N'デバッグログファイル(未入力:標準ログファイル・管理画面ログファイル)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ERROR_LOG_REALFILE', 'DATA_REALDIR . "logs/error.log"', 146, N'エラーログファイル(未入力:標準ログファイル・管理画面ログファイル)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DB_LOG_REALFILE', 'DATA_REALDIR . "logs/db.log"', 147, N'DBログファイル');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('IMAGE_TEMP_REALDIR', 'HTML_REALDIR . "upload/temp_image/"', 150, N'画像一時保存');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('IMAGE_SAVE_REALDIR', 'HTML_REALDIR . "upload/save_image/"', 151, N'画像保存先');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('IMAGE_TEMP_URLPATH', 'ROOT_URLPATH . "upload/temp_image/"', 152, N'画像一時保存URL');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('IMAGE_SAVE_URLPATH', 'ROOT_URLPATH . "upload/save_image/"', 153, N'画像保存先URL');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('IMAGE_TEMP_RSS_URL', 'HTTP_URL . "upload/temp_image/"', 154, N'RSS用画像一時保存URL');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('IMAGE_SAVE_RSS_URL', 'HTTP_URL . "upload/save_image/"', 155, N'RSS用画像保存先URL');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CSV_TEMP_REALDIR', 'DATA_REALDIR . "upload/csv/"', 156, N'エンコードCSVの一時保存先');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('NO_IMAGE_REALFILE', 'USER_TEMPLATE_REALDIR . "default/img/picture/img_blank.gif"', 158, N'画像がない場合に表示');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_SYSTEM_URLPATH', 'ROOT_URLPATH . ADMIN_DIR . "system/" . DIR_INDEX_PATH', 159, N'システム管理トップ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('INPUT_ZIP_URLPATH', 'ROOT_URLPATH . "input_zip.php"', 161, N'郵便番号入力');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_HOME_URLPATH', 'ROOT_URLPATH . ADMIN_DIR . "home.php"', 165, N'ホーム');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_LOGIN_URLPATH', 'ROOT_URLPATH . ADMIN_DIR . DIR_INDEX_PATH', 166, N'ログインページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_PRODUCTS_URLPATH', 'ROOT_URLPATH . ADMIN_DIR . "products/" . DIR_INDEX_PATH', 167, N'商品検索ページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_ORDER_EDIT_URLPATH', 'ROOT_URLPATH . ADMIN_DIR . "order/edit.php"', 168, N'注文編集ページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_ORDER_URLPATH', 'ROOT_URLPATH . ADMIN_DIR . "order/" . DIR_INDEX_PATH', 169, N'注文編集ページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_ORDER_MAIL_URLPATH', 'ROOT_URLPATH . ADMIN_DIR . "order/mail.php"', 170, N'注文編集ページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_LOGOUT_URLPATH', 'ROOT_URLPATH . ADMIN_DIR . "logout.php"', 171, N'ログアウトページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MEMBER_PMAX', '10', 182, N'メンバー管理ページ表示行数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SEARCH_PMAX', '10', 183, N'検索ページ表示行数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('NAVI_PMAX', '4', 184, N'ページ番号の最大表示数量');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PRODUCTSUB_MAX', '5', 185, N'商品サブ情報最大数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DELIVTIME_MAX', '16', 186, N'お届け時間の最大表示数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DELIVFEE_MAX', '47', 187, N'配送料金の最大表示数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('STEXT_LEN', '50', 188, N'短い項目の文字数 (名前など)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SMTEXT_LEN', '100', 189, NULL);
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MTEXT_LEN', '200', 190, N'長い項目の文字数 (住所など)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MLTEXT_LEN', '1000', 191, N'長中文の文字数 (問い合わせなど)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LTEXT_LEN', '3000', 192, N'長文の文字数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LLTEXT_LEN', '99999', 193, N'超長文の文字数 (メルマガなど)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('URL_LEN', '1024', 194, N'URLの文字長');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ID_MAX_LEN', 'STEXT_LEN', 195, N'管理画面用：ID・パスワードの文字数制限');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ID_MIN_LEN', '4', 196, N'管理画面用：ID・パスワードの文字数制限');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PRICE_LEN', '8', 197, N'金額桁数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PERCENTAGE_LEN', '3', 198, N'率桁数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('AMOUNT_LEN', '6', 199, N'在庫数、販売制限数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ZIP01_LEN', '3', 200, N'郵便番号1');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ZIP02_LEN', '4', 201, N'郵便番号2');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('TEL_ITEM_LEN', '6', 202, N'電話番号各項目制限');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('TEL_LEN', '12', 203, N'電話番号総数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PASSWORD_MIN_LEN', '4', 204, N'フロント画面用：パスワードの最小文字数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PASSWORD_MAX_LEN', 'STEXT_LEN', 205, N'フロント画面用：パスワードの最大文字数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('INT_LEN', '9', 206, N'検査数値用桁数(INT)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CREDIT_NO_LEN', '4', 207, N'クレジットカードの文字数 (*モジュールで使用)'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SEARCH_CATEGORY_LEN', '18', 208, N'検索カテゴリ最大表示文字数(byte)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('FILE_NAME_LEN', '10', 209, N'ファイル名表示文字数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('COOKIE_EXPIRE', '365', 212, N'クッキー保持期限(日)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SEPA_CATNAVI', '" > "', 235, N'カテゴリ区切り文字');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SHOPPING_URL', 'HTTPS_URL . "shopping/" . DIR_INDEX_PATH', 237, N'会員情報入力');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ENTRY_URL', 'HTTPS_URL . "entry/" . DIR_INDEX_PATH', 238, N'会員登録ページTOP');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('TOP_URLPATH', 'ROOT_URLPATH . DIR_INDEX_PATH', 239, N'サイトトップ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CART_URLPATH', 'ROOT_URLPATH . "cart/" . DIR_INDEX_PATH', 240, N'カートトップ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DELIV_URLPATH', 'ROOT_URLPATH . "shopping/deliv.php"', 241, N'お届け先設定');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MULTIPLE_URLPATH', 'ROOT_URLPATH . "shopping/multiple.php"', 242, N'複数お届け先設定');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SHOPPING_CONFIRM_URLPATH', 'ROOT_URLPATH . "shopping/confirm.php"', 244, N'購入確認ページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SHOPPING_PAYMENT_URLPATH', 'ROOT_URLPATH . "shopping/payment.php"', 245, N'お支払い方法選択ページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SHOPPING_COMPLETE_URLPATH', 'ROOT_URLPATH . "shopping/complete.php"', 246, N'購入完了画面');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SHOPPING_MODULE_URLPATH', 'ROOT_URLPATH . "shopping/load_payment_module.php"', 249, N'モジュール追加用画面');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('P_DETAIL_URLPATH', 'ROOT_URLPATH . "products/detail.php?product_id="', 253, N'商品詳細(HTML出力)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MYPAGE_DELIVADDR_URLPATH', 'ROOT_URLPATH . "mypage/delivery.php"', 254, N'マイページお届け先URL');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ADMIN_NEWS_STARTYEAR', '2005', 264, N'新着情報管理画面 開始年(西暦) ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ENTRY_LIMIT_HOUR', '1', 267, N'再入会制限時間 (単位: 時間)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('RECOMMEND_PRODUCT_MAX', '6', 268, N'関連商品表示数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('RECOMMEND_NUM', '8', 269, N'おすすめ商品表示数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DELIV_DATE_END_MAX', '21', 272, N'お届け可能日以降のプルダウン表示最大日数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('CV_PAYMENT_LIMIT', '14', 275, N'支払期限 (*モジュールで使用)'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('REVIEW_ALLOW_URL', '0', 277, N'商品レビューでURL書き込みを許可するか否か');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('UPDATE_SEND_SITE_INFO', 'false', 289, N'アップデート時にサイト情報を送出するか');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USE_POINT', 'true', 290, N'ポイントを利用するか(true:利用する、false:利用しない) (false は一部対応)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('NOSTOCK_HIDDEN', 'false', 291, N'在庫無し商品の非表示(true:非表示、false:表示)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USE_MOBILE', 'true', 292, N'モバイルサイトを利用するか(true:利用する、false:利用しない) (false は一部対応) (*モジュールで使用)'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('USE_MULTIPLE_SHIPPING', 'true', 293, N'複数配送先指定機能を利用するか(true:利用する、false:利用しない)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SLTEXT_LEN', '500', 294, N'短文の文字数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEFAULT_TEMPLATE_NAME', '"default"', 300, N'デフォルトテンプレート名(PC)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_DEFAULT_TEMPLATE_NAME', '"mobile"', 301, N'デフォルトテンプレート名(モバイル)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SMARTPHONE_DEFAULT_TEMPLATE_NAME', '"sphone"', 302, N'デフォルトテンプレート名(スマートフォン)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('TEMPLATE_NAME', '"default"', 303, N'テンプレート名');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_TEMPLATE_NAME', '"mobile"', 304, N'モバイルテンプレート名');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SMARTPHONE_TEMPLATE_NAME', '"sphone"', 305, N'スマートフォンテンプレート名');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SMARTY_TEMPLATES_REALDIR', ' DATA_REALDIR . "Smarty/templates/"', 306, N'SMARTYテンプレート');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('TEMPLATE_REALDIR', 'SMARTY_TEMPLATES_REALDIR . TEMPLATE_NAME . "/"', 307, N'SMARTYテンプレート(PC)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('TEMPLATE_ADMIN_REALDIR', 'SMARTY_TEMPLATES_REALDIR . "admin/"', 308, N'SMARTYテンプレート(管理機能)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('COMPILE_REALDIR', 'DATA_REALDIR . "Smarty/templates_c/" . TEMPLATE_NAME . "/"', 309, N'SMARTYコンパイル');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('COMPILE_ADMIN_REALDIR', 'DATA_REALDIR . "Smarty/templates_c/admin/"', 310, N'SMARTYコンパイル(管理機能)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('BLOC_DIR', '"frontparts/bloc/"', 311, N'ブロックファイル保存先');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_TEMPLATE_REALDIR', 'SMARTY_TEMPLATES_REALDIR . MOBILE_TEMPLATE_NAME . "/"', 312, N'SMARTYテンプレート(mobile)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_COMPILE_REALDIR', 'DATA_REALDIR . "Smarty/templates_c/" . MOBILE_TEMPLATE_NAME . "/"', 313, N'SMARTYコンパイル(mobile)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SMARTPHONE_TEMPLATE_REALDIR', 'SMARTY_TEMPLATES_REALDIR . SMARTPHONE_TEMPLATE_NAME . "/"', 314, N'SMARTYテンプレート(smart phone)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SMARTPHONE_COMPILE_REALDIR', 'DATA_REALDIR . "Smarty/templates_c/" . SMARTPHONE_TEMPLATE_NAME . "/"', 315, N'SMARTYコンパイル(smartphone)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('RFC_COMPLIANT_EMAIL_CHECK', 'false', 401, N'EメールアドレスチェックをRFC準拠にするか(true:準拠する、false:準拠しない)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_SESSION_LIFETIME', '1800', 402, N'モバイルサイトのセッションの存続時間 (秒)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_IMAGE_REALDIR', 'HTML_REALDIR . "upload/mobile_image/"', 408, N'携帯電話向け変換画像保存ディレクトリ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_IMAGE_URLPATH', 'ROOT_URLPATH . "upload/mobile_image/"', 409, N'携帯電話向け変換画像保存ディレクトリ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_TOP_URLPATH', 'ROOT_URLPATH . DIR_INDEX_PATH', 410, N'モバイルURL');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_CART_URLPATH', 'ROOT_URLPATH . "cart/" . DIR_INDEX_PATH', 411, N'カートトップ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_SHOPPING_CONFIRM_URLPATH', 'ROOT_URLPATH . "shopping/confirm.php"', 413, N'購入確認ページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_SHOPPING_PAYMENT_URLPATH', 'ROOT_URLPATH . "shopping/payment.php"', 414, N'お支払い方法選択ページ');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_P_DETAIL_URLPATH', 'ROOT_URLPATH . "products/detail.php?product_id="', 415, N'商品詳細(HTML出力)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MOBILE_SHOPPING_COMPLETE_URLPATH', 'ROOT_URLPATH . "shopping/complete.php"', 416, N'購入完了画面 (*モジュールで使用)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SESSION_KEEP_METHOD', '"useCookie"', 418, N'セッション維持方法："useCookie"|"useRequest"');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SESSION_LIFETIME', '1800', 419, N'セッションの存続時間 (秒)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('OSTORE_URL', '"http://www.ec-cube.net/"', 500, N'オーナーズストアURL');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('OSTORE_SSLURL', '"https://www.ec-cube.net/"', 501, N'オーナーズストアURL');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('OSTORE_LOG_REALFILE', 'DATA_REALDIR . "logs/ownersstore.log"', 502, N'オーナーズストアログパス');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('OPTION_FAVORITE_PRODUCT', '1', 523, N'お気に入り商品登録(有効:1 無効:0)'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('IMAGE_RENAME', 'true', 525, N'画像リネーム設定 (商品画像のみ) (true:リネームする、false:リネームしない)'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_DIR', '"plugins/"', 600, N'プラグインディレクトリ'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_REALDIR', 'USER_REALDIR . PLUGIN_DIR', 601, N'プラグイン保存先'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_URL', 'USER_URL . PLUGIN_DIR', 602, N'プラグイン URL'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_UPLOAD_REALDIR', 'DATA_REALDIR . "downloads/plugin/"', 604, N'プラグイン保存先'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_HTML_REALDIR', 'HTML_REALDIR . "plugin/"', 605, N'プラグイン外部ファイル保存先'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_DIR_PERMISSION', '0777', 607, N'プラグイン・ディレクトリパーミッション'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_TEMP_REALDIR', 'HTML_REALDIR . "upload/temp_plugin/"', 608, N'プラグインファイル一時保存先'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DOWNLOADS_TEMP_DIR', 'DATA_REALDIR . "downloads/tmp/"', 609, N'アップロード一時ディレクトリ'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_HTML_URL', 'USER_URL . PLUGIN_DIR', 610, N'プラグイン 外部ファイルURL'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_EXTENSION', '"tar,tar.gz"', 611, N'プラグインファイル登録可能拡張子(カンマ区切り)'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DOWNLOADS_TEMP_PLUGIN_UPDATE_DIR', 'DOWNLOADS_TEMP_DIR . "plugin_update/"', 612, N'プラグイン一時展開用ディレクトリ（アップデート用）'); 
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DOWNLOADS_TEMP_PLUGIN_INSTALL_DIR', 'DOWNLOADS_TEMP_DIR . "plugin_install/"', 613, N'プラグイン一時展開用ディレクトリ（インストール用）');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DOWNLOAD_DAYS_LEN', '3', 700, N'日数桁数');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DOWNLOAD_EXTENSION', '"zip,lzh,jpg,jpeg,gif,png,mp3,pdf,csv"', 701, N'ダウンロードファイル登録可能拡張子(カンマ区切り)"');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DOWN_SIZE', '50000', 702, N'ダウンロード販売ファイル用サイズ制限(KB)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEFAULT_PRODUCT_DOWN', '1', 703, N'1:実商品 2:ダウンロード');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DOWN_TEMP_REALDIR', 'DATA_REALDIR . "download/temp/"', 704, N'ダウンロードファイル一時保存');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DOWN_SAVE_REALDIR', 'DATA_REALDIR . "download/save/"', 705, N'ダウンロードファイル保存先');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DOWNLOAD_BLOCK', '1024', 708, N'ダウンロード販売機能 ダウンロードファイル読み込みバイト(KB)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ORDER_NEW', '1', 800, N'新規注文');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ORDER_PAY_WAIT', '2', 801, N'入金待ち');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ORDER_PRE_END', '6', 802, N'入金済み');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ORDER_CANCEL', '3', 803, N'キャンセル');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ORDER_BACK_ORDER', '4', 804, N'取り寄せ中');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ORDER_DELIV', '5', 805, N'発送済み');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ORDER_PENDING', '7', 806, N'決済処理中');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PRODUCT_TYPE_NORMAL', '1', 900, N'通常商品');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PRODUCT_TYPE_DOWNLOAD', '2', 901, N'ダウンロード商品');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SQL_QUERY_LOG_MODE', '1', 1000, N'DBログの記録モード (0:記録しない, 1:遅延時のみ記録する, 2:常に記録する)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SQL_QUERY_LOG_MIN_EXEC_TIME', '2', 1001, N'DBログで遅延とみなす実行時間(秒)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PAGE_DISPLAY_TIME_LOG_MODE', '1', 1002, N'ページ表示時間のログを取得するフラグ(1:表示, 0:非表示)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PAGE_DISPLAY_TIME_LOG_MIN_EXEC_TIME', '2', 1003, N'ページ表示時間のログを取得する時間設定(設定値以上かかった場合に取得)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEVICE_TYPE_MOBILE', '1', 1100, N'端末種別: モバイル');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEVICE_TYPE_SMARTPHONE', '2', 1101, N'端末種別: スマートフォン');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEVICE_TYPE_PC', '10', 1102, N'端末種別: PC');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('DEVICE_TYPE_ADMIN', '99', 1103, N'端末種別: 管理画面');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ECCUBE_INFO', 'true', 1218, N'EC-CUBE更新情報取得 (true:取得する false:取得しない)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('HTTP_REQUEST_TIMEOUT', '"5"', 1219, N'外部サイトHTTP取得タイムアウト時間(秒)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('ZIP_DOWNLOAD_URL', '"http://www.post.japanpost.jp/zipcode/dl/kogaki/zip/ken_all.zip"', 1224, N'郵便番号CSVのZIPアーカイブファイルの取得元');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('HOOK_POINT_PREPROCESS', '"LC_Page_preProcess"', 1301, N'フックポイント(プレプロセス)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('HOOK_POINT_PROCESS', '"LC_Page_process"', 1302, N'フックポイント(プロセス)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('PLUGIN_ACTIVATE_FLAG', 'true', 1303, N'プラグインのロード可否フラグ)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('SMARTY_FORCE_COMPILE_MODE', 'false', 1401, N'SMARTYコンパイルモード');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('LOGIN_RETRY_INTERVAL', '0', 1411, N'ログイン失敗時の遅延時間(秒)(ブルートフォースアタック対策)');
+INSERT INTO mtb_constants (id, name, rank, remarks) VALUES ('MYPAGE_ORDER_STATUS_DISP_FLAG', 'true', 1412, N'MYページ：ご注文状況表示フラグ');
+
+INSERT INTO dtb_tax_rule (tax_rule_id, apply_date, member_id, del_flg, create_date, update_date) VALUES (0, CURRENT_TIMESTAMP, 1, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+
+INSERT INTO mtb_country (id, name, rank) VALUES (352, N'アイスランド',1);
+INSERT INTO mtb_country (id, name, rank) VALUES (372, N'アイルランド',2);
+INSERT INTO mtb_country (id, name, rank) VALUES (31, N'アゼルバイジャン',3);
+INSERT INTO mtb_country (id, name, rank) VALUES (4, N'アフガニスタン',4);
+INSERT INTO mtb_country (id, name, rank) VALUES (840, N'アメリカ合衆国',5);
+INSERT INTO mtb_country (id, name, rank) VALUES (850, N'アメリカ領ヴァージン諸島',6);
+INSERT INTO mtb_country (id, name, rank) VALUES (16, N'アメリカ領サモア',7);
+INSERT INTO mtb_country (id, name, rank) VALUES (784, N'アラブ首長国連邦',8);
+INSERT INTO mtb_country (id, name, rank) VALUES (12, N'アルジェリア',9);
+INSERT INTO mtb_country (id, name, rank) VALUES (32, N'アルゼンチン',10);
+INSERT INTO mtb_country (id, name, rank) VALUES (533, N'アルバ',11);
+INSERT INTO mtb_country (id, name, rank) VALUES (8, N'アルバニア',12);
+INSERT INTO mtb_country (id, name, rank) VALUES (51, N'アルメニア',13);
+INSERT INTO mtb_country (id, name, rank) VALUES (660, N'アンギラ',14);
+INSERT INTO mtb_country (id, name, rank) VALUES (24, N'アンゴラ',15);
+INSERT INTO mtb_country (id, name, rank) VALUES (28, N'アンティグア・バーブーダ',16);
+INSERT INTO mtb_country (id, name, rank) VALUES (20, N'アンドラ',17);
+INSERT INTO mtb_country (id, name, rank) VALUES (887, N'イエメン',18);
+INSERT INTO mtb_country (id, name, rank) VALUES (826, N'イギリス',19);
+INSERT INTO mtb_country (id, name, rank) VALUES (86, N'イギリス領インド洋地域',20);
+INSERT INTO mtb_country (id, name, rank) VALUES (92, N'イギリス領ヴァージン諸島',21);
+INSERT INTO mtb_country (id, name, rank) VALUES (376, N'イスラエル',22);
+INSERT INTO mtb_country (id, name, rank) VALUES (380, N'イタリア',23);
+INSERT INTO mtb_country (id, name, rank) VALUES (368, N'イラク',24);
+INSERT INTO mtb_country (id, name, rank) VALUES (364, N'イラン|イラン・イスラム共和国',25);
+INSERT INTO mtb_country (id, name, rank) VALUES (356, N'インド',26);
+INSERT INTO mtb_country (id, name, rank) VALUES (360, N'インドネシア',27);
+INSERT INTO mtb_country (id, name, rank) VALUES (876, N'ウォリス・フツナ',28);
+INSERT INTO mtb_country (id, name, rank) VALUES (800, N'ウガンダ',29);
+INSERT INTO mtb_country (id, name, rank) VALUES (804, N'ウクライナ',30);
+INSERT INTO mtb_country (id, name, rank) VALUES (860, N'ウズベキスタン',31);
+INSERT INTO mtb_country (id, name, rank) VALUES (858, N'ウルグアイ',32);
+INSERT INTO mtb_country (id, name, rank) VALUES (218, N'エクアドル',33);
+INSERT INTO mtb_country (id, name, rank) VALUES (818, N'エジプト',34);
+INSERT INTO mtb_country (id, name, rank) VALUES (233, N'エストニア',35);
+INSERT INTO mtb_country (id, name, rank) VALUES (231, N'エチオピア',36);
+INSERT INTO mtb_country (id, name, rank) VALUES (232, N'エリトリア',37);
+INSERT INTO mtb_country (id, name, rank) VALUES (222, N'エルサルバドル',38);
+INSERT INTO mtb_country (id, name, rank) VALUES (36, N'オーストラリア',39);
+INSERT INTO mtb_country (id, name, rank) VALUES (40, N'オーストリア',40);
+INSERT INTO mtb_country (id, name, rank) VALUES (248, N'オーランド諸島',41);
+INSERT INTO mtb_country (id, name, rank) VALUES (512, N'オマーン',42);
+INSERT INTO mtb_country (id, name, rank) VALUES (528, N'オランダ',43);
+INSERT INTO mtb_country (id, name, rank) VALUES (288, N'ガーナ',44);
+INSERT INTO mtb_country (id, name, rank) VALUES (132, N'カーボベルデ',45);
+INSERT INTO mtb_country (id, name, rank) VALUES (831, N'ガーンジー',46);
+INSERT INTO mtb_country (id, name, rank) VALUES (328, N'ガイアナ',47);
+INSERT INTO mtb_country (id, name, rank) VALUES (398, N'カザフスタン',48);
+INSERT INTO mtb_country (id, name, rank) VALUES (634, N'カタール',49);
+INSERT INTO mtb_country (id, name, rank) VALUES (581, N'合衆国領有小離島',50);
+INSERT INTO mtb_country (id, name, rank) VALUES (124, N'カナダ',51);
+INSERT INTO mtb_country (id, name, rank) VALUES (266, N'ガボン',52);
+INSERT INTO mtb_country (id, name, rank) VALUES (120, N'カメルーン',53);
+INSERT INTO mtb_country (id, name, rank) VALUES (270, N'ガンビア',54);
+INSERT INTO mtb_country (id, name, rank) VALUES (116, N'カンボジア',55);
+INSERT INTO mtb_country (id, name, rank) VALUES (580, N'北マリアナ諸島',56);
+INSERT INTO mtb_country (id, name, rank) VALUES (324, N'ギニア',57);
+INSERT INTO mtb_country (id, name, rank) VALUES (624, N'ギニアビサウ',58);
+INSERT INTO mtb_country (id, name, rank) VALUES (196, N'キプロス',59);
+INSERT INTO mtb_country (id, name, rank) VALUES (192, N'キューバ',60);
+INSERT INTO mtb_country (id, name, rank) VALUES (531, N'キュラソー島|キュラソー',61);
+INSERT INTO mtb_country (id, name, rank) VALUES (300, N'ギリシャ',62);
+INSERT INTO mtb_country (id, name, rank) VALUES (296, N'キリバス',63);
+INSERT INTO mtb_country (id, name, rank) VALUES (417, N'キルギス',64);
+INSERT INTO mtb_country (id, name, rank) VALUES (320, N'グアテマラ',65);
+INSERT INTO mtb_country (id, name, rank) VALUES (312, N'グアドループ',66);
+INSERT INTO mtb_country (id, name, rank) VALUES (316, N'グアム',67);
+INSERT INTO mtb_country (id, name, rank) VALUES (414, N'クウェート',68);
+INSERT INTO mtb_country (id, name, rank) VALUES (184, N'クック諸島',69);
+INSERT INTO mtb_country (id, name, rank) VALUES (304, N'グリーンランド',70);
+INSERT INTO mtb_country (id, name, rank) VALUES (162, N'クリスマス島 (オーストラリア)|クリスマス島',71);
+INSERT INTO mtb_country (id, name, rank) VALUES (268, N'グルジア',72);
+INSERT INTO mtb_country (id, name, rank) VALUES (308, N'グレナダ',73);
+INSERT INTO mtb_country (id, name, rank) VALUES (191, N'クロアチア',74);
+INSERT INTO mtb_country (id, name, rank) VALUES (136, N'ケイマン諸島',75);
+INSERT INTO mtb_country (id, name, rank) VALUES (404, N'ケニア',76);
+INSERT INTO mtb_country (id, name, rank) VALUES (384, N'コートジボワール',77);
+INSERT INTO mtb_country (id, name, rank) VALUES (166, N'ココス諸島|ココス（キーリング）諸島',78);
+INSERT INTO mtb_country (id, name, rank) VALUES (188, N'コスタリカ',79);
+INSERT INTO mtb_country (id, name, rank) VALUES (174, N'コモロ',80);
+INSERT INTO mtb_country (id, name, rank) VALUES (170, N'コロンビア',81);
+INSERT INTO mtb_country (id, name, rank) VALUES (178, N'コンゴ共和国',82);
+INSERT INTO mtb_country (id, name, rank) VALUES (180, N'コンゴ民主共和国',83);
+INSERT INTO mtb_country (id, name, rank) VALUES (682, N'サウジアラビア',84);
+INSERT INTO mtb_country (id, name, rank) VALUES (239, N'サウスジョージア・サウスサンドウィッチ諸島',85);
+INSERT INTO mtb_country (id, name, rank) VALUES (882, N'サモア',86);
+INSERT INTO mtb_country (id, name, rank) VALUES (678, N'サントメ・プリンシペ',87);
+INSERT INTO mtb_country (id, name, rank) VALUES (652, N'サン・バルテルミー島|サン・バルテルミー',88);
+INSERT INTO mtb_country (id, name, rank) VALUES (894, N'ザンビア',89);
+INSERT INTO mtb_country (id, name, rank) VALUES (666, N'サンピエール島・ミクロン島',90);
+INSERT INTO mtb_country (id, name, rank) VALUES (674, N'サンマリノ',91);
+INSERT INTO mtb_country (id, name, rank) VALUES (663, N'サン・マルタン (西インド諸島)|サン・マルタン（フランス領）',92);
+INSERT INTO mtb_country (id, name, rank) VALUES (694, N'シエラレオネ',93);
+INSERT INTO mtb_country (id, name, rank) VALUES (262, N'ジブチ',94);
+INSERT INTO mtb_country (id, name, rank) VALUES (292, N'ジブラルタル',95);
+INSERT INTO mtb_country (id, name, rank) VALUES (832, N'ジャージー',96);
+INSERT INTO mtb_country (id, name, rank) VALUES (388, N'ジャマイカ',97);
+INSERT INTO mtb_country (id, name, rank) VALUES (760, N'シリア|シリア・アラブ共和国',98);
+INSERT INTO mtb_country (id, name, rank) VALUES (702, N'シンガポール',99);
+INSERT INTO mtb_country (id, name, rank) VALUES (534, N'シント・マールテン|シント・マールテン（オランダ領）',100);
+INSERT INTO mtb_country (id, name, rank) VALUES (716, N'ジンバブエ',101);
+INSERT INTO mtb_country (id, name, rank) VALUES (756, N'スイス',102);
+INSERT INTO mtb_country (id, name, rank) VALUES (752, N'スウェーデン',103);
+INSERT INTO mtb_country (id, name, rank) VALUES (729, N'スーダン',104);
+INSERT INTO mtb_country (id, name, rank) VALUES (744, N'スヴァールバル諸島およびヤンマイエン島',105);
+INSERT INTO mtb_country (id, name, rank) VALUES (724, N'スペイン',106);
+INSERT INTO mtb_country (id, name, rank) VALUES (740, N'スリナム',107);
+INSERT INTO mtb_country (id, name, rank) VALUES (144, N'スリランカ',108);
+INSERT INTO mtb_country (id, name, rank) VALUES (703, N'スロバキア',109);
+INSERT INTO mtb_country (id, name, rank) VALUES (705, N'スロベニア',110);
+INSERT INTO mtb_country (id, name, rank) VALUES (748, N'スワジランド',111);
+INSERT INTO mtb_country (id, name, rank) VALUES (690, N'セーシェル',112);
+INSERT INTO mtb_country (id, name, rank) VALUES (226, N'赤道ギニア',113);
+INSERT INTO mtb_country (id, name, rank) VALUES (686, N'セネガル',114);
+INSERT INTO mtb_country (id, name, rank) VALUES (688, N'セルビア',115);
+INSERT INTO mtb_country (id, name, rank) VALUES (659, N'セントクリストファー・ネイビス',116);
+INSERT INTO mtb_country (id, name, rank) VALUES (670, N'セントビンセント・グレナディーン|セントビンセントおよびグレナディーン諸島',117);
+INSERT INTO mtb_country (id, name, rank) VALUES (654, N'セントヘレナ・アセンションおよびトリスタンダクーニャ',118);
+INSERT INTO mtb_country (id, name, rank) VALUES (662, N'セントルシア',119);
+INSERT INTO mtb_country (id, name, rank) VALUES (706, N'ソマリア',120);
+INSERT INTO mtb_country (id, name, rank) VALUES (90, N'ソロモン諸島',121);
+INSERT INTO mtb_country (id, name, rank) VALUES (796, N'タークス・カイコス諸島',122);
+INSERT INTO mtb_country (id, name, rank) VALUES (764, N'タイ王国|タイ',123);
+INSERT INTO mtb_country (id, name, rank) VALUES (410, N'大韓民国',124);
+INSERT INTO mtb_country (id, name, rank) VALUES (158, N'台湾',125);
+INSERT INTO mtb_country (id, name, rank) VALUES (762, N'タジキスタン',126);
+INSERT INTO mtb_country (id, name, rank) VALUES (834, N'タンザニア',127);
+INSERT INTO mtb_country (id, name, rank) VALUES (203, N'チェコ',128);
+INSERT INTO mtb_country (id, name, rank) VALUES (148, N'チャド',129);
+INSERT INTO mtb_country (id, name, rank) VALUES (140, N'中央アフリカ共和国',130);
+INSERT INTO mtb_country (id, name, rank) VALUES (156, N'中華人民共和国|中国',131);
+INSERT INTO mtb_country (id, name, rank) VALUES (788, N'チュニジア',132);
+INSERT INTO mtb_country (id, name, rank) VALUES (408, N'朝鮮民主主義人民共和国',133);
+INSERT INTO mtb_country (id, name, rank) VALUES (152, N'チリ',134);
+INSERT INTO mtb_country (id, name, rank) VALUES (798, N'ツバル',135);
+INSERT INTO mtb_country (id, name, rank) VALUES (208, N'デンマーク',136);
+INSERT INTO mtb_country (id, name, rank) VALUES (276, N'ドイツ',137);
+INSERT INTO mtb_country (id, name, rank) VALUES (768, N'トーゴ',138);
+INSERT INTO mtb_country (id, name, rank) VALUES (772, N'トケラウ',139);
+INSERT INTO mtb_country (id, name, rank) VALUES (214, N'ドミニカ共和国',140);
+INSERT INTO mtb_country (id, name, rank) VALUES (212, N'ドミニカ国',141);
+INSERT INTO mtb_country (id, name, rank) VALUES (780, N'トリニダード・トバゴ',142);
+INSERT INTO mtb_country (id, name, rank) VALUES (795, N'トルクメニスタン',143);
+INSERT INTO mtb_country (id, name, rank) VALUES (792, N'トルコ',144);
+INSERT INTO mtb_country (id, name, rank) VALUES (776, N'トンガ',145);
+INSERT INTO mtb_country (id, name, rank) VALUES (566, N'ナイジェリア',146);
+INSERT INTO mtb_country (id, name, rank) VALUES (520, N'ナウル',147);
+INSERT INTO mtb_country (id, name, rank) VALUES (516, N'ナミビア',148);
+INSERT INTO mtb_country (id, name, rank) VALUES (10, N'南極',149);
+INSERT INTO mtb_country (id, name, rank) VALUES (570, N'ニウエ',150);
+INSERT INTO mtb_country (id, name, rank) VALUES (558, N'ニカラグア',151);
+INSERT INTO mtb_country (id, name, rank) VALUES (562, N'ニジェール',152);
+INSERT INTO mtb_country (id, name, rank) VALUES (392, N'日本',153);
+INSERT INTO mtb_country (id, name, rank) VALUES (732, N'西サハラ',154);
+INSERT INTO mtb_country (id, name, rank) VALUES (540, N'ニューカレドニア',155);
+INSERT INTO mtb_country (id, name, rank) VALUES (554, N'ニュージーランド',156);
+INSERT INTO mtb_country (id, name, rank) VALUES (524, N'ネパール',157);
+INSERT INTO mtb_country (id, name, rank) VALUES (574, N'ノーフォーク島',158);
+INSERT INTO mtb_country (id, name, rank) VALUES (578, N'ノルウェー',159);
+INSERT INTO mtb_country (id, name, rank) VALUES (334, N'ハード島とマクドナルド諸島',160);
+INSERT INTO mtb_country (id, name, rank) VALUES (48, N'バーレーン',161);
+INSERT INTO mtb_country (id, name, rank) VALUES (332, N'ハイチ',162);
+INSERT INTO mtb_country (id, name, rank) VALUES (586, N'パキスタン',163);
+INSERT INTO mtb_country (id, name, rank) VALUES (336, N'バチカン|バチカン市国',164);
+INSERT INTO mtb_country (id, name, rank) VALUES (591, N'パナマ',165);
+INSERT INTO mtb_country (id, name, rank) VALUES (548, N'バヌアツ',166);
+INSERT INTO mtb_country (id, name, rank) VALUES (44, N'バハマ',167);
+INSERT INTO mtb_country (id, name, rank) VALUES (598, N'パプアニューギニア',168);
+INSERT INTO mtb_country (id, name, rank) VALUES (60, N'バミューダ諸島|バミューダ',169);
+INSERT INTO mtb_country (id, name, rank) VALUES (585, N'パラオ',170);
+INSERT INTO mtb_country (id, name, rank) VALUES (600, N'パラグアイ',171);
+INSERT INTO mtb_country (id, name, rank) VALUES (52, N'バルバドス',172);
+INSERT INTO mtb_country (id, name, rank) VALUES (275, N'パレスチナ',173);
+INSERT INTO mtb_country (id, name, rank) VALUES (348, N'ハンガリー',174);
+INSERT INTO mtb_country (id, name, rank) VALUES (50, N'バングラデシュ',175);
+INSERT INTO mtb_country (id, name, rank) VALUES (626, N'東ティモール',176);
+INSERT INTO mtb_country (id, name, rank) VALUES (612, N'ピトケアン諸島|ピトケアン',177);
+INSERT INTO mtb_country (id, name, rank) VALUES (242, N'フィジー',178);
+INSERT INTO mtb_country (id, name, rank) VALUES (608, N'フィリピン',179);
+INSERT INTO mtb_country (id, name, rank) VALUES (246, N'フィンランド',180);
+INSERT INTO mtb_country (id, name, rank) VALUES (64, N'ブータン',181);
+INSERT INTO mtb_country (id, name, rank) VALUES (74, N'ブーベ島',182);
+INSERT INTO mtb_country (id, name, rank) VALUES (630, N'プエルトリコ',183);
+INSERT INTO mtb_country (id, name, rank) VALUES (234, N'フェロー諸島',184);
+INSERT INTO mtb_country (id, name, rank) VALUES (238, N'フォークランド諸島|フォークランド（マルビナス）諸島',185);
+INSERT INTO mtb_country (id, name, rank) VALUES (76, N'ブラジル',186);
+INSERT INTO mtb_country (id, name, rank) VALUES (250, N'フランス',187);
+INSERT INTO mtb_country (id, name, rank) VALUES (254, N'フランス領ギアナ',188);
+INSERT INTO mtb_country (id, name, rank) VALUES (258, N'フランス領ポリネシア',189);
+INSERT INTO mtb_country (id, name, rank) VALUES (260, N'フランス領南方・南極地域',190);
+INSERT INTO mtb_country (id, name, rank) VALUES (100, N'ブルガリア',191);
+INSERT INTO mtb_country (id, name, rank) VALUES (854, N'ブルキナファソ',192);
+INSERT INTO mtb_country (id, name, rank) VALUES (96, N'ブルネイ|ブルネイ・ダルサラーム',193);
+INSERT INTO mtb_country (id, name, rank) VALUES (108, N'ブルンジ',194);
+INSERT INTO mtb_country (id, name, rank) VALUES (704, N'ベトナム',195);
+INSERT INTO mtb_country (id, name, rank) VALUES (204, N'ベナン',196);
+INSERT INTO mtb_country (id, name, rank) VALUES (862, N'ベネズエラ|ベネズエラ・ボリバル共和国',197);
+INSERT INTO mtb_country (id, name, rank) VALUES (112, N'ベラルーシ',198);
+INSERT INTO mtb_country (id, name, rank) VALUES (84, N'ベリーズ',199);
+INSERT INTO mtb_country (id, name, rank) VALUES (604, N'ペルー',200);
+INSERT INTO mtb_country (id, name, rank) VALUES (56, N'ベルギー',201);
+INSERT INTO mtb_country (id, name, rank) VALUES (616, N'ポーランド',202);
+INSERT INTO mtb_country (id, name, rank) VALUES (70, N'ボスニア・ヘルツェゴビナ',203);
+INSERT INTO mtb_country (id, name, rank) VALUES (72, N'ボツワナ',204);
+INSERT INTO mtb_country (id, name, rank) VALUES (535, N'BES諸島|ボネール、シント・ユースタティウスおよびサバ',205);
+INSERT INTO mtb_country (id, name, rank) VALUES (68, N'ボリビア|ボリビア多民族国',206);
+INSERT INTO mtb_country (id, name, rank) VALUES (620, N'ポルトガル',207);
+INSERT INTO mtb_country (id, name, rank) VALUES (344, N'香港',208);
+INSERT INTO mtb_country (id, name, rank) VALUES (340, N'ホンジュラス',209);
+INSERT INTO mtb_country (id, name, rank) VALUES (584, N'マーシャル諸島',210);
+INSERT INTO mtb_country (id, name, rank) VALUES (446, N'マカオ',211);
+INSERT INTO mtb_country (id, name, rank) VALUES (807, N'マケドニア共和国|マケドニア旧ユーゴスラビア共和国',212);
+INSERT INTO mtb_country (id, name, rank) VALUES (450, N'マダガスカル',213);
+INSERT INTO mtb_country (id, name, rank) VALUES (175, N'マヨット',214);
+INSERT INTO mtb_country (id, name, rank) VALUES (454, N'マラウイ',215);
+INSERT INTO mtb_country (id, name, rank) VALUES (466, N'マリ共和国|マリ',216);
+INSERT INTO mtb_country (id, name, rank) VALUES (470, N'マルタ',217);
+INSERT INTO mtb_country (id, name, rank) VALUES (474, N'マルティニーク',218);
+INSERT INTO mtb_country (id, name, rank) VALUES (458, N'マレーシア',219);
+INSERT INTO mtb_country (id, name, rank) VALUES (833, N'マン島',220);
+INSERT INTO mtb_country (id, name, rank) VALUES (583, N'ミクロネシア連邦',221);
+INSERT INTO mtb_country (id, name, rank) VALUES (710, N'南アフリカ共和国|南アフリカ',222);
+INSERT INTO mtb_country (id, name, rank) VALUES (728, N'南スーダン',223);
+INSERT INTO mtb_country (id, name, rank) VALUES (104, N'ミャンマー',224);
+INSERT INTO mtb_country (id, name, rank) VALUES (484, N'メキシコ',225);
+INSERT INTO mtb_country (id, name, rank) VALUES (480, N'モーリシャス',226);
+INSERT INTO mtb_country (id, name, rank) VALUES (478, N'モーリタニア',227);
+INSERT INTO mtb_country (id, name, rank) VALUES (508, N'モザンビーク',228);
+INSERT INTO mtb_country (id, name, rank) VALUES (492, N'モナコ',229);
+INSERT INTO mtb_country (id, name, rank) VALUES (462, N'モルディブ',230);
+INSERT INTO mtb_country (id, name, rank) VALUES (498, N'モルドバ|モルドバ共和国',231);
+INSERT INTO mtb_country (id, name, rank) VALUES (504, N'モロッコ',232);
+INSERT INTO mtb_country (id, name, rank) VALUES (496, N'モンゴル国|モンゴル',233);
+INSERT INTO mtb_country (id, name, rank) VALUES (499, N'モンテネグロ',234);
+INSERT INTO mtb_country (id, name, rank) VALUES (500, N'モントセラト',235);
+INSERT INTO mtb_country (id, name, rank) VALUES (400, N'ヨルダン',236);
+INSERT INTO mtb_country (id, name, rank) VALUES (418, N'ラオス|ラオス人民民主共和国',237);
+INSERT INTO mtb_country (id, name, rank) VALUES (428, N'ラトビア',238);
+INSERT INTO mtb_country (id, name, rank) VALUES (440, N'リトアニア',239);
+INSERT INTO mtb_country (id, name, rank) VALUES (434, N'リビア',240);
+INSERT INTO mtb_country (id, name, rank) VALUES (438, N'リヒテンシュタイン',241);
+INSERT INTO mtb_country (id, name, rank) VALUES (430, N'リベリア',242);
+INSERT INTO mtb_country (id, name, rank) VALUES (642, N'ルーマニア',243);
+INSERT INTO mtb_country (id, name, rank) VALUES (442, N'ルクセンブルク',244);
+INSERT INTO mtb_country (id, name, rank) VALUES (646, N'ルワンダ',245);
+INSERT INTO mtb_country (id, name, rank) VALUES (426, N'レソト',246);
+INSERT INTO mtb_country (id, name, rank) VALUES (422, N'レバノン',247);
+INSERT INTO mtb_country (id, name, rank) VALUES (638, N'レユニオン',248);
+INSERT INTO mtb_country (id, name, rank) VALUES (643, N'ロシア|ロシア連邦',249);
+
+
+INSERT INTO dtb_plugin (plugin_id, plugin_name, class_name, plugin_code, author, author_site_url, plugin_site_url, plugin_version, compliant_version, plugin_description, priority, enable, create_date, update_date) VALUES (1, N'Microsoft Windows Azure プラグイン', 'SQLAzureSupport', 'SQLAzureSupport', 'Kentaro Ohkouchi (Loop AZ)', 'http://www.loop-az.co.jp/', null, '1.0.1', '2.12.1', N'Microsoft Windows Azure 対応プラグインです。インストーラのデータベースに SQL Azure が追加されます。PHP 5.3.0 以降対応。sqlsrv ドライバが必要です。', 1, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
+
+CREATE NONCLUSTERED INDEX product_category_category_id_idx ON [dbo].[dtb_product_categories] ([category_id]) INCLUDE ([product_id]);
+CREATE NONCLUSTERED INDEX product_code_idx ON dtb_products_class (product_code) INCLUDE (product_id);
+CREATE NONCLUSTERED INDEX price01_idx ON dtb_products_class (price01) INCLUDE (product_id);
+CREATE NONCLUSTERED INDEX price02_idx ON dtb_products_class (price02) INCLUDE (product_id);
+CREATE NONCLUSTERED INDEX stock_idx ON dtb_products_class (stock) INCLUDE (product_id);
+CREATE NONCLUSTERED INDEX stock_unlimited_idx ON dtb_products_class (stock_unlimited) INCLUDE (product_id);
+CREATE NONCLUSTERED INDEX point_rate_idx ON dtb_products_class (point_rate) INCLUDE (product_id);
+CREATE NONCLUSTERED INDEX deliv_fee_idx ON dtb_products_class (deliv_fee) INCLUDE (product_id);
+CREATE NONCLUSTERED INDEX product_id_idx ON dtb_products_class (product_id);
+CREATE NONCLUSTERED INDEX IX_dtb_products_class_0 ON dtb_products_class (del_flg)
+CREATE NONCLUSTERED INDEX maker_id_idx ON dtb_products (maker_id);
+CREATE NONCLUSTERED INDEX dtb_products_class_count_idx ON dtb_products_class (del_flg) INCLUDE (product_id, product_code, stock, stock_unlimited, price02);
+CREATE NONCLUSTERED INDEX dtb_products_status_del_flg_idx ON dtb_products (status, del_flg) INCLUDE (product_id);
+CREATE NONCLUSTERED INDEX dtb_category_rank_idx ON dtb_category (rank) INCLUDE (category_id);
+CREATE NONCLUSTERED INDEX dtb_product_categories_rank_idx ON dtb_product_categories (rank) INCLUDE (product_id);
